# Generated from ./SqlBase.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,249,2336,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,1,
        0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,220,8,5,1,5,1,5,1,5,3,5,225,8,5,1,
        5,3,5,228,8,5,1,5,1,5,1,5,3,5,233,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,3,5,246,8,5,1,5,1,5,3,5,250,8,5,1,5,1,5,1,5,1,
        5,1,5,3,5,257,8,5,1,5,1,5,1,5,3,5,262,8,5,1,5,1,5,1,5,3,5,267,8,
        5,1,5,3,5,270,8,5,1,5,3,5,273,8,5,1,5,1,5,3,5,277,8,5,1,5,3,5,280,
        8,5,1,5,3,5,283,8,5,1,5,1,5,1,5,1,5,1,5,3,5,290,8,5,1,5,1,5,3,5,
        294,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,302,8,5,1,5,3,5,305,8,5,1,5,
        3,5,308,8,5,1,5,3,5,311,8,5,1,5,3,5,314,8,5,1,5,3,5,317,8,5,1,5,
        1,5,3,5,321,8,5,1,5,3,5,324,8,5,1,5,3,5,327,8,5,1,5,1,5,1,5,1,5,
        1,5,3,5,334,8,5,1,5,1,5,1,5,1,5,3,5,340,8,5,1,5,1,5,1,5,1,5,3,5,
        346,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,354,8,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,386,8,5,1,5,1,5,1,5,1,5,
        1,5,1,5,3,5,394,8,5,1,5,1,5,3,5,398,8,5,1,5,1,5,1,5,3,5,403,8,5,
        1,5,1,5,1,5,1,5,3,5,409,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,417,8,5,
        1,5,1,5,1,5,1,5,3,5,423,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,3,5,436,8,5,1,5,4,5,439,8,5,11,5,12,5,440,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,3,5,450,8,5,1,5,4,5,453,8,5,11,5,12,5,454,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,471,8,5,1,5,
        1,5,1,5,5,5,476,8,5,10,5,12,5,479,9,5,1,5,3,5,482,8,5,1,5,1,5,1,
        5,1,5,1,5,1,5,3,5,490,8,5,1,5,1,5,1,5,5,5,495,8,5,10,5,12,5,498,
        9,5,1,5,1,5,1,5,1,5,3,5,504,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,3,5,519,8,5,1,5,1,5,3,5,523,8,5,1,5,1,5,1,5,
        1,5,3,5,529,8,5,1,5,1,5,1,5,1,5,3,5,535,8,5,1,5,3,5,538,8,5,1,5,
        3,5,541,8,5,1,5,1,5,1,5,1,5,3,5,547,8,5,1,5,1,5,3,5,551,8,5,1,5,
        1,5,3,5,555,8,5,1,5,1,5,1,5,3,5,560,8,5,1,5,1,5,3,5,564,8,5,1,5,
        1,5,1,5,1,5,1,5,1,5,3,5,572,8,5,1,5,3,5,575,8,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,3,5,584,8,5,1,5,1,5,1,5,3,5,589,8,5,1,5,1,5,1,5,1,5,
        3,5,595,8,5,1,5,1,5,1,5,1,5,3,5,601,8,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,5,5,611,8,5,10,5,12,5,614,9,5,3,5,616,8,5,1,5,1,5,3,5,620,
        8,5,1,5,1,5,1,5,3,5,625,8,5,1,5,1,5,1,5,3,5,630,8,5,1,5,1,5,1,5,
        1,5,1,5,3,5,637,8,5,1,5,3,5,640,8,5,1,5,3,5,643,8,5,1,5,1,5,1,5,
        1,5,1,5,3,5,650,8,5,1,5,1,5,1,5,3,5,655,8,5,1,5,1,5,1,5,1,5,3,5,
        661,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,670,8,5,1,5,1,5,1,5,1,5,
        1,5,1,5,3,5,678,8,5,1,5,1,5,1,5,1,5,3,5,684,8,5,1,5,1,5,3,5,688,
        8,5,1,5,1,5,3,5,692,8,5,1,5,1,5,3,5,696,8,5,3,5,698,8,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,3,5,707,8,5,1,5,1,5,1,5,1,5,3,5,713,8,5,1,5,
        1,5,1,5,3,5,718,8,5,1,5,3,5,721,8,5,1,5,1,5,3,5,725,8,5,1,5,3,5,
        728,8,5,1,5,1,5,1,5,1,5,1,5,5,5,735,8,5,10,5,12,5,738,9,5,1,5,1,
        5,3,5,742,8,5,1,5,1,5,1,5,3,5,747,8,5,1,5,3,5,750,8,5,1,5,1,5,1,
        5,1,5,3,5,756,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,764,8,5,1,5,1,5,1,
        5,3,5,769,8,5,1,5,1,5,1,5,1,5,3,5,775,8,5,1,5,1,5,1,5,1,5,3,5,781,
        8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,790,8,5,10,5,12,5,793,9,5,1,
        5,1,5,1,5,5,5,798,8,5,10,5,12,5,801,9,5,1,5,1,5,5,5,805,8,5,10,5,
        12,5,808,9,5,1,5,1,5,1,5,5,5,813,8,5,10,5,12,5,816,9,5,3,5,818,8,
        5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,826,8,6,1,6,1,6,3,6,830,8,6,1,6,1,
        6,1,6,1,6,1,6,3,6,837,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,953,8,6,1,6,1,6,1,6,1,6,1,
        6,1,6,3,6,961,8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,969,8,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,3,6,978,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,3,6,990,8,6,1,7,1,7,3,7,994,8,7,1,7,3,7,997,8,7,1,7,1,7,1,
        7,1,7,3,7,1003,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,1013,8,8,
        1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,3,9,1025,8,9,1,9,1,9,1,9,
        3,9,1030,8,9,1,10,1,10,1,10,1,11,3,11,1036,8,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,1048,8,12,3,12,1050,8,12,1,
        12,1,12,1,12,3,12,1055,8,12,1,12,1,12,3,12,1059,8,12,3,12,1061,8,
        12,1,13,1,13,3,13,1065,8,13,1,14,1,14,1,14,1,14,1,14,5,14,1072,8,
        14,10,14,12,14,1075,9,14,1,14,1,14,1,15,1,15,1,15,3,15,1082,8,15,
        1,16,1,16,1,16,1,16,1,16,3,16,1089,8,16,1,17,1,17,1,17,1,17,3,17,
        1095,8,17,5,17,1097,8,17,10,17,12,17,1100,9,17,1,18,1,18,1,18,1,
        18,5,18,1106,8,18,10,18,12,18,1109,9,18,1,19,1,19,3,19,1113,8,19,
        1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,5,21,1126,
        8,21,10,21,12,21,1129,9,21,1,21,1,21,1,22,1,22,3,22,1135,8,22,1,
        22,3,22,1138,8,22,1,23,1,23,1,23,5,23,1143,8,23,10,23,12,23,1146,
        9,23,1,23,3,23,1149,8,23,1,24,1,24,1,24,1,24,3,24,1155,8,24,1,25,
        1,25,1,25,1,25,5,25,1161,8,25,10,25,12,25,1164,9,25,1,25,1,25,1,
        26,1,26,1,26,1,26,5,26,1172,8,26,10,26,12,26,1175,9,26,1,26,1,26,
        1,27,1,27,1,27,1,27,1,27,1,27,3,27,1185,8,27,1,28,1,28,1,28,1,28,
        1,28,3,28,1192,8,28,1,29,1,29,1,29,1,29,3,29,1198,8,29,1,30,1,30,
        1,30,1,31,3,31,1204,8,31,1,31,1,31,1,31,1,31,1,31,4,31,1211,8,31,
        11,31,12,31,1212,3,31,1215,8,31,1,32,1,32,1,32,1,32,1,32,5,32,1222,
        8,32,10,32,12,32,1225,9,32,3,32,1227,8,32,1,32,1,32,1,32,1,32,1,
        32,5,32,1234,8,32,10,32,12,32,1237,9,32,3,32,1239,8,32,1,32,1,32,
        1,32,1,32,1,32,5,32,1246,8,32,10,32,12,32,1249,9,32,3,32,1251,8,
        32,1,32,1,32,1,32,1,32,1,32,5,32,1258,8,32,10,32,12,32,1261,9,32,
        3,32,1263,8,32,1,32,3,32,1266,8,32,1,32,1,32,3,32,1270,8,32,1,33,
        3,33,1273,8,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,3,34,
        1284,8,34,1,34,5,34,1287,8,34,10,34,12,34,1290,9,34,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,3,35,1300,8,35,1,36,1,36,3,36,1304,8,
        36,1,36,1,36,3,36,1308,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,3,37,1320,8,37,1,37,3,37,1323,8,37,1,37,1,37,3,37,1327,
        8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,1337,8,37,1,37,
        1,37,3,37,1341,8,37,3,37,1343,8,37,1,37,3,37,1346,8,37,1,37,1,37,
        3,37,1350,8,37,1,37,3,37,1353,8,37,1,37,1,37,3,37,1357,8,37,1,37,
        1,37,5,37,1361,8,37,10,37,12,37,1364,9,37,1,37,3,37,1367,8,37,1,
        37,1,37,3,37,1371,8,37,1,37,1,37,1,37,3,37,1376,8,37,1,37,3,37,1379,
        8,37,3,37,1381,8,37,1,37,5,37,1384,8,37,10,37,12,37,1387,9,37,1,
        37,1,37,3,37,1391,8,37,1,37,3,37,1394,8,37,1,37,1,37,3,37,1398,8,
        37,1,37,3,37,1401,8,37,3,37,1403,8,37,1,38,1,38,1,38,3,38,1408,8,
        38,1,38,5,38,1411,8,38,10,38,12,38,1414,9,38,1,38,1,38,1,39,1,39,
        1,39,1,39,1,39,1,39,5,39,1424,8,39,10,39,12,39,1427,9,39,1,39,1,
        39,3,39,1431,8,39,1,40,1,40,1,40,1,40,5,40,1437,8,40,10,40,12,40,
        1440,9,40,1,40,5,40,1443,8,40,10,40,12,40,1446,9,40,1,41,1,41,1,
        41,1,41,1,41,5,41,1453,8,41,10,41,12,41,1456,9,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,1468,8,41,10,41,12,41,1471,
        9,41,1,41,1,41,3,41,1475,8,41,1,42,1,42,1,42,1,42,5,42,1481,8,42,
        10,42,12,42,1484,9,42,3,42,1486,8,42,1,42,1,42,3,42,1490,8,42,1,
        43,1,43,1,43,3,43,1495,8,43,1,43,1,43,1,43,1,43,1,43,5,43,1502,8,
        43,10,43,12,43,1505,9,43,3,43,1507,8,43,1,43,1,43,1,43,3,43,1512,
        8,43,1,43,1,43,1,43,5,43,1517,8,43,10,43,12,43,1520,9,43,3,43,1522,
        8,43,1,44,1,44,1,45,1,45,5,45,1528,8,45,10,45,12,45,1531,9,45,1,
        46,1,46,1,46,1,46,3,46,1537,8,46,1,46,1,46,1,46,1,46,1,46,3,46,1544,
        8,46,1,47,3,47,1547,8,47,1,47,1,47,1,47,3,47,1552,8,47,1,47,1,47,
        1,47,1,47,3,47,1558,8,47,1,47,1,47,3,47,1562,8,47,1,47,3,47,1565,
        8,47,1,47,1,47,3,47,1569,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        5,48,1578,8,48,10,48,12,48,1581,9,48,1,48,1,48,1,48,1,48,3,48,1587,
        8,48,3,48,1589,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1610,8,49,
        3,49,1612,8,49,3,49,1614,8,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,
        1,51,1,51,5,51,1625,8,51,10,51,12,51,1628,9,51,1,52,1,52,1,52,1,
        52,5,52,1634,8,52,10,52,12,52,1637,9,52,1,52,1,52,1,53,1,53,3,53,
        1643,8,53,1,54,1,54,1,54,1,54,5,54,1649,8,54,10,54,12,54,1652,9,
        54,1,54,1,54,1,55,1,55,1,55,3,55,1659,8,55,1,56,1,56,3,56,1663,8,
        56,1,56,3,56,1666,8,56,1,56,3,56,1669,8,56,1,56,1,56,1,56,1,56,3,
        56,1675,8,56,1,56,3,56,1678,8,56,1,56,3,56,1681,8,56,1,56,1,56,1,
        56,1,56,3,56,1687,8,56,1,56,3,56,1690,8,56,1,56,3,56,1693,8,56,1,
        56,1,56,1,56,1,56,1,56,1,56,5,56,1701,8,56,10,56,12,56,1704,9,56,
        3,56,1706,8,56,1,56,1,56,3,56,1710,8,56,1,57,1,57,1,57,1,57,5,57,
        1716,8,57,10,57,12,57,1719,9,57,1,57,3,57,1722,8,57,1,57,1,57,3,
        57,1726,8,57,3,57,1728,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,
        58,1737,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,
        58,1749,8,58,3,58,1751,8,58,1,58,1,58,1,58,1,58,1,58,3,58,1758,8,
        58,1,58,1,58,1,58,1,58,1,58,3,58,1765,8,58,1,58,1,58,1,58,1,58,3,
        58,1771,8,58,1,58,1,58,1,58,1,58,3,58,1777,8,58,3,58,1779,8,58,1,
        59,1,59,1,59,3,59,1784,8,59,1,59,1,59,1,60,1,60,1,60,3,60,1791,8,
        60,1,60,1,60,1,61,1,61,3,61,1797,8,61,1,61,1,61,3,61,1801,8,61,3,
        61,1803,8,61,1,62,1,62,1,62,5,62,1808,8,62,10,62,12,62,1811,9,62,
        1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,
        1825,8,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,1833,8,64,10,64,12,
        64,1836,9,64,1,65,1,65,3,65,1840,8,65,1,66,1,66,1,66,1,66,1,66,1,
        66,1,66,1,66,1,66,1,67,3,67,1852,8,67,1,67,1,67,1,67,1,67,1,67,1,
        67,3,67,1860,8,67,1,67,1,67,1,67,1,67,1,67,5,67,1867,8,67,10,67,
        12,67,1870,9,67,1,67,1,67,1,67,3,67,1875,8,67,1,67,1,67,1,67,1,67,
        1,67,1,67,3,67,1883,8,67,1,67,1,67,1,67,1,67,3,67,1889,8,67,1,67,
        3,67,1892,8,67,1,68,1,68,1,68,1,68,5,68,1898,8,68,10,68,12,68,1901,
        9,68,1,68,1,68,1,69,1,69,1,69,1,69,5,69,1909,8,69,10,69,12,69,1912,
        9,69,1,69,1,69,1,70,1,70,1,70,1,70,3,70,1920,8,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,5,70,1941,8,70,10,70,12,70,1944,9,70,1,71,1,71,1,
        71,4,71,1949,8,71,11,71,12,71,1950,1,71,1,71,3,71,1955,8,71,1,71,
        1,71,1,71,1,71,1,71,4,71,1962,8,71,11,71,12,71,1963,1,71,1,71,3,
        71,1968,8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
        71,1,71,1,71,1,71,5,71,1984,8,71,10,71,12,71,1987,9,71,3,71,1989,
        8,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1997,8,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,3,71,2006,8,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,4,71,2020,8,71,11,71,12,71,2021,1,
        71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,2033,8,71,1,71,1,
        71,1,71,5,71,2038,8,71,10,71,12,71,2041,9,71,3,71,2043,8,71,1,71,
        1,71,1,71,3,71,2048,8,71,1,71,1,71,1,71,1,71,1,71,3,71,2055,8,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,2065,8,71,10,71,12,
        71,2068,9,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,4,72,2078,8,
        72,11,72,12,72,2079,3,72,2082,8,72,1,73,1,73,1,74,1,74,1,75,1,75,
        1,76,1,76,1,77,1,77,5,77,2094,8,77,10,77,12,77,2097,9,77,1,78,1,
        78,1,78,1,78,3,78,2103,8,78,1,79,3,79,2106,8,79,1,79,1,79,3,79,2110,
        8,79,1,80,1,80,1,80,3,80,2115,8,80,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2132,8,81,1,81,
        1,81,3,81,2136,8,81,1,81,1,81,1,81,1,81,1,81,5,81,2143,8,81,10,81,
        12,81,2146,9,81,1,81,3,81,2149,8,81,3,81,2151,8,81,1,82,1,82,1,82,
        5,82,2156,8,82,10,82,12,82,2159,9,82,1,83,1,83,1,83,1,83,3,83,2165,
        8,83,1,84,1,84,1,84,5,84,2170,8,84,10,84,12,84,2173,9,84,1,85,1,
        85,1,85,1,85,1,85,3,85,2180,8,85,1,86,1,86,1,86,1,86,1,86,1,87,1,
        87,1,87,1,87,5,87,2191,8,87,10,87,12,87,2194,9,87,1,88,1,88,1,88,
        1,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,5,89,2207,8,89,10,89,12,
        89,2210,9,89,1,89,1,89,1,89,1,89,1,89,5,89,2217,8,89,10,89,12,89,
        2220,9,89,3,89,2222,8,89,1,89,1,89,1,89,1,89,1,89,5,89,2229,8,89,
        10,89,12,89,2232,9,89,3,89,2234,8,89,3,89,2236,8,89,1,89,3,89,2239,
        8,89,1,89,3,89,2242,8,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
        1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,2260,8,90,1,91,1,91,
        1,91,1,91,1,91,1,91,1,91,3,91,2269,8,91,1,92,1,92,1,92,5,92,2274,
        8,92,10,92,12,92,2277,9,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,
        93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,2295,8,93,1,94,1,
        94,1,94,3,94,2300,8,94,1,95,1,95,1,96,3,96,2305,8,96,1,96,1,96,3,
        96,2309,8,96,1,96,1,96,3,96,2313,8,96,1,96,1,96,3,96,2317,8,96,1,
        96,1,96,3,96,2321,8,96,1,96,1,96,3,96,2325,8,96,1,96,1,96,3,96,2329,
        8,96,1,96,3,96,2332,8,96,1,97,1,97,1,97,5,736,791,799,806,814,4,
        68,128,140,142,98,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
        180,182,184,186,188,190,192,194,0,24,1,0,193,194,1,0,77,78,3,0,86,
        88,167,167,173,173,2,0,11,11,29,29,2,0,42,42,83,83,2,0,167,167,173,
        173,2,0,12,12,206,206,1,0,98,101,1,0,41,42,2,0,70,70,72,72,1,0,14,
        15,1,0,238,239,1,0,34,35,2,0,132,133,138,138,1,0,134,137,1,0,132,
        133,1,0,124,131,1,0,132,141,1,0,27,30,1,0,38,39,2,0,63,63,148,148,
        2,0,23,23,146,146,1,0,67,68,8,0,10,49,52,52,60,97,102,119,123,123,
        137,137,142,229,231,232,2725,0,196,1,0,0,0,2,199,1,0,0,0,4,202,1,
        0,0,0,6,205,1,0,0,0,8,208,1,0,0,0,10,817,1,0,0,0,12,989,1,0,0,0,
        14,991,1,0,0,0,16,1006,1,0,0,0,18,1018,1,0,0,0,20,1031,1,0,0,0,22,
        1035,1,0,0,0,24,1060,1,0,0,0,26,1062,1,0,0,0,28,1066,1,0,0,0,30,
        1078,1,0,0,0,32,1088,1,0,0,0,34,1090,1,0,0,0,36,1101,1,0,0,0,38,
        1110,1,0,0,0,40,1118,1,0,0,0,42,1121,1,0,0,0,44,1132,1,0,0,0,46,
        1148,1,0,0,0,48,1154,1,0,0,0,50,1156,1,0,0,0,52,1167,1,0,0,0,54,
        1184,1,0,0,0,56,1191,1,0,0,0,58,1193,1,0,0,0,60,1199,1,0,0,0,62,
        1214,1,0,0,0,64,1226,1,0,0,0,66,1272,1,0,0,0,68,1277,1,0,0,0,70,
        1299,1,0,0,0,72,1301,1,0,0,0,74,1402,1,0,0,0,76,1404,1,0,0,0,78,
        1430,1,0,0,0,80,1432,1,0,0,0,82,1447,1,0,0,0,84,1489,1,0,0,0,86,
        1491,1,0,0,0,88,1523,1,0,0,0,90,1525,1,0,0,0,92,1543,1,0,0,0,94,
        1568,1,0,0,0,96,1588,1,0,0,0,98,1590,1,0,0,0,100,1617,1,0,0,0,102,
        1621,1,0,0,0,104,1629,1,0,0,0,106,1640,1,0,0,0,108,1644,1,0,0,0,
        110,1655,1,0,0,0,112,1709,1,0,0,0,114,1711,1,0,0,0,116,1778,1,0,
        0,0,118,1783,1,0,0,0,120,1790,1,0,0,0,122,1794,1,0,0,0,124,1804,
        1,0,0,0,126,1812,1,0,0,0,128,1824,1,0,0,0,130,1837,1,0,0,0,132,1841,
        1,0,0,0,134,1891,1,0,0,0,136,1893,1,0,0,0,138,1904,1,0,0,0,140,1919,
        1,0,0,0,142,2054,1,0,0,0,144,2081,1,0,0,0,146,2083,1,0,0,0,148,2085,
        1,0,0,0,150,2087,1,0,0,0,152,2089,1,0,0,0,154,2091,1,0,0,0,156,2098,
        1,0,0,0,158,2109,1,0,0,0,160,2114,1,0,0,0,162,2150,1,0,0,0,164,2152,
        1,0,0,0,166,2160,1,0,0,0,168,2166,1,0,0,0,170,2174,1,0,0,0,172,2181,
        1,0,0,0,174,2186,1,0,0,0,176,2195,1,0,0,0,178,2241,1,0,0,0,180,2259,
        1,0,0,0,182,2268,1,0,0,0,184,2270,1,0,0,0,186,2294,1,0,0,0,188,2299,
        1,0,0,0,190,2301,1,0,0,0,192,2331,1,0,0,0,194,2333,1,0,0,0,196,197,
        3,10,5,0,197,198,5,0,0,1,198,1,1,0,0,0,199,200,3,122,61,0,200,201,
        5,0,0,1,201,3,1,0,0,0,202,203,3,118,59,0,203,204,5,0,0,1,204,5,1,
        0,0,0,205,206,3,120,60,0,206,207,5,0,0,1,207,7,1,0,0,0,208,209,3,
        162,81,0,209,210,5,0,0,1,210,9,1,0,0,0,211,818,3,22,11,0,212,213,
        5,94,0,0,213,818,3,186,93,0,214,215,5,76,0,0,215,219,5,200,0,0,216,
        217,5,123,0,0,217,218,5,30,0,0,218,220,5,32,0,0,219,216,1,0,0,0,
        219,220,1,0,0,0,220,221,1,0,0,0,221,224,3,186,93,0,222,223,5,110,
        0,0,223,225,5,233,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,227,1,
        0,0,0,226,228,3,20,10,0,227,226,1,0,0,0,227,228,1,0,0,0,228,232,
        1,0,0,0,229,230,5,74,0,0,230,231,5,179,0,0,231,233,3,42,21,0,232,
        229,1,0,0,0,232,233,1,0,0,0,233,818,1,0,0,0,234,235,5,105,0,0,235,
        236,5,200,0,0,236,237,3,186,93,0,237,238,5,111,0,0,238,239,5,179,
        0,0,239,240,3,42,21,0,240,818,1,0,0,0,241,242,5,97,0,0,242,245,5,
        200,0,0,243,244,5,123,0,0,244,246,5,32,0,0,245,243,1,0,0,0,245,246,
        1,0,0,0,246,247,1,0,0,0,247,249,3,186,93,0,248,250,7,0,0,0,249,248,
        1,0,0,0,249,250,1,0,0,0,250,818,1,0,0,0,251,256,3,14,7,0,252,253,
        5,1,0,0,253,254,3,164,82,0,254,255,5,2,0,0,255,257,1,0,0,0,256,252,
        1,0,0,0,256,257,1,0,0,0,257,258,1,0,0,0,258,261,3,40,20,0,259,260,
        5,176,0,0,260,262,3,42,21,0,261,259,1,0,0,0,261,262,1,0,0,0,262,
        266,1,0,0,0,263,264,5,208,0,0,264,265,5,18,0,0,265,267,3,100,50,
        0,266,263,1,0,0,0,266,267,1,0,0,0,267,269,1,0,0,0,268,270,3,16,8,
        0,269,268,1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,273,3,20,10,
        0,272,271,1,0,0,0,272,273,1,0,0,0,273,276,1,0,0,0,274,275,5,110,
        0,0,275,277,5,233,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,282,1,
        0,0,0,278,280,5,13,0,0,279,278,1,0,0,0,279,280,1,0,0,0,280,281,1,
        0,0,0,281,283,3,22,11,0,282,279,1,0,0,0,282,283,1,0,0,0,283,818,
        1,0,0,0,284,289,3,14,7,0,285,286,5,1,0,0,286,287,3,164,82,0,287,
        288,5,2,0,0,288,290,1,0,0,0,289,285,1,0,0,0,289,290,1,0,0,0,290,
        293,1,0,0,0,291,292,5,110,0,0,292,294,5,233,0,0,293,291,1,0,0,0,
        293,294,1,0,0,0,294,301,1,0,0,0,295,296,5,208,0,0,296,297,5,18,0,
        0,297,298,5,1,0,0,298,299,3,164,82,0,299,300,5,2,0,0,300,302,1,0,
        0,0,301,295,1,0,0,0,301,302,1,0,0,0,302,304,1,0,0,0,303,305,3,16,
        8,0,304,303,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,0,306,308,3,18,
        9,0,307,306,1,0,0,0,307,308,1,0,0,0,308,310,1,0,0,0,309,311,3,116,
        58,0,310,309,1,0,0,0,310,311,1,0,0,0,311,313,1,0,0,0,312,314,3,54,
        27,0,313,312,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,317,3,20,
        10,0,316,315,1,0,0,0,316,317,1,0,0,0,317,320,1,0,0,0,318,319,5,178,
        0,0,319,321,3,42,21,0,320,318,1,0,0,0,320,321,1,0,0,0,321,326,1,
        0,0,0,322,324,5,13,0,0,323,322,1,0,0,0,323,324,1,0,0,0,324,325,1,
        0,0,0,325,327,3,22,11,0,326,323,1,0,0,0,326,327,1,0,0,0,327,818,
        1,0,0,0,328,329,5,76,0,0,329,333,5,77,0,0,330,331,5,123,0,0,331,
        332,5,30,0,0,332,334,5,32,0,0,333,330,1,0,0,0,333,334,1,0,0,0,334,
        335,1,0,0,0,335,336,3,118,59,0,336,337,5,34,0,0,337,339,3,118,59,
        0,338,340,3,20,10,0,339,338,1,0,0,0,339,340,1,0,0,0,340,818,1,0,
        0,0,341,342,5,204,0,0,342,343,5,77,0,0,343,345,3,118,59,0,344,346,
        3,28,14,0,345,344,1,0,0,0,345,346,1,0,0,0,346,347,1,0,0,0,347,348,
        5,205,0,0,348,353,5,207,0,0,349,354,3,186,93,0,350,351,5,43,0,0,
        351,352,5,92,0,0,352,354,3,102,51,0,353,349,1,0,0,0,353,350,1,0,
        0,0,353,354,1,0,0,0,354,818,1,0,0,0,355,356,5,105,0,0,356,357,5,
        77,0,0,357,358,3,118,59,0,358,359,5,12,0,0,359,360,5,92,0,0,360,
        361,5,1,0,0,361,362,3,164,82,0,362,363,5,2,0,0,363,818,1,0,0,0,364,
        365,5,105,0,0,365,366,7,1,0,0,366,367,3,118,59,0,367,368,5,106,0,
        0,368,369,5,102,0,0,369,370,3,118,59,0,370,818,1,0,0,0,371,372,5,
        105,0,0,372,373,7,1,0,0,373,374,3,118,59,0,374,375,5,111,0,0,375,
        376,5,178,0,0,376,377,3,42,21,0,377,818,1,0,0,0,378,379,5,105,0,
        0,379,380,7,1,0,0,380,381,3,118,59,0,381,382,5,177,0,0,382,385,5,
        178,0,0,383,384,5,123,0,0,384,386,5,32,0,0,385,383,1,0,0,0,385,386,
        1,0,0,0,386,387,1,0,0,0,387,388,3,42,21,0,388,818,1,0,0,0,389,390,
        5,105,0,0,390,391,5,77,0,0,391,393,3,118,59,0,392,394,3,28,14,0,
        393,392,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,397,5,192,0,
        0,396,398,5,93,0,0,397,396,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,
        0,399,400,3,186,93,0,400,402,3,166,83,0,401,403,3,160,80,0,402,401,
        1,0,0,0,402,403,1,0,0,0,403,818,1,0,0,0,404,405,5,105,0,0,405,406,
        5,77,0,0,406,408,3,118,59,0,407,409,3,28,14,0,408,407,1,0,0,0,408,
        409,1,0,0,0,409,410,1,0,0,0,410,411,5,111,0,0,411,412,5,153,0,0,
        412,416,5,233,0,0,413,414,5,74,0,0,414,415,5,154,0,0,415,417,3,42,
        21,0,416,413,1,0,0,0,416,417,1,0,0,0,417,818,1,0,0,0,418,419,5,105,
        0,0,419,420,5,77,0,0,420,422,3,118,59,0,421,423,3,28,14,0,422,421,
        1,0,0,0,422,423,1,0,0,0,423,424,1,0,0,0,424,425,5,111,0,0,425,426,
        5,154,0,0,426,427,3,42,21,0,427,818,1,0,0,0,428,429,5,105,0,0,429,
        430,5,77,0,0,430,431,3,118,59,0,431,435,5,12,0,0,432,433,5,123,0,
        0,433,434,5,30,0,0,434,436,5,32,0,0,435,432,1,0,0,0,435,436,1,0,
        0,0,436,438,1,0,0,0,437,439,3,26,13,0,438,437,1,0,0,0,439,440,1,
        0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,818,1,0,0,0,442,443,5,
        105,0,0,443,444,5,78,0,0,444,445,3,118,59,0,445,449,5,12,0,0,446,
        447,5,123,0,0,447,448,5,30,0,0,448,450,5,32,0,0,449,446,1,0,0,0,
        449,450,1,0,0,0,450,452,1,0,0,0,451,453,3,28,14,0,452,451,1,0,0,
        0,453,454,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,818,1,0,0,
        0,456,457,5,105,0,0,457,458,5,77,0,0,458,459,3,118,59,0,459,460,
        3,28,14,0,460,461,5,106,0,0,461,462,5,102,0,0,462,463,3,28,14,0,
        463,818,1,0,0,0,464,465,5,105,0,0,465,466,5,77,0,0,466,467,3,118,
        59,0,467,470,5,97,0,0,468,469,5,123,0,0,469,471,5,32,0,0,470,468,
        1,0,0,0,470,471,1,0,0,0,471,472,1,0,0,0,472,477,3,28,14,0,473,474,
        5,3,0,0,474,476,3,28,14,0,475,473,1,0,0,0,476,479,1,0,0,0,477,475,
        1,0,0,0,477,478,1,0,0,0,478,481,1,0,0,0,479,477,1,0,0,0,480,482,
        5,197,0,0,481,480,1,0,0,0,481,482,1,0,0,0,482,818,1,0,0,0,483,484,
        5,105,0,0,484,485,5,78,0,0,485,486,3,118,59,0,486,489,5,97,0,0,487,
        488,5,123,0,0,488,490,5,32,0,0,489,487,1,0,0,0,489,490,1,0,0,0,490,
        491,1,0,0,0,491,496,3,28,14,0,492,493,5,3,0,0,493,495,3,28,14,0,
        494,492,1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,0,496,497,1,0,0,0,
        497,818,1,0,0,0,498,496,1,0,0,0,499,500,5,105,0,0,500,501,5,77,0,
        0,501,503,3,118,59,0,502,504,3,28,14,0,503,502,1,0,0,0,503,504,1,
        0,0,0,504,505,1,0,0,0,505,506,5,111,0,0,506,507,3,20,10,0,507,818,
        1,0,0,0,508,509,5,105,0,0,509,510,5,77,0,0,510,511,3,118,59,0,511,
        512,5,217,0,0,512,513,5,95,0,0,513,818,1,0,0,0,514,515,5,97,0,0,
        515,518,5,77,0,0,516,517,5,123,0,0,517,519,5,32,0,0,518,516,1,0,
        0,0,518,519,1,0,0,0,519,520,1,0,0,0,520,522,3,118,59,0,521,523,5,
        197,0,0,522,521,1,0,0,0,522,523,1,0,0,0,523,818,1,0,0,0,524,525,
        5,97,0,0,525,528,5,78,0,0,526,527,5,123,0,0,527,529,5,32,0,0,528,
        526,1,0,0,0,528,529,1,0,0,0,529,530,1,0,0,0,530,818,3,118,59,0,531,
        534,5,76,0,0,532,533,5,27,0,0,533,535,5,79,0,0,534,532,1,0,0,0,534,
        535,1,0,0,0,535,540,1,0,0,0,536,538,5,174,0,0,537,536,1,0,0,0,537,
        538,1,0,0,0,538,539,1,0,0,0,539,541,5,175,0,0,540,537,1,0,0,0,540,
        541,1,0,0,0,541,542,1,0,0,0,542,546,5,78,0,0,543,544,5,123,0,0,544,
        545,5,30,0,0,545,547,5,32,0,0,546,543,1,0,0,0,546,547,1,0,0,0,547,
        548,1,0,0,0,548,550,3,118,59,0,549,551,3,108,54,0,550,549,1,0,0,
        0,550,551,1,0,0,0,551,554,1,0,0,0,552,553,5,110,0,0,553,555,5,233,
        0,0,554,552,1,0,0,0,554,555,1,0,0,0,555,559,1,0,0,0,556,557,5,208,
        0,0,557,558,5,59,0,0,558,560,3,100,50,0,559,556,1,0,0,0,559,560,
        1,0,0,0,560,563,1,0,0,0,561,562,5,178,0,0,562,564,3,42,21,0,563,
        561,1,0,0,0,563,564,1,0,0,0,564,565,1,0,0,0,565,566,5,13,0,0,566,
        567,3,22,11,0,567,818,1,0,0,0,568,571,5,76,0,0,569,570,5,27,0,0,
        570,572,5,79,0,0,571,569,1,0,0,0,571,572,1,0,0,0,572,574,1,0,0,0,
        573,575,5,174,0,0,574,573,1,0,0,0,574,575,1,0,0,0,575,576,1,0,0,
        0,576,577,5,175,0,0,577,578,5,78,0,0,578,583,3,118,59,0,579,580,
        5,1,0,0,580,581,3,164,82,0,581,582,5,2,0,0,582,584,1,0,0,0,583,579,
        1,0,0,0,583,584,1,0,0,0,584,585,1,0,0,0,585,588,3,40,20,0,586,587,
        5,176,0,0,587,589,3,42,21,0,588,586,1,0,0,0,588,589,1,0,0,0,589,
        818,1,0,0,0,590,591,5,105,0,0,591,592,5,78,0,0,592,594,3,118,59,
        0,593,595,5,13,0,0,594,593,1,0,0,0,594,595,1,0,0,0,595,596,1,0,0,
        0,596,597,3,22,11,0,597,818,1,0,0,0,598,600,5,76,0,0,599,601,5,175,
        0,0,600,599,1,0,0,0,600,601,1,0,0,0,601,602,1,0,0,0,602,603,5,166,
        0,0,603,604,3,184,92,0,604,605,5,13,0,0,605,615,5,233,0,0,606,607,
        5,152,0,0,607,612,3,60,30,0,608,609,5,3,0,0,609,611,3,60,30,0,610,
        608,1,0,0,0,611,614,1,0,0,0,612,610,1,0,0,0,612,613,1,0,0,0,613,
        616,1,0,0,0,614,612,1,0,0,0,615,606,1,0,0,0,615,616,1,0,0,0,616,
        818,1,0,0,0,617,619,5,97,0,0,618,620,5,175,0,0,619,618,1,0,0,0,619,
        620,1,0,0,0,620,621,1,0,0,0,621,624,5,166,0,0,622,623,5,123,0,0,
        623,625,5,32,0,0,624,622,1,0,0,0,624,625,1,0,0,0,625,626,1,0,0,0,
        626,818,3,184,92,0,627,629,5,84,0,0,628,630,7,2,0,0,629,628,1,0,
        0,0,629,630,1,0,0,0,630,631,1,0,0,0,631,818,3,10,5,0,632,633,5,90,
        0,0,633,636,5,91,0,0,634,635,7,3,0,0,635,637,3,186,93,0,636,634,
        1,0,0,0,636,637,1,0,0,0,637,642,1,0,0,0,638,640,5,34,0,0,639,638,
        1,0,0,0,639,640,1,0,0,0,640,641,1,0,0,0,641,643,5,233,0,0,642,639,
        1,0,0,0,642,643,1,0,0,0,643,818,1,0,0,0,644,645,5,90,0,0,645,646,
        5,77,0,0,646,649,5,167,0,0,647,648,7,3,0,0,648,650,3,186,93,0,649,
        647,1,0,0,0,649,650,1,0,0,0,650,651,1,0,0,0,651,652,5,34,0,0,652,
        654,5,233,0,0,653,655,3,28,14,0,654,653,1,0,0,0,654,655,1,0,0,0,
        655,818,1,0,0,0,656,657,5,90,0,0,657,660,5,201,0,0,658,659,5,34,
        0,0,659,661,5,233,0,0,660,658,1,0,0,0,660,661,1,0,0,0,661,818,1,
        0,0,0,662,663,5,90,0,0,663,664,5,178,0,0,664,669,3,118,59,0,665,
        666,5,1,0,0,666,667,3,46,23,0,667,668,5,2,0,0,668,670,1,0,0,0,669,
        665,1,0,0,0,669,670,1,0,0,0,670,818,1,0,0,0,671,672,5,90,0,0,672,
        673,5,92,0,0,673,674,7,3,0,0,674,677,3,118,59,0,675,676,7,3,0,0,
        676,678,3,186,93,0,677,675,1,0,0,0,677,678,1,0,0,0,678,818,1,0,0,
        0,679,680,5,90,0,0,680,681,5,95,0,0,681,683,3,118,59,0,682,684,3,
        28,14,0,683,682,1,0,0,0,683,684,1,0,0,0,684,818,1,0,0,0,685,687,
        5,90,0,0,686,688,3,186,93,0,687,686,1,0,0,0,687,688,1,0,0,0,688,
        689,1,0,0,0,689,697,5,96,0,0,690,692,5,34,0,0,691,690,1,0,0,0,691,
        692,1,0,0,0,692,695,1,0,0,0,693,696,3,184,92,0,694,696,5,233,0,0,
        695,693,1,0,0,0,695,694,1,0,0,0,696,698,1,0,0,0,697,691,1,0,0,0,
        697,698,1,0,0,0,698,818,1,0,0,0,699,700,5,90,0,0,700,701,5,76,0,
        0,701,702,5,77,0,0,702,818,3,118,59,0,703,704,7,4,0,0,704,706,5,
        166,0,0,705,707,5,167,0,0,706,705,1,0,0,0,706,707,1,0,0,0,707,708,
        1,0,0,0,708,818,3,32,16,0,709,710,7,4,0,0,710,712,5,200,0,0,711,
        713,5,167,0,0,712,711,1,0,0,0,712,713,1,0,0,0,713,714,1,0,0,0,714,
        818,3,186,93,0,715,717,7,4,0,0,716,718,5,77,0,0,717,716,1,0,0,0,
        717,718,1,0,0,0,718,720,1,0,0,0,719,721,7,5,0,0,720,719,1,0,0,0,
        720,721,1,0,0,0,721,722,1,0,0,0,722,724,3,118,59,0,723,725,3,28,
        14,0,724,723,1,0,0,0,724,725,1,0,0,0,725,727,1,0,0,0,726,728,3,34,
        17,0,727,726,1,0,0,0,727,728,1,0,0,0,728,818,1,0,0,0,729,730,5,168,
        0,0,730,731,5,77,0,0,731,818,3,118,59,0,732,736,5,168,0,0,733,735,
        9,0,0,0,734,733,1,0,0,0,735,738,1,0,0,0,736,737,1,0,0,0,736,734,
        1,0,0,0,737,818,1,0,0,0,738,736,1,0,0,0,739,741,5,170,0,0,740,742,
        5,172,0,0,741,740,1,0,0,0,741,742,1,0,0,0,742,743,1,0,0,0,743,744,
        5,77,0,0,744,749,3,118,59,0,745,747,5,13,0,0,746,745,1,0,0,0,746,
        747,1,0,0,0,747,748,1,0,0,0,748,750,3,22,11,0,749,746,1,0,0,0,749,
        750,1,0,0,0,750,818,1,0,0,0,751,752,5,171,0,0,752,755,5,77,0,0,753,
        754,5,123,0,0,754,756,5,32,0,0,755,753,1,0,0,0,755,756,1,0,0,0,756,
        757,1,0,0,0,757,818,3,118,59,0,758,759,5,169,0,0,759,818,5,170,0,
        0,760,761,5,220,0,0,761,763,5,113,0,0,762,764,5,231,0,0,763,762,
        1,0,0,0,763,764,1,0,0,0,764,765,1,0,0,0,765,766,5,232,0,0,766,768,
        5,233,0,0,767,769,5,149,0,0,768,767,1,0,0,0,768,769,1,0,0,0,769,
        770,1,0,0,0,770,771,5,82,0,0,771,772,5,77,0,0,772,774,3,118,59,0,
        773,775,3,28,14,0,774,773,1,0,0,0,774,775,1,0,0,0,775,818,1,0,0,
        0,776,777,5,203,0,0,777,778,5,77,0,0,778,780,3,118,59,0,779,781,
        3,28,14,0,780,779,1,0,0,0,780,781,1,0,0,0,781,818,1,0,0,0,782,783,
        5,215,0,0,783,784,5,216,0,0,784,785,5,77,0,0,785,818,3,118,59,0,
        786,787,7,6,0,0,787,791,3,186,93,0,788,790,9,0,0,0,789,788,1,0,0,
        0,790,793,1,0,0,0,791,792,1,0,0,0,791,789,1,0,0,0,792,818,1,0,0,
        0,793,791,1,0,0,0,794,795,5,111,0,0,795,799,5,221,0,0,796,798,9,
        0,0,0,797,796,1,0,0,0,798,801,1,0,0,0,799,800,1,0,0,0,799,797,1,
        0,0,0,800,818,1,0,0,0,801,799,1,0,0,0,802,806,5,111,0,0,803,805,
        9,0,0,0,804,803,1,0,0,0,805,808,1,0,0,0,806,807,1,0,0,0,806,804,
        1,0,0,0,807,818,1,0,0,0,808,806,1,0,0,0,809,818,5,112,0,0,810,814,
        3,12,6,0,811,813,9,0,0,0,812,811,1,0,0,0,813,816,1,0,0,0,814,815,
        1,0,0,0,814,812,1,0,0,0,815,818,1,0,0,0,816,814,1,0,0,0,817,211,
        1,0,0,0,817,212,1,0,0,0,817,214,1,0,0,0,817,234,1,0,0,0,817,241,
        1,0,0,0,817,251,1,0,0,0,817,284,1,0,0,0,817,328,1,0,0,0,817,341,
        1,0,0,0,817,355,1,0,0,0,817,364,1,0,0,0,817,371,1,0,0,0,817,378,
        1,0,0,0,817,389,1,0,0,0,817,404,1,0,0,0,817,418,1,0,0,0,817,428,
        1,0,0,0,817,442,1,0,0,0,817,456,1,0,0,0,817,464,1,0,0,0,817,483,
        1,0,0,0,817,499,1,0,0,0,817,508,1,0,0,0,817,514,1,0,0,0,817,524,
        1,0,0,0,817,531,1,0,0,0,817,568,1,0,0,0,817,590,1,0,0,0,817,598,
        1,0,0,0,817,617,1,0,0,0,817,627,1,0,0,0,817,632,1,0,0,0,817,644,
        1,0,0,0,817,656,1,0,0,0,817,662,1,0,0,0,817,671,1,0,0,0,817,679,
        1,0,0,0,817,685,1,0,0,0,817,699,1,0,0,0,817,703,1,0,0,0,817,709,
        1,0,0,0,817,715,1,0,0,0,817,729,1,0,0,0,817,732,1,0,0,0,817,739,
        1,0,0,0,817,751,1,0,0,0,817,758,1,0,0,0,817,760,1,0,0,0,817,776,
        1,0,0,0,817,782,1,0,0,0,817,786,1,0,0,0,817,794,1,0,0,0,817,802,
        1,0,0,0,817,809,1,0,0,0,817,810,1,0,0,0,818,11,1,0,0,0,819,820,5,
        76,0,0,820,990,5,221,0,0,821,822,5,97,0,0,822,990,5,221,0,0,823,
        825,5,212,0,0,824,826,5,221,0,0,825,824,1,0,0,0,825,826,1,0,0,0,
        826,990,1,0,0,0,827,829,5,211,0,0,828,830,5,221,0,0,829,828,1,0,
        0,0,829,830,1,0,0,0,830,990,1,0,0,0,831,832,5,90,0,0,832,990,5,212,
        0,0,833,834,5,90,0,0,834,836,5,221,0,0,835,837,5,212,0,0,836,835,
        1,0,0,0,836,837,1,0,0,0,837,990,1,0,0,0,838,839,5,90,0,0,839,990,
        5,224,0,0,840,841,5,90,0,0,841,990,5,222,0,0,842,843,5,90,0,0,843,
        844,5,69,0,0,844,990,5,222,0,0,845,846,5,218,0,0,846,990,5,77,0,
        0,847,848,5,219,0,0,848,990,5,77,0,0,849,850,5,90,0,0,850,990,5,
        223,0,0,851,852,5,90,0,0,852,853,5,76,0,0,853,990,5,77,0,0,854,855,
        5,90,0,0,855,990,5,225,0,0,856,857,5,90,0,0,857,990,5,227,0,0,858,
        859,5,90,0,0,859,990,5,228,0,0,860,861,5,76,0,0,861,990,5,226,0,
        0,862,863,5,97,0,0,863,990,5,226,0,0,864,865,5,105,0,0,865,990,5,
        226,0,0,866,867,5,213,0,0,867,990,5,77,0,0,868,869,5,213,0,0,869,
        990,5,200,0,0,870,871,5,214,0,0,871,990,5,77,0,0,872,873,5,214,0,
        0,873,990,5,200,0,0,874,875,5,76,0,0,875,876,5,175,0,0,876,990,5,
        118,0,0,877,878,5,97,0,0,878,879,5,175,0,0,879,990,5,118,0,0,880,
        881,5,105,0,0,881,882,5,77,0,0,882,883,3,118,59,0,883,884,5,30,0,
        0,884,885,5,195,0,0,885,990,1,0,0,0,886,887,5,105,0,0,887,888,5,
        77,0,0,888,889,3,118,59,0,889,890,5,195,0,0,890,891,5,18,0,0,891,
        990,1,0,0,0,892,893,5,105,0,0,893,894,5,77,0,0,894,895,3,118,59,
        0,895,896,5,30,0,0,896,897,5,196,0,0,897,990,1,0,0,0,898,899,5,105,
        0,0,899,900,5,77,0,0,900,901,3,118,59,0,901,902,5,181,0,0,902,903,
        5,18,0,0,903,990,1,0,0,0,904,905,5,105,0,0,905,906,5,77,0,0,906,
        907,3,118,59,0,907,908,5,30,0,0,908,909,5,181,0,0,909,990,1,0,0,
        0,910,911,5,105,0,0,911,912,5,77,0,0,912,913,3,118,59,0,913,914,
        5,30,0,0,914,915,5,182,0,0,915,916,5,13,0,0,916,917,5,183,0,0,917,
        990,1,0,0,0,918,919,5,105,0,0,919,920,5,77,0,0,920,921,3,118,59,
        0,921,922,5,111,0,0,922,923,5,181,0,0,923,924,5,184,0,0,924,990,
        1,0,0,0,925,926,5,105,0,0,926,927,5,77,0,0,927,928,3,118,59,0,928,
        929,5,185,0,0,929,930,5,63,0,0,930,990,1,0,0,0,931,932,5,105,0,0,
        932,933,5,77,0,0,933,934,3,118,59,0,934,935,5,186,0,0,935,936,5,
        63,0,0,936,990,1,0,0,0,937,938,5,105,0,0,938,939,5,77,0,0,939,940,
        3,118,59,0,940,941,5,187,0,0,941,942,5,63,0,0,942,990,1,0,0,0,943,
        944,5,105,0,0,944,945,5,77,0,0,945,946,3,118,59,0,946,947,5,189,
        0,0,947,990,1,0,0,0,948,949,5,105,0,0,949,950,5,77,0,0,950,952,3,
        118,59,0,951,953,3,28,14,0,952,951,1,0,0,0,952,953,1,0,0,0,953,954,
        1,0,0,0,954,955,5,190,0,0,955,990,1,0,0,0,956,957,5,105,0,0,957,
        958,5,77,0,0,958,960,3,118,59,0,959,961,3,28,14,0,960,959,1,0,0,
        0,960,961,1,0,0,0,961,962,1,0,0,0,962,963,5,191,0,0,963,990,1,0,
        0,0,964,965,5,105,0,0,965,966,5,77,0,0,966,968,3,118,59,0,967,969,
        3,28,14,0,968,967,1,0,0,0,968,969,1,0,0,0,969,970,1,0,0,0,970,971,
        5,111,0,0,971,972,5,188,0,0,972,990,1,0,0,0,973,974,5,105,0,0,974,
        975,5,77,0,0,975,977,3,118,59,0,976,978,3,28,14,0,977,976,1,0,0,
        0,977,978,1,0,0,0,978,979,1,0,0,0,979,980,5,79,0,0,980,981,5,92,
        0,0,981,990,1,0,0,0,982,983,5,114,0,0,983,990,5,115,0,0,984,990,
        5,116,0,0,985,990,5,117,0,0,986,990,5,202,0,0,987,988,5,81,0,0,988,
        990,5,11,0,0,989,819,1,0,0,0,989,821,1,0,0,0,989,823,1,0,0,0,989,
        827,1,0,0,0,989,831,1,0,0,0,989,833,1,0,0,0,989,838,1,0,0,0,989,
        840,1,0,0,0,989,842,1,0,0,0,989,845,1,0,0,0,989,847,1,0,0,0,989,
        849,1,0,0,0,989,851,1,0,0,0,989,854,1,0,0,0,989,856,1,0,0,0,989,
        858,1,0,0,0,989,860,1,0,0,0,989,862,1,0,0,0,989,864,1,0,0,0,989,
        866,1,0,0,0,989,868,1,0,0,0,989,870,1,0,0,0,989,872,1,0,0,0,989,
        874,1,0,0,0,989,877,1,0,0,0,989,880,1,0,0,0,989,886,1,0,0,0,989,
        892,1,0,0,0,989,898,1,0,0,0,989,904,1,0,0,0,989,910,1,0,0,0,989,
        918,1,0,0,0,989,925,1,0,0,0,989,931,1,0,0,0,989,937,1,0,0,0,989,
        943,1,0,0,0,989,948,1,0,0,0,989,956,1,0,0,0,989,964,1,0,0,0,989,
        973,1,0,0,0,989,982,1,0,0,0,989,984,1,0,0,0,989,985,1,0,0,0,989,
        986,1,0,0,0,989,987,1,0,0,0,990,13,1,0,0,0,991,993,5,76,0,0,992,
        994,5,175,0,0,993,992,1,0,0,0,993,994,1,0,0,0,994,996,1,0,0,0,995,
        997,5,209,0,0,996,995,1,0,0,0,996,997,1,0,0,0,997,998,1,0,0,0,998,
        1002,5,77,0,0,999,1000,5,123,0,0,1000,1001,5,30,0,0,1001,1003,5,
        32,0,0,1002,999,1,0,0,0,1002,1003,1,0,0,0,1003,1004,1,0,0,0,1004,
        1005,3,118,59,0,1005,15,1,0,0,0,1006,1007,5,195,0,0,1007,1008,5,
        18,0,0,1008,1012,3,100,50,0,1009,1010,5,196,0,0,1010,1011,5,18,0,
        0,1011,1013,3,104,52,0,1012,1009,1,0,0,0,1012,1013,1,0,0,0,1013,
        1014,1,0,0,0,1014,1015,5,82,0,0,1015,1016,5,238,0,0,1016,1017,5,
        180,0,0,1017,17,1,0,0,0,1018,1019,5,181,0,0,1019,1020,5,18,0,0,1020,
        1021,3,100,50,0,1021,1024,5,59,0,0,1022,1025,3,50,25,0,1023,1025,
        3,52,26,0,1024,1022,1,0,0,0,1024,1023,1,0,0,0,1025,1029,1,0,0,0,
        1026,1027,5,182,0,0,1027,1028,5,13,0,0,1028,1030,5,183,0,0,1029,
        1026,1,0,0,0,1029,1030,1,0,0,0,1030,19,1,0,0,0,1031,1032,5,184,0,
        0,1032,1033,5,233,0,0,1033,21,1,0,0,0,1034,1036,3,36,18,0,1035,1034,
        1,0,0,0,1035,1036,1,0,0,0,1036,1037,1,0,0,0,1037,1038,3,62,31,0,
        1038,23,1,0,0,0,1039,1040,5,80,0,0,1040,1041,5,149,0,0,1041,1042,
        5,77,0,0,1042,1049,3,118,59,0,1043,1047,3,28,14,0,1044,1045,5,123,
        0,0,1045,1046,5,30,0,0,1046,1048,5,32,0,0,1047,1044,1,0,0,0,1047,
        1048,1,0,0,0,1048,1050,1,0,0,0,1049,1043,1,0,0,0,1049,1050,1,0,0,
        0,1050,1061,1,0,0,0,1051,1052,5,80,0,0,1052,1054,5,82,0,0,1053,1055,
        5,77,0,0,1054,1053,1,0,0,0,1054,1055,1,0,0,0,1055,1056,1,0,0,0,1056,
        1058,3,118,59,0,1057,1059,3,28,14,0,1058,1057,1,0,0,0,1058,1059,
        1,0,0,0,1059,1061,1,0,0,0,1060,1039,1,0,0,0,1060,1051,1,0,0,0,1061,
        25,1,0,0,0,1062,1064,3,28,14,0,1063,1065,3,20,10,0,1064,1063,1,0,
        0,0,1064,1065,1,0,0,0,1065,27,1,0,0,0,1066,1067,5,63,0,0,1067,1068,
        5,1,0,0,1068,1073,3,30,15,0,1069,1070,5,3,0,0,1070,1072,3,30,15,
        0,1071,1069,1,0,0,0,1072,1075,1,0,0,0,1073,1071,1,0,0,0,1073,1074,
        1,0,0,0,1074,1076,1,0,0,0,1075,1073,1,0,0,0,1076,1077,5,2,0,0,1077,
        29,1,0,0,0,1078,1081,3,186,93,0,1079,1080,5,124,0,0,1080,1082,3,
        144,72,0,1081,1079,1,0,0,0,1081,1082,1,0,0,0,1082,31,1,0,0,0,1083,
        1089,3,184,92,0,1084,1089,5,233,0,0,1085,1089,3,146,73,0,1086,1089,
        3,148,74,0,1087,1089,3,150,75,0,1088,1083,1,0,0,0,1088,1084,1,0,
        0,0,1088,1085,1,0,0,0,1088,1086,1,0,0,0,1088,1087,1,0,0,0,1089,33,
        1,0,0,0,1090,1098,3,186,93,0,1091,1094,5,4,0,0,1092,1095,3,186,93,
        0,1093,1095,5,233,0,0,1094,1092,1,0,0,0,1094,1093,1,0,0,0,1095,1097,
        1,0,0,0,1096,1091,1,0,0,0,1097,1100,1,0,0,0,1098,1096,1,0,0,0,1098,
        1099,1,0,0,0,1099,35,1,0,0,0,1100,1098,1,0,0,0,1101,1102,5,74,0,
        0,1102,1107,3,38,19,0,1103,1104,5,3,0,0,1104,1106,3,38,19,0,1105,
        1103,1,0,0,0,1106,1109,1,0,0,0,1107,1105,1,0,0,0,1107,1108,1,0,0,
        0,1108,37,1,0,0,0,1109,1107,1,0,0,0,1110,1112,3,186,93,0,1111,1113,
        5,13,0,0,1112,1111,1,0,0,0,1112,1113,1,0,0,0,1113,1114,1,0,0,0,1114,
        1115,5,1,0,0,1115,1116,3,22,11,0,1116,1117,5,2,0,0,1117,39,1,0,0,
        0,1118,1119,5,152,0,0,1119,1120,3,184,92,0,1120,41,1,0,0,0,1121,
        1122,5,1,0,0,1122,1127,3,44,22,0,1123,1124,5,3,0,0,1124,1126,3,44,
        22,0,1125,1123,1,0,0,0,1126,1129,1,0,0,0,1127,1125,1,0,0,0,1127,
        1128,1,0,0,0,1128,1130,1,0,0,0,1129,1127,1,0,0,0,1130,1131,5,2,0,
        0,1131,43,1,0,0,0,1132,1137,3,46,23,0,1133,1135,5,124,0,0,1134,1133,
        1,0,0,0,1134,1135,1,0,0,0,1135,1136,1,0,0,0,1136,1138,3,48,24,0,
        1137,1134,1,0,0,0,1137,1138,1,0,0,0,1138,45,1,0,0,0,1139,1144,3,
        186,93,0,1140,1141,5,4,0,0,1141,1143,3,186,93,0,1142,1140,1,0,0,
        0,1143,1146,1,0,0,0,1144,1142,1,0,0,0,1144,1145,1,0,0,0,1145,1149,
        1,0,0,0,1146,1144,1,0,0,0,1147,1149,5,233,0,0,1148,1139,1,0,0,0,
        1148,1147,1,0,0,0,1149,47,1,0,0,0,1150,1155,5,238,0,0,1151,1155,
        5,239,0,0,1152,1155,3,152,76,0,1153,1155,5,233,0,0,1154,1150,1,0,
        0,0,1154,1151,1,0,0,0,1154,1152,1,0,0,0,1154,1153,1,0,0,0,1155,49,
        1,0,0,0,1156,1157,5,1,0,0,1157,1162,3,144,72,0,1158,1159,5,3,0,0,
        1159,1161,3,144,72,0,1160,1158,1,0,0,0,1161,1164,1,0,0,0,1162,1160,
        1,0,0,0,1162,1163,1,0,0,0,1163,1165,1,0,0,0,1164,1162,1,0,0,0,1165,
        1166,5,2,0,0,1166,51,1,0,0,0,1167,1168,5,1,0,0,1168,1173,3,50,25,
        0,1169,1170,5,3,0,0,1170,1172,3,50,25,0,1171,1169,1,0,0,0,1172,1175,
        1,0,0,0,1173,1171,1,0,0,0,1173,1174,1,0,0,0,1174,1176,1,0,0,0,1175,
        1173,1,0,0,0,1176,1177,5,2,0,0,1177,53,1,0,0,0,1178,1179,5,182,0,
        0,1179,1180,5,13,0,0,1180,1185,3,56,28,0,1181,1182,5,182,0,0,1182,
        1183,5,18,0,0,1183,1185,3,58,29,0,1184,1178,1,0,0,0,1184,1181,1,
        0,0,0,1185,55,1,0,0,0,1186,1187,5,198,0,0,1187,1188,5,233,0,0,1188,
        1189,5,199,0,0,1189,1192,5,233,0,0,1190,1192,3,186,93,0,1191,1186,
        1,0,0,0,1191,1190,1,0,0,0,1192,57,1,0,0,0,1193,1197,5,233,0,0,1194,
        1195,5,74,0,0,1195,1196,5,154,0,0,1196,1198,3,42,21,0,1197,1194,
        1,0,0,0,1197,1198,1,0,0,0,1198,59,1,0,0,0,1199,1200,3,186,93,0,1200,
        1201,5,233,0,0,1201,61,1,0,0,0,1202,1204,3,24,12,0,1203,1202,1,0,
        0,0,1203,1204,1,0,0,0,1204,1205,1,0,0,0,1205,1206,3,68,34,0,1206,
        1207,3,64,32,0,1207,1215,1,0,0,0,1208,1210,3,80,40,0,1209,1211,3,
        66,33,0,1210,1209,1,0,0,0,1211,1212,1,0,0,0,1212,1210,1,0,0,0,1212,
        1213,1,0,0,0,1213,1215,1,0,0,0,1214,1203,1,0,0,0,1214,1208,1,0,0,
        0,1215,63,1,0,0,0,1216,1217,5,23,0,0,1217,1218,5,18,0,0,1218,1223,
        3,72,36,0,1219,1220,5,3,0,0,1220,1222,3,72,36,0,1221,1219,1,0,0,
        0,1222,1225,1,0,0,0,1223,1221,1,0,0,0,1223,1224,1,0,0,0,1224,1227,
        1,0,0,0,1225,1223,1,0,0,0,1226,1216,1,0,0,0,1226,1227,1,0,0,0,1227,
        1238,1,0,0,0,1228,1229,5,147,0,0,1229,1230,5,18,0,0,1230,1235,3,
        126,63,0,1231,1232,5,3,0,0,1232,1234,3,126,63,0,1233,1231,1,0,0,
        0,1234,1237,1,0,0,0,1235,1233,1,0,0,0,1235,1236,1,0,0,0,1236,1239,
        1,0,0,0,1237,1235,1,0,0,0,1238,1228,1,0,0,0,1238,1239,1,0,0,0,1239,
        1250,1,0,0,0,1240,1241,5,148,0,0,1241,1242,5,18,0,0,1242,1247,3,
        126,63,0,1243,1244,5,3,0,0,1244,1246,3,126,63,0,1245,1243,1,0,0,
        0,1246,1249,1,0,0,0,1247,1245,1,0,0,0,1247,1248,1,0,0,0,1248,1251,
        1,0,0,0,1249,1247,1,0,0,0,1250,1240,1,0,0,0,1250,1251,1,0,0,0,1251,
        1262,1,0,0,0,1252,1253,5,146,0,0,1253,1254,5,18,0,0,1254,1259,3,
        72,36,0,1255,1256,5,3,0,0,1256,1258,3,72,36,0,1257,1255,1,0,0,0,
        1258,1261,1,0,0,0,1259,1257,1,0,0,0,1259,1260,1,0,0,0,1260,1263,
        1,0,0,0,1261,1259,1,0,0,0,1262,1252,1,0,0,0,1262,1263,1,0,0,0,1263,
        1265,1,0,0,0,1264,1266,3,174,87,0,1265,1264,1,0,0,0,1265,1266,1,
        0,0,0,1266,1269,1,0,0,0,1267,1268,5,25,0,0,1268,1270,3,126,63,0,
        1269,1267,1,0,0,0,1269,1270,1,0,0,0,1270,65,1,0,0,0,1271,1273,3,
        24,12,0,1272,1271,1,0,0,0,1272,1273,1,0,0,0,1273,1274,1,0,0,0,1274,
        1275,3,74,37,0,1275,1276,3,64,32,0,1276,67,1,0,0,0,1277,1278,6,34,
        -1,0,1278,1279,3,70,35,0,1279,1288,1,0,0,0,1280,1281,10,1,0,0,1281,
        1283,7,7,0,0,1282,1284,3,88,44,0,1283,1282,1,0,0,0,1283,1284,1,0,
        0,0,1284,1285,1,0,0,0,1285,1287,3,68,34,2,1286,1280,1,0,0,0,1287,
        1290,1,0,0,0,1288,1286,1,0,0,0,1288,1289,1,0,0,0,1289,69,1,0,0,0,
        1290,1288,1,0,0,0,1291,1300,3,74,37,0,1292,1293,5,77,0,0,1293,1300,
        3,118,59,0,1294,1300,3,114,57,0,1295,1296,5,1,0,0,1296,1297,3,62,
        31,0,1297,1298,5,2,0,0,1298,1300,1,0,0,0,1299,1291,1,0,0,0,1299,
        1292,1,0,0,0,1299,1294,1,0,0,0,1299,1295,1,0,0,0,1300,71,1,0,0,0,
        1301,1303,3,126,63,0,1302,1304,7,8,0,0,1303,1302,1,0,0,0,1303,1304,
        1,0,0,0,1304,1307,1,0,0,0,1305,1306,5,40,0,0,1306,1308,7,9,0,0,1307,
        1305,1,0,0,0,1307,1308,1,0,0,0,1308,73,1,0,0,0,1309,1310,5,10,0,
        0,1310,1311,5,150,0,0,1311,1312,5,1,0,0,1312,1313,3,124,62,0,1313,
        1314,5,2,0,0,1314,1320,1,0,0,0,1315,1316,5,108,0,0,1316,1320,3,124,
        62,0,1317,1318,5,151,0,0,1318,1320,3,124,62,0,1319,1309,1,0,0,0,
        1319,1315,1,0,0,0,1319,1317,1,0,0,0,1320,1322,1,0,0,0,1321,1323,
        3,116,58,0,1322,1321,1,0,0,0,1322,1323,1,0,0,0,1323,1326,1,0,0,0,
        1324,1325,5,156,0,0,1325,1327,5,233,0,0,1326,1324,1,0,0,0,1326,1327,
        1,0,0,0,1327,1328,1,0,0,0,1328,1329,5,152,0,0,1329,1342,5,233,0,
        0,1330,1340,5,13,0,0,1331,1341,3,102,51,0,1332,1341,3,164,82,0,1333,
        1336,5,1,0,0,1334,1337,3,102,51,0,1335,1337,3,164,82,0,1336,1334,
        1,0,0,0,1336,1335,1,0,0,0,1337,1338,1,0,0,0,1338,1339,5,2,0,0,1339,
        1341,1,0,0,0,1340,1331,1,0,0,0,1340,1332,1,0,0,0,1340,1333,1,0,0,
        0,1341,1343,1,0,0,0,1342,1330,1,0,0,0,1342,1343,1,0,0,0,1343,1345,
        1,0,0,0,1344,1346,3,116,58,0,1345,1344,1,0,0,0,1345,1346,1,0,0,0,
        1346,1349,1,0,0,0,1347,1348,5,155,0,0,1348,1350,5,233,0,0,1349,1347,
        1,0,0,0,1349,1350,1,0,0,0,1350,1352,1,0,0,0,1351,1353,3,80,40,0,
        1352,1351,1,0,0,0,1352,1353,1,0,0,0,1353,1356,1,0,0,0,1354,1355,
        5,16,0,0,1355,1357,3,128,64,0,1356,1354,1,0,0,0,1356,1357,1,0,0,
        0,1357,1403,1,0,0,0,1358,1362,5,10,0,0,1359,1361,3,76,38,0,1360,
        1359,1,0,0,0,1361,1364,1,0,0,0,1362,1360,1,0,0,0,1362,1363,1,0,0,
        0,1363,1366,1,0,0,0,1364,1362,1,0,0,0,1365,1367,3,88,44,0,1366,1365,
        1,0,0,0,1366,1367,1,0,0,0,1367,1368,1,0,0,0,1368,1370,3,124,62,0,
        1369,1371,3,80,40,0,1370,1369,1,0,0,0,1370,1371,1,0,0,0,1371,1381,
        1,0,0,0,1372,1378,3,80,40,0,1373,1375,5,10,0,0,1374,1376,3,88,44,
        0,1375,1374,1,0,0,0,1375,1376,1,0,0,0,1376,1377,1,0,0,0,1377,1379,
        3,124,62,0,1378,1373,1,0,0,0,1378,1379,1,0,0,0,1379,1381,1,0,0,0,
        1380,1358,1,0,0,0,1380,1372,1,0,0,0,1381,1385,1,0,0,0,1382,1384,
        3,86,43,0,1383,1382,1,0,0,0,1384,1387,1,0,0,0,1385,1383,1,0,0,0,
        1385,1386,1,0,0,0,1386,1390,1,0,0,0,1387,1385,1,0,0,0,1388,1389,
        5,16,0,0,1389,1391,3,128,64,0,1390,1388,1,0,0,0,1390,1391,1,0,0,
        0,1391,1393,1,0,0,0,1392,1394,3,82,41,0,1393,1392,1,0,0,0,1393,1394,
        1,0,0,0,1394,1397,1,0,0,0,1395,1396,5,24,0,0,1396,1398,3,128,64,
        0,1397,1395,1,0,0,0,1397,1398,1,0,0,0,1398,1400,1,0,0,0,1399,1401,
        3,174,87,0,1400,1399,1,0,0,0,1400,1401,1,0,0,0,1401,1403,1,0,0,0,
        1402,1319,1,0,0,0,1402,1380,1,0,0,0,1403,75,1,0,0,0,1404,1405,5,
        5,0,0,1405,1412,3,78,39,0,1406,1408,5,3,0,0,1407,1406,1,0,0,0,1407,
        1408,1,0,0,0,1408,1409,1,0,0,0,1409,1411,3,78,39,0,1410,1407,1,0,
        0,0,1411,1414,1,0,0,0,1412,1410,1,0,0,0,1412,1413,1,0,0,0,1413,1415,
        1,0,0,0,1414,1412,1,0,0,0,1415,1416,5,6,0,0,1416,77,1,0,0,0,1417,
        1431,3,186,93,0,1418,1419,3,186,93,0,1419,1420,5,1,0,0,1420,1425,
        3,142,71,0,1421,1422,5,3,0,0,1422,1424,3,142,71,0,1423,1421,1,0,
        0,0,1424,1427,1,0,0,0,1425,1423,1,0,0,0,1425,1426,1,0,0,0,1426,1428,
        1,0,0,0,1427,1425,1,0,0,0,1428,1429,5,2,0,0,1429,1431,1,0,0,0,1430,
        1417,1,0,0,0,1430,1418,1,0,0,0,1431,79,1,0,0,0,1432,1433,5,11,0,
        0,1433,1438,3,90,45,0,1434,1435,5,3,0,0,1435,1437,3,90,45,0,1436,
        1434,1,0,0,0,1437,1440,1,0,0,0,1438,1436,1,0,0,0,1438,1439,1,0,0,
        0,1439,1444,1,0,0,0,1440,1438,1,0,0,0,1441,1443,3,86,43,0,1442,1441,
        1,0,0,0,1443,1446,1,0,0,0,1444,1442,1,0,0,0,1444,1445,1,0,0,0,1445,
        81,1,0,0,0,1446,1444,1,0,0,0,1447,1448,5,17,0,0,1448,1449,5,18,0,
        0,1449,1454,3,126,63,0,1450,1451,5,3,0,0,1451,1453,3,126,63,0,1452,
        1450,1,0,0,0,1453,1456,1,0,0,0,1454,1452,1,0,0,0,1454,1455,1,0,0,
        0,1455,1474,1,0,0,0,1456,1454,1,0,0,0,1457,1458,5,74,0,0,1458,1475,
        5,22,0,0,1459,1460,5,74,0,0,1460,1475,5,21,0,0,1461,1462,5,19,0,
        0,1462,1463,5,20,0,0,1463,1464,5,1,0,0,1464,1469,3,84,42,0,1465,
        1466,5,3,0,0,1466,1468,3,84,42,0,1467,1465,1,0,0,0,1468,1471,1,0,
        0,0,1469,1467,1,0,0,0,1469,1470,1,0,0,0,1470,1472,1,0,0,0,1471,1469,
        1,0,0,0,1472,1473,5,2,0,0,1473,1475,1,0,0,0,1474,1457,1,0,0,0,1474,
        1459,1,0,0,0,1474,1461,1,0,0,0,1474,1475,1,0,0,0,1475,83,1,0,0,0,
        1476,1485,5,1,0,0,1477,1482,3,126,63,0,1478,1479,5,3,0,0,1479,1481,
        3,126,63,0,1480,1478,1,0,0,0,1481,1484,1,0,0,0,1482,1480,1,0,0,0,
        1482,1483,1,0,0,0,1483,1486,1,0,0,0,1484,1482,1,0,0,0,1485,1477,
        1,0,0,0,1485,1486,1,0,0,0,1486,1487,1,0,0,0,1487,1490,5,2,0,0,1488,
        1490,3,126,63,0,1489,1476,1,0,0,0,1489,1488,1,0,0,0,1490,85,1,0,
        0,0,1491,1492,5,60,0,0,1492,1494,5,78,0,0,1493,1495,5,52,0,0,1494,
        1493,1,0,0,0,1494,1495,1,0,0,0,1495,1496,1,0,0,0,1496,1497,3,184,
        92,0,1497,1506,5,1,0,0,1498,1503,3,126,63,0,1499,1500,5,3,0,0,1500,
        1502,3,126,63,0,1501,1499,1,0,0,0,1502,1505,1,0,0,0,1503,1501,1,
        0,0,0,1503,1504,1,0,0,0,1504,1507,1,0,0,0,1505,1503,1,0,0,0,1506,
        1498,1,0,0,0,1506,1507,1,0,0,0,1507,1508,1,0,0,0,1508,1509,5,2,0,
        0,1509,1521,3,186,93,0,1510,1512,5,13,0,0,1511,1510,1,0,0,0,1511,
        1512,1,0,0,0,1512,1513,1,0,0,0,1513,1518,3,186,93,0,1514,1515,5,
        3,0,0,1515,1517,3,186,93,0,1516,1514,1,0,0,0,1517,1520,1,0,0,0,1518,
        1516,1,0,0,0,1518,1519,1,0,0,0,1519,1522,1,0,0,0,1520,1518,1,0,0,
        0,1521,1511,1,0,0,0,1521,1522,1,0,0,0,1522,87,1,0,0,0,1523,1524,
        7,10,0,0,1524,89,1,0,0,0,1525,1529,3,112,56,0,1526,1528,3,92,46,
        0,1527,1526,1,0,0,0,1528,1531,1,0,0,0,1529,1527,1,0,0,0,1529,1530,
        1,0,0,0,1530,91,1,0,0,0,1531,1529,1,0,0,0,1532,1533,3,94,47,0,1533,
        1534,5,50,0,0,1534,1536,3,112,56,0,1535,1537,3,96,48,0,1536,1535,
        1,0,0,0,1536,1537,1,0,0,0,1537,1544,1,0,0,0,1538,1539,5,58,0,0,1539,
        1540,3,94,47,0,1540,1541,5,50,0,0,1541,1542,3,112,56,0,1542,1544,
        1,0,0,0,1543,1532,1,0,0,0,1543,1538,1,0,0,0,1544,93,1,0,0,0,1545,
        1547,5,53,0,0,1546,1545,1,0,0,0,1546,1547,1,0,0,0,1547,1569,1,0,
        0,0,1548,1569,5,51,0,0,1549,1551,5,54,0,0,1550,1552,5,52,0,0,1551,
        1550,1,0,0,0,1551,1552,1,0,0,0,1552,1569,1,0,0,0,1553,1554,5,54,
        0,0,1554,1569,5,55,0,0,1555,1557,5,56,0,0,1556,1558,5,52,0,0,1557,
        1556,1,0,0,0,1557,1558,1,0,0,0,1558,1569,1,0,0,0,1559,1561,5,57,
        0,0,1560,1562,5,52,0,0,1561,1560,1,0,0,0,1561,1562,1,0,0,0,1562,
        1569,1,0,0,0,1563,1565,5,54,0,0,1564,1563,1,0,0,0,1564,1565,1,0,
        0,0,1565,1566,1,0,0,0,1566,1569,5,230,0,0,1567,1569,5,120,0,0,1568,
        1546,1,0,0,0,1568,1548,1,0,0,0,1568,1549,1,0,0,0,1568,1553,1,0,0,
        0,1568,1555,1,0,0,0,1568,1559,1,0,0,0,1568,1564,1,0,0,0,1568,1567,
        1,0,0,0,1569,95,1,0,0,0,1570,1571,5,59,0,0,1571,1589,3,128,64,0,
        1572,1586,5,152,0,0,1573,1574,5,1,0,0,1574,1579,3,186,93,0,1575,
        1576,5,3,0,0,1576,1578,3,186,93,0,1577,1575,1,0,0,0,1578,1581,1,
        0,0,0,1579,1577,1,0,0,0,1579,1580,1,0,0,0,1580,1582,1,0,0,0,1581,
        1579,1,0,0,0,1582,1583,5,2,0,0,1583,1587,1,0,0,0,1584,1585,5,121,
        0,0,1585,1587,3,128,64,0,1586,1573,1,0,0,0,1586,1584,1,0,0,0,1587,
        1589,1,0,0,0,1588,1570,1,0,0,0,1588,1572,1,0,0,0,1589,97,1,0,0,0,
        1590,1591,5,103,0,0,1591,1613,5,1,0,0,1592,1593,7,11,0,0,1593,1614,
        5,142,0,0,1594,1595,3,126,63,0,1595,1596,5,65,0,0,1596,1614,1,0,
        0,0,1597,1614,5,237,0,0,1598,1599,5,143,0,0,1599,1600,5,238,0,0,
        1600,1601,5,144,0,0,1601,1602,5,145,0,0,1602,1611,5,238,0,0,1603,
        1609,5,59,0,0,1604,1610,3,186,93,0,1605,1606,3,184,92,0,1606,1607,
        5,1,0,0,1607,1608,5,2,0,0,1608,1610,1,0,0,0,1609,1604,1,0,0,0,1609,
        1605,1,0,0,0,1610,1612,1,0,0,0,1611,1603,1,0,0,0,1611,1612,1,0,0,
        0,1612,1614,1,0,0,0,1613,1592,1,0,0,0,1613,1594,1,0,0,0,1613,1597,
        1,0,0,0,1613,1598,1,0,0,0,1614,1615,1,0,0,0,1615,1616,5,2,0,0,1616,
        99,1,0,0,0,1617,1618,5,1,0,0,1618,1619,3,102,51,0,1619,1620,5,2,
        0,0,1620,101,1,0,0,0,1621,1626,3,186,93,0,1622,1623,5,3,0,0,1623,
        1625,3,186,93,0,1624,1622,1,0,0,0,1625,1628,1,0,0,0,1626,1624,1,
        0,0,0,1626,1627,1,0,0,0,1627,103,1,0,0,0,1628,1626,1,0,0,0,1629,
        1630,5,1,0,0,1630,1635,3,106,53,0,1631,1632,5,3,0,0,1632,1634,3,
        106,53,0,1633,1631,1,0,0,0,1634,1637,1,0,0,0,1635,1633,1,0,0,0,1635,
        1636,1,0,0,0,1636,1638,1,0,0,0,1637,1635,1,0,0,0,1638,1639,5,2,0,
        0,1639,105,1,0,0,0,1640,1642,3,186,93,0,1641,1643,7,8,0,0,1642,1641,
        1,0,0,0,1642,1643,1,0,0,0,1643,107,1,0,0,0,1644,1645,5,1,0,0,1645,
        1650,3,110,55,0,1646,1647,5,3,0,0,1647,1649,3,110,55,0,1648,1646,
        1,0,0,0,1649,1652,1,0,0,0,1650,1648,1,0,0,0,1650,1651,1,0,0,0,1651,
        1653,1,0,0,0,1652,1650,1,0,0,0,1653,1654,5,2,0,0,1654,109,1,0,0,
        0,1655,1658,3,186,93,0,1656,1657,5,110,0,0,1657,1659,5,233,0,0,1658,
        1656,1,0,0,0,1658,1659,1,0,0,0,1659,111,1,0,0,0,1660,1662,3,118,
        59,0,1661,1663,3,98,49,0,1662,1661,1,0,0,0,1662,1663,1,0,0,0,1663,
        1668,1,0,0,0,1664,1666,5,13,0,0,1665,1664,1,0,0,0,1665,1666,1,0,
        0,0,1666,1667,1,0,0,0,1667,1669,3,188,94,0,1668,1665,1,0,0,0,1668,
        1669,1,0,0,0,1669,1710,1,0,0,0,1670,1671,5,1,0,0,1671,1672,3,62,
        31,0,1672,1674,5,2,0,0,1673,1675,3,98,49,0,1674,1673,1,0,0,0,1674,
        1675,1,0,0,0,1675,1680,1,0,0,0,1676,1678,5,13,0,0,1677,1676,1,0,
        0,0,1677,1678,1,0,0,0,1678,1679,1,0,0,0,1679,1681,3,188,94,0,1680,
        1677,1,0,0,0,1680,1681,1,0,0,0,1681,1710,1,0,0,0,1682,1683,5,1,0,
        0,1683,1684,3,90,45,0,1684,1686,5,2,0,0,1685,1687,3,98,49,0,1686,
        1685,1,0,0,0,1686,1687,1,0,0,0,1687,1692,1,0,0,0,1688,1690,5,13,
        0,0,1689,1688,1,0,0,0,1689,1690,1,0,0,0,1690,1691,1,0,0,0,1691,1693,
        3,188,94,0,1692,1689,1,0,0,0,1692,1693,1,0,0,0,1693,1710,1,0,0,0,
        1694,1710,3,114,57,0,1695,1696,3,186,93,0,1696,1705,5,1,0,0,1697,
        1702,3,126,63,0,1698,1699,5,3,0,0,1699,1701,3,126,63,0,1700,1698,
        1,0,0,0,1701,1704,1,0,0,0,1702,1700,1,0,0,0,1702,1703,1,0,0,0,1703,
        1706,1,0,0,0,1704,1702,1,0,0,0,1705,1697,1,0,0,0,1705,1706,1,0,0,
        0,1706,1707,1,0,0,0,1707,1708,5,2,0,0,1708,1710,1,0,0,0,1709,1660,
        1,0,0,0,1709,1670,1,0,0,0,1709,1682,1,0,0,0,1709,1694,1,0,0,0,1709,
        1695,1,0,0,0,1710,113,1,0,0,0,1711,1712,5,75,0,0,1712,1717,3,126,
        63,0,1713,1714,5,3,0,0,1714,1716,3,126,63,0,1715,1713,1,0,0,0,1716,
        1719,1,0,0,0,1717,1715,1,0,0,0,1717,1718,1,0,0,0,1718,1727,1,0,0,
        0,1719,1717,1,0,0,0,1720,1722,5,13,0,0,1721,1720,1,0,0,0,1721,1722,
        1,0,0,0,1722,1723,1,0,0,0,1723,1725,3,186,93,0,1724,1726,3,100,50,
        0,1725,1724,1,0,0,0,1725,1726,1,0,0,0,1726,1728,1,0,0,0,1727,1721,
        1,0,0,0,1727,1728,1,0,0,0,1728,115,1,0,0,0,1729,1730,5,73,0,0,1730,
        1731,5,85,0,0,1731,1732,5,153,0,0,1732,1736,5,233,0,0,1733,1734,
        5,74,0,0,1734,1735,5,154,0,0,1735,1737,3,42,21,0,1736,1733,1,0,0,
        0,1736,1737,1,0,0,0,1737,1779,1,0,0,0,1738,1739,5,73,0,0,1739,1740,
        5,85,0,0,1740,1750,5,157,0,0,1741,1742,5,158,0,0,1742,1743,5,159,
        0,0,1743,1744,5,18,0,0,1744,1748,5,233,0,0,1745,1746,5,163,0,0,1746,
        1747,5,18,0,0,1747,1749,5,233,0,0,1748,1745,1,0,0,0,1748,1749,1,
        0,0,0,1749,1751,1,0,0,0,1750,1741,1,0,0,0,1750,1751,1,0,0,0,1751,
        1757,1,0,0,0,1752,1753,5,160,0,0,1753,1754,5,161,0,0,1754,1755,5,
        159,0,0,1755,1756,5,18,0,0,1756,1758,5,233,0,0,1757,1752,1,0,0,0,
        1757,1758,1,0,0,0,1758,1764,1,0,0,0,1759,1760,5,108,0,0,1760,1761,
        5,162,0,0,1761,1762,5,159,0,0,1762,1763,5,18,0,0,1763,1765,5,233,
        0,0,1764,1759,1,0,0,0,1764,1765,1,0,0,0,1765,1770,1,0,0,0,1766,1767,
        5,164,0,0,1767,1768,5,159,0,0,1768,1769,5,18,0,0,1769,1771,5,233,
        0,0,1770,1766,1,0,0,0,1770,1771,1,0,0,0,1771,1776,1,0,0,0,1772,1773,
        5,37,0,0,1773,1774,5,210,0,0,1774,1775,5,13,0,0,1775,1777,5,233,
        0,0,1776,1772,1,0,0,0,1776,1777,1,0,0,0,1777,1779,1,0,0,0,1778,1729,
        1,0,0,0,1778,1738,1,0,0,0,1779,117,1,0,0,0,1780,1781,3,186,93,0,
        1781,1782,5,4,0,0,1782,1784,1,0,0,0,1783,1780,1,0,0,0,1783,1784,
        1,0,0,0,1784,1785,1,0,0,0,1785,1786,3,186,93,0,1786,119,1,0,0,0,
        1787,1788,3,186,93,0,1788,1789,5,4,0,0,1789,1791,1,0,0,0,1790,1787,
        1,0,0,0,1790,1791,1,0,0,0,1791,1792,1,0,0,0,1792,1793,3,186,93,0,
        1793,121,1,0,0,0,1794,1802,3,126,63,0,1795,1797,5,13,0,0,1796,1795,
        1,0,0,0,1796,1797,1,0,0,0,1797,1800,1,0,0,0,1798,1801,3,186,93,0,
        1799,1801,3,100,50,0,1800,1798,1,0,0,0,1800,1799,1,0,0,0,1801,1803,
        1,0,0,0,1802,1796,1,0,0,0,1802,1803,1,0,0,0,1803,123,1,0,0,0,1804,
        1809,3,122,61,0,1805,1806,5,3,0,0,1806,1808,3,122,61,0,1807,1805,
        1,0,0,0,1808,1811,1,0,0,0,1809,1807,1,0,0,0,1809,1810,1,0,0,0,1810,
        125,1,0,0,0,1811,1809,1,0,0,0,1812,1813,3,128,64,0,1813,127,1,0,
        0,0,1814,1815,6,64,-1,0,1815,1816,5,30,0,0,1816,1825,3,128,64,6,
        1817,1818,5,32,0,0,1818,1819,5,1,0,0,1819,1820,3,22,11,0,1820,1821,
        5,2,0,0,1821,1825,1,0,0,0,1822,1825,3,130,65,0,1823,1825,3,132,66,
        0,1824,1814,1,0,0,0,1824,1817,1,0,0,0,1824,1822,1,0,0,0,1824,1823,
        1,0,0,0,1825,1834,1,0,0,0,1826,1827,10,2,0,0,1827,1828,5,28,0,0,
        1828,1833,3,128,64,3,1829,1830,10,1,0,0,1830,1831,5,27,0,0,1831,
        1833,3,128,64,2,1832,1826,1,0,0,0,1832,1829,1,0,0,0,1833,1836,1,
        0,0,0,1834,1832,1,0,0,0,1834,1835,1,0,0,0,1835,129,1,0,0,0,1836,
        1834,1,0,0,0,1837,1839,3,140,70,0,1838,1840,3,134,67,0,1839,1838,
        1,0,0,0,1839,1840,1,0,0,0,1840,131,1,0,0,0,1841,1842,3,136,68,0,
        1842,1843,5,122,0,0,1843,1844,5,1,0,0,1844,1845,5,121,0,0,1845,1846,
        3,138,69,0,1846,1847,5,3,0,0,1847,1848,3,140,70,0,1848,1849,5,2,
        0,0,1849,133,1,0,0,0,1850,1852,5,30,0,0,1851,1850,1,0,0,0,1851,1852,
        1,0,0,0,1852,1853,1,0,0,0,1853,1854,5,33,0,0,1854,1855,3,140,70,
        0,1855,1856,5,28,0,0,1856,1857,3,140,70,0,1857,1892,1,0,0,0,1858,
        1860,5,30,0,0,1859,1858,1,0,0,0,1859,1860,1,0,0,0,1860,1861,1,0,
        0,0,1861,1862,5,29,0,0,1862,1863,5,1,0,0,1863,1868,3,126,63,0,1864,
        1865,5,3,0,0,1865,1867,3,126,63,0,1866,1864,1,0,0,0,1867,1870,1,
        0,0,0,1868,1866,1,0,0,0,1868,1869,1,0,0,0,1869,1871,1,0,0,0,1870,
        1868,1,0,0,0,1871,1872,5,2,0,0,1872,1892,1,0,0,0,1873,1875,5,30,
        0,0,1874,1873,1,0,0,0,1874,1875,1,0,0,0,1875,1876,1,0,0,0,1876,1877,
        5,29,0,0,1877,1878,5,1,0,0,1878,1879,3,22,11,0,1879,1880,5,2,0,0,
        1880,1892,1,0,0,0,1881,1883,5,30,0,0,1882,1881,1,0,0,0,1882,1883,
        1,0,0,0,1883,1884,1,0,0,0,1884,1885,7,12,0,0,1885,1892,3,140,70,
        0,1886,1888,5,36,0,0,1887,1889,5,30,0,0,1888,1887,1,0,0,0,1888,1889,
        1,0,0,0,1889,1890,1,0,0,0,1890,1892,5,37,0,0,1891,1851,1,0,0,0,1891,
        1859,1,0,0,0,1891,1874,1,0,0,0,1891,1882,1,0,0,0,1891,1886,1,0,0,
        0,1892,135,1,0,0,0,1893,1894,5,1,0,0,1894,1899,3,126,63,0,1895,1896,
        5,3,0,0,1896,1898,3,126,63,0,1897,1895,1,0,0,0,1898,1901,1,0,0,0,
        1899,1897,1,0,0,0,1899,1900,1,0,0,0,1900,1902,1,0,0,0,1901,1899,
        1,0,0,0,1902,1903,5,2,0,0,1903,137,1,0,0,0,1904,1905,5,1,0,0,1905,
        1910,3,126,63,0,1906,1907,5,3,0,0,1907,1909,3,126,63,0,1908,1906,
        1,0,0,0,1909,1912,1,0,0,0,1910,1908,1,0,0,0,1910,1911,1,0,0,0,1911,
        1913,1,0,0,0,1912,1910,1,0,0,0,1913,1914,5,2,0,0,1914,139,1,0,0,
        0,1915,1916,6,70,-1,0,1916,1920,3,142,71,0,1917,1918,7,13,0,0,1918,
        1920,3,140,70,7,1919,1915,1,0,0,0,1919,1917,1,0,0,0,1920,1942,1,
        0,0,0,1921,1922,10,6,0,0,1922,1923,7,14,0,0,1923,1941,3,140,70,7,
        1924,1925,10,5,0,0,1925,1926,7,15,0,0,1926,1941,3,140,70,6,1927,
        1928,10,4,0,0,1928,1929,5,139,0,0,1929,1941,3,140,70,5,1930,1931,
        10,3,0,0,1931,1932,5,141,0,0,1932,1941,3,140,70,4,1933,1934,10,2,
        0,0,1934,1935,5,140,0,0,1935,1941,3,140,70,3,1936,1937,10,1,0,0,
        1937,1938,3,146,73,0,1938,1939,3,140,70,2,1939,1941,1,0,0,0,1940,
        1921,1,0,0,0,1940,1924,1,0,0,0,1940,1927,1,0,0,0,1940,1930,1,0,0,
        0,1940,1933,1,0,0,0,1940,1936,1,0,0,0,1941,1944,1,0,0,0,1942,1940,
        1,0,0,0,1942,1943,1,0,0,0,1943,141,1,0,0,0,1944,1942,1,0,0,0,1945,
        1946,6,71,-1,0,1946,1948,5,45,0,0,1947,1949,3,172,86,0,1948,1947,
        1,0,0,0,1949,1950,1,0,0,0,1950,1948,1,0,0,0,1950,1951,1,0,0,0,1951,
        1954,1,0,0,0,1952,1953,5,48,0,0,1953,1955,3,126,63,0,1954,1952,1,
        0,0,0,1954,1955,1,0,0,0,1955,1956,1,0,0,0,1956,1957,5,49,0,0,1957,
        2055,1,0,0,0,1958,1959,5,45,0,0,1959,1961,3,126,63,0,1960,1962,3,
        172,86,0,1961,1960,1,0,0,0,1962,1963,1,0,0,0,1963,1961,1,0,0,0,1963,
        1964,1,0,0,0,1964,1967,1,0,0,0,1965,1966,5,48,0,0,1966,1968,3,126,
        63,0,1967,1965,1,0,0,0,1967,1968,1,0,0,0,1968,1969,1,0,0,0,1969,
        1970,5,49,0,0,1970,2055,1,0,0,0,1971,1972,5,89,0,0,1972,1973,5,1,
        0,0,1973,1974,3,126,63,0,1974,1975,5,13,0,0,1975,1976,3,162,81,0,
        1976,1977,5,2,0,0,1977,2055,1,0,0,0,1978,1979,5,109,0,0,1979,1988,
        5,1,0,0,1980,1985,3,122,61,0,1981,1982,5,3,0,0,1982,1984,3,122,61,
        0,1983,1981,1,0,0,0,1984,1987,1,0,0,0,1985,1983,1,0,0,0,1985,1986,
        1,0,0,0,1986,1989,1,0,0,0,1987,1985,1,0,0,0,1988,1980,1,0,0,0,1988,
        1989,1,0,0,0,1989,1990,1,0,0,0,1990,2055,5,2,0,0,1991,1992,5,70,
        0,0,1992,1993,5,1,0,0,1993,1996,3,126,63,0,1994,1995,5,119,0,0,1995,
        1997,5,40,0,0,1996,1994,1,0,0,0,1996,1997,1,0,0,0,1997,1998,1,0,
        0,0,1998,1999,5,2,0,0,1999,2055,1,0,0,0,2000,2001,5,72,0,0,2001,
        2002,5,1,0,0,2002,2005,3,126,63,0,2003,2004,5,119,0,0,2004,2006,
        5,40,0,0,2005,2003,1,0,0,0,2005,2006,1,0,0,0,2006,2007,1,0,0,0,2007,
        2008,5,2,0,0,2008,2055,1,0,0,0,2009,2055,3,144,72,0,2010,2055,5,
        134,0,0,2011,2012,3,184,92,0,2012,2013,5,4,0,0,2013,2014,5,134,0,
        0,2014,2055,1,0,0,0,2015,2016,5,1,0,0,2016,2019,3,122,61,0,2017,
        2018,5,3,0,0,2018,2020,3,122,61,0,2019,2017,1,0,0,0,2020,2021,1,
        0,0,0,2021,2019,1,0,0,0,2021,2022,1,0,0,0,2022,2023,1,0,0,0,2023,
        2024,5,2,0,0,2024,2055,1,0,0,0,2025,2026,5,1,0,0,2026,2027,3,22,
        11,0,2027,2028,5,2,0,0,2028,2055,1,0,0,0,2029,2030,3,184,92,0,2030,
        2042,5,1,0,0,2031,2033,3,88,44,0,2032,2031,1,0,0,0,2032,2033,1,0,
        0,0,2033,2034,1,0,0,0,2034,2039,3,126,63,0,2035,2036,5,3,0,0,2036,
        2038,3,126,63,0,2037,2035,1,0,0,0,2038,2041,1,0,0,0,2039,2037,1,
        0,0,0,2039,2040,1,0,0,0,2040,2043,1,0,0,0,2041,2039,1,0,0,0,2042,
        2032,1,0,0,0,2042,2043,1,0,0,0,2043,2044,1,0,0,0,2044,2047,5,2,0,
        0,2045,2046,5,62,0,0,2046,2048,3,178,89,0,2047,2045,1,0,0,0,2047,
        2048,1,0,0,0,2048,2055,1,0,0,0,2049,2055,3,186,93,0,2050,2051,5,
        1,0,0,2051,2052,3,126,63,0,2052,2053,5,2,0,0,2053,2055,1,0,0,0,2054,
        1945,1,0,0,0,2054,1958,1,0,0,0,2054,1971,1,0,0,0,2054,1978,1,0,0,
        0,2054,1991,1,0,0,0,2054,2000,1,0,0,0,2054,2009,1,0,0,0,2054,2010,
        1,0,0,0,2054,2011,1,0,0,0,2054,2015,1,0,0,0,2054,2025,1,0,0,0,2054,
        2029,1,0,0,0,2054,2049,1,0,0,0,2054,2050,1,0,0,0,2055,2066,1,0,0,
        0,2056,2057,10,4,0,0,2057,2058,5,7,0,0,2058,2059,3,140,70,0,2059,
        2060,5,8,0,0,2060,2065,1,0,0,0,2061,2062,10,2,0,0,2062,2063,5,4,
        0,0,2063,2065,3,186,93,0,2064,2056,1,0,0,0,2064,2061,1,0,0,0,2065,
        2068,1,0,0,0,2066,2064,1,0,0,0,2066,2067,1,0,0,0,2067,143,1,0,0,
        0,2068,2066,1,0,0,0,2069,2082,5,37,0,0,2070,2082,3,154,77,0,2071,
        2072,3,186,93,0,2072,2073,5,233,0,0,2073,2082,1,0,0,0,2074,2082,
        3,192,96,0,2075,2082,3,152,76,0,2076,2078,5,233,0,0,2077,2076,1,
        0,0,0,2078,2079,1,0,0,0,2079,2077,1,0,0,0,2079,2080,1,0,0,0,2080,
        2082,1,0,0,0,2081,2069,1,0,0,0,2081,2070,1,0,0,0,2081,2071,1,0,0,
        0,2081,2074,1,0,0,0,2081,2075,1,0,0,0,2081,2077,1,0,0,0,2082,145,
        1,0,0,0,2083,2084,7,16,0,0,2084,147,1,0,0,0,2085,2086,7,17,0,0,2086,
        149,1,0,0,0,2087,2088,7,18,0,0,2088,151,1,0,0,0,2089,2090,7,19,0,
        0,2090,153,1,0,0,0,2091,2095,5,44,0,0,2092,2094,3,156,78,0,2093,
        2092,1,0,0,0,2094,2097,1,0,0,0,2095,2093,1,0,0,0,2095,2096,1,0,0,
        0,2096,155,1,0,0,0,2097,2095,1,0,0,0,2098,2099,3,158,79,0,2099,2102,
        3,186,93,0,2100,2101,5,102,0,0,2101,2103,3,186,93,0,2102,2100,1,
        0,0,0,2102,2103,1,0,0,0,2103,157,1,0,0,0,2104,2106,7,15,0,0,2105,
        2104,1,0,0,0,2105,2106,1,0,0,0,2106,2107,1,0,0,0,2107,2110,7,11,
        0,0,2108,2110,5,233,0,0,2109,2105,1,0,0,0,2109,2108,1,0,0,0,2110,
        159,1,0,0,0,2111,2115,5,70,0,0,2112,2113,5,71,0,0,2113,2115,3,186,
        93,0,2114,2111,1,0,0,0,2114,2112,1,0,0,0,2115,161,1,0,0,0,2116,2117,
        5,107,0,0,2117,2118,5,128,0,0,2118,2119,3,162,81,0,2119,2120,5,130,
        0,0,2120,2151,1,0,0,0,2121,2122,5,108,0,0,2122,2123,5,128,0,0,2123,
        2124,3,162,81,0,2124,2125,5,3,0,0,2125,2126,3,162,81,0,2126,2127,
        5,130,0,0,2127,2151,1,0,0,0,2128,2135,5,109,0,0,2129,2131,5,128,
        0,0,2130,2132,3,168,84,0,2131,2130,1,0,0,0,2131,2132,1,0,0,0,2132,
        2133,1,0,0,0,2133,2136,5,130,0,0,2134,2136,5,126,0,0,2135,2129,1,
        0,0,0,2135,2134,1,0,0,0,2136,2151,1,0,0,0,2137,2148,3,186,93,0,2138,
        2139,5,1,0,0,2139,2144,5,238,0,0,2140,2141,5,3,0,0,2141,2143,5,238,
        0,0,2142,2140,1,0,0,0,2143,2146,1,0,0,0,2144,2142,1,0,0,0,2144,2145,
        1,0,0,0,2145,2147,1,0,0,0,2146,2144,1,0,0,0,2147,2149,5,2,0,0,2148,
        2138,1,0,0,0,2148,2149,1,0,0,0,2149,2151,1,0,0,0,2150,2116,1,0,0,
        0,2150,2121,1,0,0,0,2150,2128,1,0,0,0,2150,2137,1,0,0,0,2151,163,
        1,0,0,0,2152,2157,3,166,83,0,2153,2154,5,3,0,0,2154,2156,3,166,83,
        0,2155,2153,1,0,0,0,2156,2159,1,0,0,0,2157,2155,1,0,0,0,2157,2158,
        1,0,0,0,2158,165,1,0,0,0,2159,2157,1,0,0,0,2160,2161,3,186,93,0,
        2161,2164,3,162,81,0,2162,2163,5,110,0,0,2163,2165,5,233,0,0,2164,
        2162,1,0,0,0,2164,2165,1,0,0,0,2165,167,1,0,0,0,2166,2171,3,170,
        85,0,2167,2168,5,3,0,0,2168,2170,3,170,85,0,2169,2167,1,0,0,0,2170,
        2173,1,0,0,0,2171,2169,1,0,0,0,2171,2172,1,0,0,0,2172,169,1,0,0,
        0,2173,2171,1,0,0,0,2174,2175,3,186,93,0,2175,2176,5,9,0,0,2176,
        2179,3,162,81,0,2177,2178,5,110,0,0,2178,2180,5,233,0,0,2179,2177,
        1,0,0,0,2179,2180,1,0,0,0,2180,171,1,0,0,0,2181,2182,5,46,0,0,2182,
        2183,3,126,63,0,2183,2184,5,47,0,0,2184,2185,3,126,63,0,2185,173,
        1,0,0,0,2186,2187,5,61,0,0,2187,2192,3,176,88,0,2188,2189,5,3,0,
        0,2189,2191,3,176,88,0,2190,2188,1,0,0,0,2191,2194,1,0,0,0,2192,
        2190,1,0,0,0,2192,2193,1,0,0,0,2193,175,1,0,0,0,2194,2192,1,0,0,
        0,2195,2196,3,186,93,0,2196,2197,5,13,0,0,2197,2198,3,178,89,0,2198,
        177,1,0,0,0,2199,2242,3,186,93,0,2200,2235,5,1,0,0,2201,2202,5,147,
        0,0,2202,2203,5,18,0,0,2203,2208,3,126,63,0,2204,2205,5,3,0,0,2205,
        2207,3,126,63,0,2206,2204,1,0,0,0,2207,2210,1,0,0,0,2208,2206,1,
        0,0,0,2208,2209,1,0,0,0,2209,2236,1,0,0,0,2210,2208,1,0,0,0,2211,
        2212,7,20,0,0,2212,2213,5,18,0,0,2213,2218,3,126,63,0,2214,2215,
        5,3,0,0,2215,2217,3,126,63,0,2216,2214,1,0,0,0,2217,2220,1,0,0,0,
        2218,2216,1,0,0,0,2218,2219,1,0,0,0,2219,2222,1,0,0,0,2220,2218,
        1,0,0,0,2221,2211,1,0,0,0,2221,2222,1,0,0,0,2222,2233,1,0,0,0,2223,
        2224,7,21,0,0,2224,2225,5,18,0,0,2225,2230,3,72,36,0,2226,2227,5,
        3,0,0,2227,2229,3,72,36,0,2228,2226,1,0,0,0,2229,2232,1,0,0,0,2230,
        2228,1,0,0,0,2230,2231,1,0,0,0,2231,2234,1,0,0,0,2232,2230,1,0,0,
        0,2233,2223,1,0,0,0,2233,2234,1,0,0,0,2234,2236,1,0,0,0,2235,2201,
        1,0,0,0,2235,2221,1,0,0,0,2236,2238,1,0,0,0,2237,2239,3,180,90,0,
        2238,2237,1,0,0,0,2238,2239,1,0,0,0,2239,2240,1,0,0,0,2240,2242,
        5,2,0,0,2241,2199,1,0,0,0,2241,2200,1,0,0,0,2242,179,1,0,0,0,2243,
        2244,5,64,0,0,2244,2260,3,182,91,0,2245,2246,5,65,0,0,2246,2260,
        3,182,91,0,2247,2248,5,64,0,0,2248,2249,5,33,0,0,2249,2250,3,182,
        91,0,2250,2251,5,28,0,0,2251,2252,3,182,91,0,2252,2260,1,0,0,0,2253,
        2254,5,65,0,0,2254,2255,5,33,0,0,2255,2256,3,182,91,0,2256,2257,
        5,28,0,0,2257,2258,3,182,91,0,2258,2260,1,0,0,0,2259,2243,1,0,0,
        0,2259,2245,1,0,0,0,2259,2247,1,0,0,0,2259,2253,1,0,0,0,2260,181,
        1,0,0,0,2261,2262,5,66,0,0,2262,2269,7,22,0,0,2263,2264,5,69,0,0,
        2264,2269,5,73,0,0,2265,2266,3,126,63,0,2266,2267,7,22,0,0,2267,
        2269,1,0,0,0,2268,2261,1,0,0,0,2268,2263,1,0,0,0,2268,2265,1,0,0,
        0,2269,183,1,0,0,0,2270,2275,3,186,93,0,2271,2272,5,4,0,0,2272,2274,
        3,186,93,0,2273,2271,1,0,0,0,2274,2277,1,0,0,0,2275,2273,1,0,0,0,
        2275,2276,1,0,0,0,2276,185,1,0,0,0,2277,2275,1,0,0,0,2278,2295,3,
        188,94,0,2279,2295,5,230,0,0,2280,2295,5,57,0,0,2281,2295,5,53,0,
        0,2282,2295,5,54,0,0,2283,2295,5,55,0,0,2284,2295,5,56,0,0,2285,
        2295,5,58,0,0,2286,2295,5,50,0,0,2287,2295,5,51,0,0,2288,2295,5,
        59,0,0,2289,2295,5,120,0,0,2290,2295,5,98,0,0,2291,2295,5,101,0,
        0,2292,2295,5,99,0,0,2293,2295,5,100,0,0,2294,2278,1,0,0,0,2294,
        2279,1,0,0,0,2294,2280,1,0,0,0,2294,2281,1,0,0,0,2294,2282,1,0,0,
        0,2294,2283,1,0,0,0,2294,2284,1,0,0,0,2294,2285,1,0,0,0,2294,2286,
        1,0,0,0,2294,2287,1,0,0,0,2294,2288,1,0,0,0,2294,2289,1,0,0,0,2294,
        2290,1,0,0,0,2294,2291,1,0,0,0,2294,2292,1,0,0,0,2294,2293,1,0,0,
        0,2295,187,1,0,0,0,2296,2300,5,242,0,0,2297,2300,3,190,95,0,2298,
        2300,3,194,97,0,2299,2296,1,0,0,0,2299,2297,1,0,0,0,2299,2298,1,
        0,0,0,2300,189,1,0,0,0,2301,2302,5,243,0,0,2302,191,1,0,0,0,2303,
        2305,5,133,0,0,2304,2303,1,0,0,0,2304,2305,1,0,0,0,2305,2306,1,0,
        0,0,2306,2332,5,239,0,0,2307,2309,5,133,0,0,2308,2307,1,0,0,0,2308,
        2309,1,0,0,0,2309,2310,1,0,0,0,2310,2332,5,238,0,0,2311,2313,5,133,
        0,0,2312,2311,1,0,0,0,2312,2313,1,0,0,0,2313,2314,1,0,0,0,2314,2332,
        5,234,0,0,2315,2317,5,133,0,0,2316,2315,1,0,0,0,2316,2317,1,0,0,
        0,2317,2318,1,0,0,0,2318,2332,5,235,0,0,2319,2321,5,133,0,0,2320,
        2319,1,0,0,0,2320,2321,1,0,0,0,2321,2322,1,0,0,0,2322,2332,5,236,
        0,0,2323,2325,5,133,0,0,2324,2323,1,0,0,0,2324,2325,1,0,0,0,2325,
        2326,1,0,0,0,2326,2332,5,240,0,0,2327,2329,5,133,0,0,2328,2327,1,
        0,0,0,2328,2329,1,0,0,0,2329,2330,1,0,0,0,2330,2332,5,241,0,0,2331,
        2304,1,0,0,0,2331,2308,1,0,0,0,2331,2312,1,0,0,0,2331,2316,1,0,0,
        0,2331,2320,1,0,0,0,2331,2324,1,0,0,0,2331,2328,1,0,0,0,2332,193,
        1,0,0,0,2333,2334,7,23,0,0,2334,195,1,0,0,0,319,219,224,227,232,
        245,249,256,261,266,269,272,276,279,282,289,293,301,304,307,310,
        313,316,320,323,326,333,339,345,353,385,393,397,402,408,416,422,
        435,440,449,454,470,477,481,489,496,503,518,522,528,534,537,540,
        546,550,554,559,563,571,574,583,588,594,600,612,615,619,624,629,
        636,639,642,649,654,660,669,677,683,687,691,695,697,706,712,717,
        720,724,727,736,741,746,749,755,763,768,774,780,791,799,806,814,
        817,825,829,836,952,960,968,977,989,993,996,1002,1012,1024,1029,
        1035,1047,1049,1054,1058,1060,1064,1073,1081,1088,1094,1098,1107,
        1112,1127,1134,1137,1144,1148,1154,1162,1173,1184,1191,1197,1203,
        1212,1214,1223,1226,1235,1238,1247,1250,1259,1262,1265,1269,1272,
        1283,1288,1299,1303,1307,1319,1322,1326,1336,1340,1342,1345,1349,
        1352,1356,1362,1366,1370,1375,1378,1380,1385,1390,1393,1397,1400,
        1402,1407,1412,1425,1430,1438,1444,1454,1469,1474,1482,1485,1489,
        1494,1503,1506,1511,1518,1521,1529,1536,1543,1546,1551,1557,1561,
        1564,1568,1579,1586,1588,1609,1611,1613,1626,1635,1642,1650,1658,
        1662,1665,1668,1674,1677,1680,1686,1689,1692,1702,1705,1709,1717,
        1721,1725,1727,1736,1748,1750,1757,1764,1770,1776,1778,1783,1790,
        1796,1800,1802,1809,1824,1832,1834,1839,1851,1859,1868,1874,1882,
        1888,1891,1899,1910,1919,1940,1942,1950,1954,1963,1967,1985,1988,
        1996,2005,2021,2032,2039,2042,2047,2054,2064,2066,2079,2081,2095,
        2102,2105,2109,2114,2131,2135,2144,2148,2150,2157,2164,2171,2179,
        2192,2208,2218,2221,2230,2233,2235,2238,2241,2259,2268,2275,2294,
        2299,2304,2308,2312,2316,2320,2324,2328,2331
    ]

class SqlBaseParser ( Parser ):

    grammarFileName = "SqlBase.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'('", "')'", "','", "'.'", "'/*+'", "'*/'", 
                     "'['", "']'", "':'", "'SELECT'", "'FROM'", "'ADD'", 
                     "'AS'", "'ALL'", "'DISTINCT'", "'WHERE'", "'GROUP'", 
                     "'BY'", "'GROUPING'", "'SETS'", "'CUBE'", "'ROLLUP'", 
                     "'ORDER'", "'HAVING'", "'LIMIT'", "'AT'", "'OR'", "'AND'", 
                     "'IN'", "<INVALID>", "'NO'", "'EXISTS'", "'BETWEEN'", 
                     "'LIKE'", "<INVALID>", "'IS'", "'NULL'", "'TRUE'", 
                     "'FALSE'", "'NULLS'", "'ASC'", "'DESC'", "'FOR'", "'INTERVAL'", 
                     "'CASE'", "'WHEN'", "'THEN'", "'ELSE'", "'END'", "'JOIN'", 
                     "'CROSS'", "'OUTER'", "'INNER'", "'LEFT'", "'SEMI'", 
                     "'RIGHT'", "'FULL'", "'NATURAL'", "'ON'", "'LATERAL'", 
                     "'WINDOW'", "'OVER'", "'PARTITION'", "'RANGE'", "'ROWS'", 
                     "'UNBOUNDED'", "'PRECEDING'", "'FOLLOWING'", "'CURRENT'", 
                     "'FIRST'", "'AFTER'", "'LAST'", "'ROW'", "'WITH'", 
                     "'VALUES'", "'CREATE'", "'TABLE'", "'VIEW'", "'REPLACE'", 
                     "'INSERT'", "'DELETE'", "'INTO'", "'DESCRIBE'", "'EXPLAIN'", 
                     "'FORMAT'", "'LOGICAL'", "'CODEGEN'", "'COST'", "'CAST'", 
                     "'SHOW'", "'TABLES'", "'COLUMNS'", "'COLUMN'", "'USE'", 
                     "'PARTITIONS'", "'FUNCTIONS'", "'DROP'", "'UNION'", 
                     "'EXCEPT'", "'MINUS'", "'INTERSECT'", "'TO'", "'TABLESAMPLE'", 
                     "'STRATIFY'", "'ALTER'", "'RENAME'", "'ARRAY'", "'MAP'", 
                     "'STRUCT'", "'COMMENT'", "'SET'", "'RESET'", "'DATA'", 
                     "'START'", "'TRANSACTION'", "'COMMIT'", "'ROLLBACK'", 
                     "'MACRO'", "'IGNORE'", "'KNN'", "'POINT'", "'KNNPRED'", 
                     "'IF'", "<INVALID>", "'<=>'", "'<>'", "'!='", "'<'", 
                     "<INVALID>", "'>'", "<INVALID>", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'DIV'", "'~'", "'&'", "'|'", "'^'", 
                     "'PERCENT'", "'BUCKET'", "'OUT'", "'OF'", "'SORT'", 
                     "'CLUSTER'", "'DISTRIBUTE'", "'OVERWRITE'", "'TRANSFORM'", 
                     "'REDUCE'", "'USING'", "'SERDE'", "'SERDEPROPERTIES'", 
                     "'RECORDREADER'", "'RECORDWRITER'", "'DELIMITED'", 
                     "'FIELDS'", "'TERMINATED'", "'COLLECTION'", "'ITEMS'", 
                     "'KEYS'", "'ESCAPED'", "'LINES'", "'SEPARATED'", "'FUNCTION'", 
                     "'EXTENDED'", "'REFRESH'", "'CLEAR'", "'CACHE'", "'UNCACHE'", 
                     "'LAZY'", "'FORMATTED'", "'GLOBAL'", "<INVALID>", "'OPTIONS'", 
                     "'UNSET'", "'TBLPROPERTIES'", "'DBPROPERTIES'", "'BUCKETS'", 
                     "'SKEWED'", "'STORED'", "'DIRECTORIES'", "'LOCATION'", 
                     "'EXCHANGE'", "'ARCHIVE'", "'UNARCHIVE'", "'FILEFORMAT'", 
                     "'TOUCH'", "'COMPACT'", "'CONCATENATE'", "'CHANGE'", 
                     "'CASCADE'", "'RESTRICT'", "'CLUSTERED'", "'SORTED'", 
                     "'PURGE'", "'INPUTFORMAT'", "'OUTPUTFORMAT'", "<INVALID>", 
                     "<INVALID>", "'DFS'", "'TRUNCATE'", "'ANALYZE'", "'COMPUTE'", 
                     "'LIST'", "'STATISTICS'", "'PARTITIONED'", "'EXTERNAL'", 
                     "'DEFINED'", "'REVOKE'", "'GRANT'", "'LOCK'", "'UNLOCK'", 
                     "'MSCK'", "'REPAIR'", "'RECOVER'", "'EXPORT'", "'IMPORT'", 
                     "'LOAD'", "'ROLE'", "'ROLES'", "'COMPACTIONS'", "'PRINCIPALS'", 
                     "'TRANSACTIONS'", "'INDEX'", "'INDEXES'", "'LOCKS'", 
                     "'OPTION'", "'ANTI'", "'LOCAL'", "'INPATH'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'/**/'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "SELECT", "FROM", "ADD", 
                      "AS", "ALL", "DISTINCT", "WHERE", "GROUP", "BY", "GROUPING", 
                      "SETS", "CUBE", "ROLLUP", "ORDER", "HAVING", "LIMIT", 
                      "AT", "OR", "AND", "IN", "NOT", "NO", "EXISTS", "BETWEEN", 
                      "LIKE", "RLIKE", "IS", "NULL", "TRUE", "FALSE", "NULLS", 
                      "ASC", "DESC", "FOR", "INTERVAL", "CASE", "WHEN", 
                      "THEN", "ELSE", "END", "JOIN", "CROSS", "OUTER", "INNER", 
                      "LEFT", "SEMI", "RIGHT", "FULL", "NATURAL", "ON", 
                      "LATERAL", "WINDOW", "OVER", "PARTITION", "RANGE", 
                      "ROWS", "UNBOUNDED", "PRECEDING", "FOLLOWING", "CURRENT", 
                      "FIRST", "AFTER", "LAST", "ROW", "WITH", "VALUES", 
                      "CREATE", "TABLE", "VIEW", "REPLACE", "INSERT", "DELETE", 
                      "INTO", "DESCRIBE", "EXPLAIN", "FORMAT", "LOGICAL", 
                      "CODEGEN", "COST", "CAST", "SHOW", "TABLES", "COLUMNS", 
                      "COLUMN", "USE", "PARTITIONS", "FUNCTIONS", "DROP", 
                      "UNION", "EXCEPT", "SETMINUS", "INTERSECT", "TO", 
                      "TABLESAMPLE", "STRATIFY", "ALTER", "RENAME", "ARRAY", 
                      "MAP", "STRUCT", "COMMENT", "SET", "RESET", "DATA", 
                      "START", "TRANSACTION", "COMMIT", "ROLLBACK", "MACRO", 
                      "IGNORE", "KNN", "POINT", "KNNPRED", "IF", "EQ", "NSEQ", 
                      "NEQ", "NEQJ", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", 
                      "ASTERISK", "SLASH", "PERCENT", "DIV", "TILDE", "AMPERSAND", 
                      "PIPE", "HAT", "PERCENTLIT", "BUCKET", "OUT", "OF", 
                      "SORT", "CLUSTER", "DISTRIBUTE", "OVERWRITE", "TRANSFORM", 
                      "REDUCE", "USING", "SERDE", "SERDEPROPERTIES", "RECORDREADER", 
                      "RECORDWRITER", "DELIMITED", "FIELDS", "TERMINATED", 
                      "COLLECTION", "ITEMS", "KEYS", "ESCAPED", "LINES", 
                      "SEPARATED", "FUNCTION", "EXTENDED", "REFRESH", "CLEAR", 
                      "CACHE", "UNCACHE", "LAZY", "FORMATTED", "GLOBAL", 
                      "TEMPORARY", "OPTIONS", "UNSET", "TBLPROPERTIES", 
                      "DBPROPERTIES", "BUCKETS", "SKEWED", "STORED", "DIRECTORIES", 
                      "LOCATION", "EXCHANGE", "ARCHIVE", "UNARCHIVE", "FILEFORMAT", 
                      "TOUCH", "COMPACT", "CONCATENATE", "CHANGE", "CASCADE", 
                      "RESTRICT", "CLUSTERED", "SORTED", "PURGE", "INPUTFORMAT", 
                      "OUTPUTFORMAT", "DATABASE", "DATABASES", "DFS", "TRUNCATE", 
                      "ANALYZE", "COMPUTE", "LIST", "STATISTICS", "PARTITIONED", 
                      "EXTERNAL", "DEFINED", "REVOKE", "GRANT", "LOCK", 
                      "UNLOCK", "MSCK", "REPAIR", "RECOVER", "EXPORT", "IMPORT", 
                      "LOAD", "ROLE", "ROLES", "COMPACTIONS", "PRINCIPALS", 
                      "TRANSACTIONS", "INDEX", "INDEXES", "LOCKS", "OPTION", 
                      "ANTI", "LOCAL", "INPATH", "STRING", "BIGINT_LITERAL", 
                      "SMALLINT_LITERAL", "TINYINT_LITERAL", "BYTELENGTH_LITERAL", 
                      "INTEGER_VALUE", "DECIMAL_VALUE", "DOUBLE_LITERAL", 
                      "BIGDECIMAL_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
                      "SIMPLE_COMMENT", "BRACKETED_EMPTY_COMMENT", "BRACKETED_COMMENT", 
                      "WS", "UNRECOGNIZED", "DELIMITER" ]

    RULE_singleStatement = 0
    RULE_singleExpression = 1
    RULE_singleTableIdentifier = 2
    RULE_singleFunctionIdentifier = 3
    RULE_singleDataType = 4
    RULE_statement = 5
    RULE_unsupportedHiveNativeCommands = 6
    RULE_createTableHeader = 7
    RULE_bucketSpec = 8
    RULE_skewSpec = 9
    RULE_locationSpec = 10
    RULE_query = 11
    RULE_insertInto = 12
    RULE_partitionSpecLocation = 13
    RULE_partitionSpec = 14
    RULE_partitionVal = 15
    RULE_describeFuncName = 16
    RULE_describeColName = 17
    RULE_ctes = 18
    RULE_namedQuery = 19
    RULE_tableProvider = 20
    RULE_tablePropertyList = 21
    RULE_tableProperty = 22
    RULE_tablePropertyKey = 23
    RULE_tablePropertyValue = 24
    RULE_constantList = 25
    RULE_nestedConstantList = 26
    RULE_createFileFormat = 27
    RULE_fileFormat = 28
    RULE_storageHandler = 29
    RULE_resource = 30
    RULE_queryNoWith = 31
    RULE_queryOrganization = 32
    RULE_multiInsertQueryBody = 33
    RULE_queryTerm = 34
    RULE_queryPrimary = 35
    RULE_sortItem = 36
    RULE_querySpecification = 37
    RULE_hint = 38
    RULE_hintStatement = 39
    RULE_fromClause = 40
    RULE_aggregation = 41
    RULE_groupingSet = 42
    RULE_lateralView = 43
    RULE_setQuantifier = 44
    RULE_relation = 45
    RULE_joinRelation = 46
    RULE_joinType = 47
    RULE_joinCriteria = 48
    RULE_sample = 49
    RULE_identifierList = 50
    RULE_identifierSeq = 51
    RULE_orderedIdentifierList = 52
    RULE_orderedIdentifier = 53
    RULE_identifierCommentList = 54
    RULE_identifierComment = 55
    RULE_relationPrimary = 56
    RULE_inlineTable = 57
    RULE_rowFormat = 58
    RULE_tableIdentifier = 59
    RULE_functionIdentifier = 60
    RULE_namedExpression = 61
    RULE_namedExpressionSeq = 62
    RULE_expression = 63
    RULE_booleanExpression = 64
    RULE_predicated = 65
    RULE_spatialpredicated = 66
    RULE_predicate = 67
    RULE_myexpressionlist1 = 68
    RULE_myexpressionlist2 = 69
    RULE_valueExpression = 70
    RULE_primaryExpression = 71
    RULE_constant = 72
    RULE_comparisonOperator = 73
    RULE_arithmeticOperator = 74
    RULE_predicateOperator = 75
    RULE_booleanValue = 76
    RULE_interval = 77
    RULE_intervalField = 78
    RULE_intervalValue = 79
    RULE_colPosition = 80
    RULE_dataType = 81
    RULE_colTypeList = 82
    RULE_colType = 83
    RULE_complexColTypeList = 84
    RULE_complexColType = 85
    RULE_whenClause = 86
    RULE_windows = 87
    RULE_namedWindow = 88
    RULE_windowSpec = 89
    RULE_windowFrame = 90
    RULE_frameBound = 91
    RULE_qualifiedName = 92
    RULE_identifier = 93
    RULE_strictIdentifier = 94
    RULE_quotedIdentifier = 95
    RULE_number = 96
    RULE_nonReserved = 97

    ruleNames =  [ "singleStatement", "singleExpression", "singleTableIdentifier", 
                   "singleFunctionIdentifier", "singleDataType", "statement", 
                   "unsupportedHiveNativeCommands", "createTableHeader", 
                   "bucketSpec", "skewSpec", "locationSpec", "query", "insertInto", 
                   "partitionSpecLocation", "partitionSpec", "partitionVal", 
                   "describeFuncName", "describeColName", "ctes", "namedQuery", 
                   "tableProvider", "tablePropertyList", "tableProperty", 
                   "tablePropertyKey", "tablePropertyValue", "constantList", 
                   "nestedConstantList", "createFileFormat", "fileFormat", 
                   "storageHandler", "resource", "queryNoWith", "queryOrganization", 
                   "multiInsertQueryBody", "queryTerm", "queryPrimary", 
                   "sortItem", "querySpecification", "hint", "hintStatement", 
                   "fromClause", "aggregation", "groupingSet", "lateralView", 
                   "setQuantifier", "relation", "joinRelation", "joinType", 
                   "joinCriteria", "sample", "identifierList", "identifierSeq", 
                   "orderedIdentifierList", "orderedIdentifier", "identifierCommentList", 
                   "identifierComment", "relationPrimary", "inlineTable", 
                   "rowFormat", "tableIdentifier", "functionIdentifier", 
                   "namedExpression", "namedExpressionSeq", "expression", 
                   "booleanExpression", "predicated", "spatialpredicated", 
                   "predicate", "myexpressionlist1", "myexpressionlist2", 
                   "valueExpression", "primaryExpression", "constant", "comparisonOperator", 
                   "arithmeticOperator", "predicateOperator", "booleanValue", 
                   "interval", "intervalField", "intervalValue", "colPosition", 
                   "dataType", "colTypeList", "colType", "complexColTypeList", 
                   "complexColType", "whenClause", "windows", "namedWindow", 
                   "windowSpec", "windowFrame", "frameBound", "qualifiedName", 
                   "identifier", "strictIdentifier", "quotedIdentifier", 
                   "number", "nonReserved" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    SELECT=10
    FROM=11
    ADD=12
    AS=13
    ALL=14
    DISTINCT=15
    WHERE=16
    GROUP=17
    BY=18
    GROUPING=19
    SETS=20
    CUBE=21
    ROLLUP=22
    ORDER=23
    HAVING=24
    LIMIT=25
    AT=26
    OR=27
    AND=28
    IN=29
    NOT=30
    NO=31
    EXISTS=32
    BETWEEN=33
    LIKE=34
    RLIKE=35
    IS=36
    NULL=37
    TRUE=38
    FALSE=39
    NULLS=40
    ASC=41
    DESC=42
    FOR=43
    INTERVAL=44
    CASE=45
    WHEN=46
    THEN=47
    ELSE=48
    END=49
    JOIN=50
    CROSS=51
    OUTER=52
    INNER=53
    LEFT=54
    SEMI=55
    RIGHT=56
    FULL=57
    NATURAL=58
    ON=59
    LATERAL=60
    WINDOW=61
    OVER=62
    PARTITION=63
    RANGE=64
    ROWS=65
    UNBOUNDED=66
    PRECEDING=67
    FOLLOWING=68
    CURRENT=69
    FIRST=70
    AFTER=71
    LAST=72
    ROW=73
    WITH=74
    VALUES=75
    CREATE=76
    TABLE=77
    VIEW=78
    REPLACE=79
    INSERT=80
    DELETE=81
    INTO=82
    DESCRIBE=83
    EXPLAIN=84
    FORMAT=85
    LOGICAL=86
    CODEGEN=87
    COST=88
    CAST=89
    SHOW=90
    TABLES=91
    COLUMNS=92
    COLUMN=93
    USE=94
    PARTITIONS=95
    FUNCTIONS=96
    DROP=97
    UNION=98
    EXCEPT=99
    SETMINUS=100
    INTERSECT=101
    TO=102
    TABLESAMPLE=103
    STRATIFY=104
    ALTER=105
    RENAME=106
    ARRAY=107
    MAP=108
    STRUCT=109
    COMMENT=110
    SET=111
    RESET=112
    DATA=113
    START=114
    TRANSACTION=115
    COMMIT=116
    ROLLBACK=117
    MACRO=118
    IGNORE=119
    KNN=120
    POINT=121
    KNNPRED=122
    IF=123
    EQ=124
    NSEQ=125
    NEQ=126
    NEQJ=127
    LT=128
    LTE=129
    GT=130
    GTE=131
    PLUS=132
    MINUS=133
    ASTERISK=134
    SLASH=135
    PERCENT=136
    DIV=137
    TILDE=138
    AMPERSAND=139
    PIPE=140
    HAT=141
    PERCENTLIT=142
    BUCKET=143
    OUT=144
    OF=145
    SORT=146
    CLUSTER=147
    DISTRIBUTE=148
    OVERWRITE=149
    TRANSFORM=150
    REDUCE=151
    USING=152
    SERDE=153
    SERDEPROPERTIES=154
    RECORDREADER=155
    RECORDWRITER=156
    DELIMITED=157
    FIELDS=158
    TERMINATED=159
    COLLECTION=160
    ITEMS=161
    KEYS=162
    ESCAPED=163
    LINES=164
    SEPARATED=165
    FUNCTION=166
    EXTENDED=167
    REFRESH=168
    CLEAR=169
    CACHE=170
    UNCACHE=171
    LAZY=172
    FORMATTED=173
    GLOBAL=174
    TEMPORARY=175
    OPTIONS=176
    UNSET=177
    TBLPROPERTIES=178
    DBPROPERTIES=179
    BUCKETS=180
    SKEWED=181
    STORED=182
    DIRECTORIES=183
    LOCATION=184
    EXCHANGE=185
    ARCHIVE=186
    UNARCHIVE=187
    FILEFORMAT=188
    TOUCH=189
    COMPACT=190
    CONCATENATE=191
    CHANGE=192
    CASCADE=193
    RESTRICT=194
    CLUSTERED=195
    SORTED=196
    PURGE=197
    INPUTFORMAT=198
    OUTPUTFORMAT=199
    DATABASE=200
    DATABASES=201
    DFS=202
    TRUNCATE=203
    ANALYZE=204
    COMPUTE=205
    LIST=206
    STATISTICS=207
    PARTITIONED=208
    EXTERNAL=209
    DEFINED=210
    REVOKE=211
    GRANT=212
    LOCK=213
    UNLOCK=214
    MSCK=215
    REPAIR=216
    RECOVER=217
    EXPORT=218
    IMPORT=219
    LOAD=220
    ROLE=221
    ROLES=222
    COMPACTIONS=223
    PRINCIPALS=224
    TRANSACTIONS=225
    INDEX=226
    INDEXES=227
    LOCKS=228
    OPTION=229
    ANTI=230
    LOCAL=231
    INPATH=232
    STRING=233
    BIGINT_LITERAL=234
    SMALLINT_LITERAL=235
    TINYINT_LITERAL=236
    BYTELENGTH_LITERAL=237
    INTEGER_VALUE=238
    DECIMAL_VALUE=239
    DOUBLE_LITERAL=240
    BIGDECIMAL_LITERAL=241
    IDENTIFIER=242
    BACKQUOTED_IDENTIFIER=243
    SIMPLE_COMMENT=244
    BRACKETED_EMPTY_COMMENT=245
    BRACKETED_COMMENT=246
    WS=247
    UNRECOGNIZED=248
    DELIMITER=249

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    def is_valid_decimal(self):
        """
        验证当前标记是否为有效的十进制数（包含小数点）。
        如果标记后跟随的字符不是数字、字母或下划线，则返回True。

        示例：
        对于字符流 "2.3"，"2." 不是有效的十进制数，因为它后面跟着数字 '3'。
        对于字符流 "2.3_"，"2.3" 不是有效的十进制数，因为它后面跟着 '_'。
        对于字符流 "2.3W"，"2.3" 不是有效的十进制数，因为它后面跟着 'W'。
        对于字符流 "12.0D 34.E2+0.12"，"12.0D" 是有效的十进制数，因为它后面跟着空格。
        "34.E2" 是有效的十进制数，因为它后面跟着符号 '+'，这不是数字、字母或下划线。
        """
        next_char = self._input.LA(1)
        if ('A' <= chr(next_char) <= 'Z') or ('0' <= chr(next_char) <= '9') or (chr(next_char) == '_'):
            return False
        else:
            return True



    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStatement" ):
                return visitor.visitSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleStatement(self):

        localctx = SqlBaseParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_singleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 196
            self.statement()
            self.state = 197
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleExpression" ):
                listener.enterSingleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleExpression" ):
                listener.exitSingleExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleExpression" ):
                return visitor.visitSingleExpression(self)
            else:
                return visitor.visitChildren(self)




    def singleExpression(self):

        localctx = SqlBaseParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self.namedExpression()
            self.state = 200
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleTableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableIdentifier" ):
                listener.enterSingleTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableIdentifier" ):
                listener.exitSingleTableIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleTableIdentifier" ):
                return visitor.visitSingleTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleTableIdentifier(self):

        localctx = SqlBaseParser.SingleTableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_singleTableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            self.tableIdentifier()
            self.state = 203
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleFunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleFunctionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleFunctionIdentifier" ):
                listener.enterSingleFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleFunctionIdentifier" ):
                listener.exitSingleFunctionIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleFunctionIdentifier" ):
                return visitor.visitSingleFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleFunctionIdentifier(self):

        localctx = SqlBaseParser.SingleFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_singleFunctionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 205
            self.functionIdentifier()
            self.state = 206
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDataType" ):
                listener.enterSingleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDataType" ):
                listener.exitSingleDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDataType" ):
                return visitor.visitSingleDataType(self)
            else:
                return visitor.visitChildren(self)




    def singleDataType(self):

        localctx = SqlBaseParser.SingleDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_singleDataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self.dataType()
            self.state = 209
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)
        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)
        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain" ):
                return visitor.visitExplain(self)
            else:
                return visitor.visitChildren(self)


    class DropDatabaseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)
        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropDatabase" ):
                return visitor.visitDropDatabase(self)
            else:
                return visitor.visitChildren(self)


    class ResetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetConfiguration" ):
                listener.enterResetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetConfiguration" ):
                listener.exitResetConfiguration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetConfiguration" ):
                return visitor.visitResetConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class DescribeDatabaseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeDatabase" ):
                listener.enterDescribeDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeDatabase" ):
                listener.exitDescribeDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeDatabase" ):
                return visitor.visitDescribeDatabase(self)
            else:
                return visitor.visitChildren(self)


    class AlterViewQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterViewQuery" ):
                listener.enterAlterViewQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterViewQuery" ):
                listener.exitAlterViewQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterViewQuery" ):
                return visitor.visitAlterViewQuery(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None # IdentifierContext
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class CreateTempViewUsingContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)
        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTempViewUsing" ):
                listener.enterCreateTempViewUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTempViewUsing" ):
                listener.exitCreateTempViewUsing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTempViewUsing" ):
                return visitor.visitCreateTempViewUsing(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # TableIdentifierContext
            self.to = None # TableIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTable" ):
                return visitor.visitRenameTable(self)
            else:
                return visitor.visitChildren(self)


    class FailNativeCommandContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def unsupportedHiveNativeCommands(self):
            return self.getTypedRuleContext(SqlBaseParser.UnsupportedHiveNativeCommandsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFailNativeCommand" ):
                listener.enterFailNativeCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFailNativeCommand" ):
                listener.exitFailNativeCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFailNativeCommand" ):
                return visitor.visitFailNativeCommand(self)
            else:
                return visitor.visitChildren(self)


    class ClearCacheContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)
        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClearCache" ):
                listener.enterClearCache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClearCache" ):
                listener.exitClearCache(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClearCache" ):
                return visitor.visitClearCache(self)
            else:
                return visitor.visitChildren(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None # IdentifierContext
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTables" ):
                return visitor.visitShowTables(self)
            else:
                return visitor.visitChildren(self)


    class RecoverPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)
        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecoverPartitions" ):
                listener.enterRecoverPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecoverPartitions" ):
                listener.exitRecoverPartitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecoverPartitions" ):
                return visitor.visitRecoverPartitions(self)
            else:
                return visitor.visitChildren(self)


    class RenameTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # PartitionSpecContext
            self.to = None # PartitionSpecContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTablePartition" ):
                listener.enterRenameTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTablePartition" ):
                listener.exitRenameTablePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTablePartition" ):
                return visitor.visitRenameTablePartition(self)
            else:
                return visitor.visitChildren(self)


    class RepairTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)
        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairTable" ):
                listener.enterRepairTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairTable" ):
                listener.exitRepairTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepairTable" ):
                return visitor.visitRepairTable(self)
            else:
                return visitor.visitChildren(self)


    class RefreshResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshResource" ):
                listener.enterRefreshResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshResource" ):
                listener.exitRefreshResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshResource" ):
                return visitor.visitRefreshResource(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateTable" ):
                return visitor.visitShowCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None # IdentifierContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.FROM)
            else:
                return self.getToken(SqlBaseParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IN)
            else:
                return self.getToken(SqlBaseParser.IN, i)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowColumns" ):
                return visitor.visitShowColumns(self)
            else:
                return visitor.visitChildren(self)


    class AddTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def partitionSpecLocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecLocationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecLocationContext,i)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTablePartition" ):
                listener.enterAddTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTablePartition" ):
                listener.exitAddTablePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddTablePartition" ):
                return visitor.visitAddTablePartition(self)
            else:
                return visitor.visitChildren(self)


    class RefreshTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshTable" ):
                listener.enterRefreshTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshTable" ):
                listener.exitRefreshTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshTable" ):
                return visitor.visitRefreshTable(self)
            else:
                return visitor.visitChildren(self)


    class ManageResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterManageResource" ):
                listener.enterManageResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitManageResource" ):
                listener.exitManageResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitManageResource" ):
                return visitor.visitManageResource(self)
            else:
                return visitor.visitChildren(self)


    class CreateDatabaseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDatabase" ):
                return visitor.visitCreateDatabase(self)
            else:
                return visitor.visitChildren(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)
        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze" ):
                listener.enterAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze" ):
                listener.exitAnalyze(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyze" ):
                return visitor.visitAnalyze(self)
            else:
                return visitor.visitChildren(self)


    class CreateHiveTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None # ColTypeListContext
            self.comment = None # Token
            self.partitionColumns = None # ColTypeListContext
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableHeaderContext,0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def bucketSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.BucketSpecContext,0)

        def skewSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.SkewSpecContext,0)

        def rowFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,0)

        def createFileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext,0)

        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def colTypeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColTypeListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,i)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateHiveTable" ):
                listener.enterCreateHiveTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateHiveTable" ):
                listener.exitCreateHiveTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateHiveTable" ):
                return visitor.visitCreateHiveTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.className = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ResourceContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ResourceContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFunction" ):
                return visitor.visitCreateFunction(self)
            else:
                return visitor.visitChildren(self)


    class ShowTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None # IdentifierContext
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTable" ):
                listener.enterShowTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTable" ):
                listener.exitShowTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTable" ):
                return visitor.visitShowTable(self)
            else:
                return visitor.visitChildren(self)


    class SetDatabasePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetDatabaseProperties" ):
                listener.enterSetDatabaseProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetDatabaseProperties" ):
                listener.exitSetDatabaseProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetDatabaseProperties" ):
                return visitor.visitSetDatabaseProperties(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.options = None # TablePropertyListContext
            self.partitionColumnNames = None # IdentifierListContext
            self.comment = None # Token
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableHeaderContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def bucketSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.BucketSpecContext,0)

        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTable" ):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class DescribeTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.option = None # Token
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def describeColName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeColNameContext,0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeTable" ):
                listener.enterDescribeTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeTable" ):
                listener.exitDescribeTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeTable" ):
                return visitor.visitDescribeTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableLikeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.target = None # TableIdentifierContext
            self.source = None # TableIdentifierContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableLike" ):
                listener.enterCreateTableLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableLike" ):
                listener.exitCreateTableLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableLike" ):
                return visitor.visitCreateTableLike(self)
            else:
                return visitor.visitChildren(self)


    class UncacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncacheTable" ):
                listener.enterUncacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncacheTable" ):
                listener.exitUncacheTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUncacheTable" ):
                return visitor.visitUncacheTable(self)
            else:
                return visitor.visitChildren(self)


    class DropFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropFunction" ):
                return visitor.visitDropFunction(self)
            else:
                return visitor.visitChildren(self)


    class LoadDataContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)
        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)
        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadData" ):
                listener.enterLoadData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadData" ):
                listener.exitLoadData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadData" ):
                return visitor.visitLoadData(self)
            else:
                return visitor.visitChildren(self)


    class ShowPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowPartitions" ):
                listener.enterShowPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowPartitions" ):
                listener.exitShowPartitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowPartitions" ):
                return visitor.visitShowPartitions(self)
            else:
                return visitor.visitChildren(self)


    class DescribeFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def describeFuncName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeFuncNameContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFunction" ):
                listener.enterDescribeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFunction" ):
                listener.exitDescribeFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeFunction" ):
                return visitor.visitDescribeFunction(self)
            else:
                return visitor.visitChildren(self)


    class ChangeColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def colType(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def colPosition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColPositionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeColumn" ):
                listener.enterChangeColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeColumn" ):
                listener.exitChangeColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChangeColumn" ):
                return visitor.visitChangeColumn(self)
            else:
                return visitor.visitChildren(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementDefault" ):
                listener.enterStatementDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementDefault" ):
                listener.exitStatementDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementDefault" ):
                return visitor.visitStatementDefault(self)
            else:
                return visitor.visitChildren(self)


    class TruncateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncateTable" ):
                return visitor.visitTruncateTable(self)
            else:
                return visitor.visitChildren(self)


    class SetTableSerDeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableSerDe" ):
                listener.enterSetTableSerDe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableSerDe" ):
                listener.exitSetTableSerDe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableSerDe" ):
                return visitor.visitSetTableSerDe(self)
            else:
                return visitor.visitChildren(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def identifierCommentList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierCommentListContext,0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateView" ):
                return visitor.visitCreateView(self)
            else:
                return visitor.visitChildren(self)


    class DropTablePartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTablePartitions" ):
                listener.enterDropTablePartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTablePartitions" ):
                listener.exitDropTablePartitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTablePartitions" ):
                return visitor.visitDropTablePartitions(self)
            else:
                return visitor.visitChildren(self)


    class SetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetConfiguration" ):
                listener.enterSetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetConfiguration" ):
                listener.exitSetConfiguration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetConfiguration" ):
                return visitor.visitSetConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)


    class ShowDatabasesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowDatabases" ):
                listener.enterShowDatabases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowDatabases" ):
                listener.exitShowDatabases(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowDatabases" ):
                return visitor.visitShowDatabases(self)
            else:
                return visitor.visitChildren(self)


    class ShowTblPropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # TableIdentifierContext
            self.key = None # TablePropertyKeyContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def tablePropertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyKeyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTblProperties" ):
                listener.enterShowTblProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTblProperties" ):
                listener.exitShowTblProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTblProperties" ):
                return visitor.visitShowTblProperties(self)
            else:
                return visitor.visitChildren(self)


    class UnsetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsetTableProperties" ):
                listener.enterUnsetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsetTableProperties" ):
                listener.exitUnsetTableProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsetTableProperties" ):
                return visitor.visitUnsetTableProperties(self)
            else:
                return visitor.visitChildren(self)


    class SetTableLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableLocation" ):
                listener.enterSetTableLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableLocation" ):
                listener.exitSetTableLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableLocation" ):
                return visitor.visitSetTableLocation(self)
            else:
                return visitor.visitChildren(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctions" ):
                listener.enterShowFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctions" ):
                listener.exitShowFunctions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowFunctions" ):
                return visitor.visitShowFunctions(self)
            else:
                return visitor.visitChildren(self)


    class CacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheTable" ):
                listener.enterCacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheTable" ):
                listener.exitCacheTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCacheTable" ):
                return visitor.visitCacheTable(self)
            else:
                return visitor.visitChildren(self)


    class AddTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None # ColTypeListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTableColumns" ):
                listener.enterAddTableColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTableColumns" ):
                listener.exitAddTableColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddTableColumns" ):
                return visitor.visitAddTableColumns(self)
            else:
                return visitor.visitChildren(self)


    class SetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableProperties" ):
                listener.enterSetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableProperties" ):
                listener.exitSetTableProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableProperties" ):
                return visitor.visitSetTableProperties(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = SqlBaseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 211
                self.query()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 212
                self.match(SqlBaseParser.USE)
                self.state = 213
                localctx.db = self.identifier()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CreateDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 214
                self.match(SqlBaseParser.CREATE)
                self.state = 215
                self.match(SqlBaseParser.DATABASE)
                self.state = 219
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 216
                    self.match(SqlBaseParser.IF)
                    self.state = 217
                    self.match(SqlBaseParser.NOT)
                    self.state = 218
                    self.match(SqlBaseParser.EXISTS)


                self.state = 221
                self.identifier()
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 222
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 223
                    localctx.comment = self.match(SqlBaseParser.STRING)


                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184:
                    self.state = 226
                    self.locationSpec()


                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 229
                    self.match(SqlBaseParser.WITH)
                    self.state = 230
                    self.match(SqlBaseParser.DBPROPERTIES)
                    self.state = 231
                    self.tablePropertyList()


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SetDatabasePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 234
                self.match(SqlBaseParser.ALTER)
                self.state = 235
                self.match(SqlBaseParser.DATABASE)
                self.state = 236
                self.identifier()
                self.state = 237
                self.match(SqlBaseParser.SET)
                self.state = 238
                self.match(SqlBaseParser.DBPROPERTIES)
                self.state = 239
                self.tablePropertyList()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.DropDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 241
                self.match(SqlBaseParser.DROP)
                self.state = 242
                self.match(SqlBaseParser.DATABASE)
                self.state = 245
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                if la_ == 1:
                    self.state = 243
                    self.match(SqlBaseParser.IF)
                    self.state = 244
                    self.match(SqlBaseParser.EXISTS)


                self.state = 247
                self.identifier()
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==193 or _la==194:
                    self.state = 248
                    _la = self._input.LA(1)
                    if not(_la==193 or _la==194):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 251
                self.createTableHeader()
                self.state = 256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 252
                    self.match(SqlBaseParser.T__0)
                    self.state = 253
                    self.colTypeList()
                    self.state = 254
                    self.match(SqlBaseParser.T__1)


                self.state = 258
                self.tableProvider()
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==176:
                    self.state = 259
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 260
                    localctx.options = self.tablePropertyList()


                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==208:
                    self.state = 263
                    self.match(SqlBaseParser.PARTITIONED)
                    self.state = 264
                    self.match(SqlBaseParser.BY)
                    self.state = 265
                    localctx.partitionColumnNames = self.identifierList()


                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 268
                    self.bucketSpec()


                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184:
                    self.state = 271
                    self.locationSpec()


                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 274
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 275
                    localctx.comment = self.match(SqlBaseParser.STRING)


                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 11266) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 17179869259) != 0) or _la==151:
                    self.state = 279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13:
                        self.state = 278
                        self.match(SqlBaseParser.AS)


                    self.state = 281
                    self.query()


                pass

            elif la_ == 7:
                localctx = SqlBaseParser.CreateHiveTableContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 284
                self.createTableHeader()
                self.state = 289
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 285
                    self.match(SqlBaseParser.T__0)
                    self.state = 286
                    localctx.columns = self.colTypeList()
                    self.state = 287
                    self.match(SqlBaseParser.T__1)


                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 291
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 292
                    localctx.comment = self.match(SqlBaseParser.STRING)


                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==208:
                    self.state = 295
                    self.match(SqlBaseParser.PARTITIONED)
                    self.state = 296
                    self.match(SqlBaseParser.BY)
                    self.state = 297
                    self.match(SqlBaseParser.T__0)
                    self.state = 298
                    localctx.partitionColumns = self.colTypeList()
                    self.state = 299
                    self.match(SqlBaseParser.T__1)


                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 303
                    self.bucketSpec()


                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==181:
                    self.state = 306
                    self.skewSpec()


                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 309
                    self.rowFormat()


                self.state = 313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==182:
                    self.state = 312
                    self.createFileFormat()


                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184:
                    self.state = 315
                    self.locationSpec()


                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 318
                    self.match(SqlBaseParser.TBLPROPERTIES)
                    self.state = 319
                    self.tablePropertyList()


                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 11266) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 17179869259) != 0) or _la==151:
                    self.state = 323
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13:
                        self.state = 322
                        self.match(SqlBaseParser.AS)


                    self.state = 325
                    self.query()


                pass

            elif la_ == 8:
                localctx = SqlBaseParser.CreateTableLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 328
                self.match(SqlBaseParser.CREATE)
                self.state = 329
                self.match(SqlBaseParser.TABLE)
                self.state = 333
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 330
                    self.match(SqlBaseParser.IF)
                    self.state = 331
                    self.match(SqlBaseParser.NOT)
                    self.state = 332
                    self.match(SqlBaseParser.EXISTS)


                self.state = 335
                localctx.target = self.tableIdentifier()
                self.state = 336
                self.match(SqlBaseParser.LIKE)
                self.state = 337
                localctx.source = self.tableIdentifier()
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==184:
                    self.state = 338
                    self.locationSpec()


                pass

            elif la_ == 9:
                localctx = SqlBaseParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 341
                self.match(SqlBaseParser.ANALYZE)
                self.state = 342
                self.match(SqlBaseParser.TABLE)
                self.state = 343
                self.tableIdentifier()
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 344
                    self.partitionSpec()


                self.state = 347
                self.match(SqlBaseParser.COMPUTE)
                self.state = 348
                self.match(SqlBaseParser.STATISTICS)
                self.state = 353
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 349
                    self.identifier()

                elif la_ == 2:
                    self.state = 350
                    self.match(SqlBaseParser.FOR)
                    self.state = 351
                    self.match(SqlBaseParser.COLUMNS)
                    self.state = 352
                    self.identifierSeq()


                pass

            elif la_ == 10:
                localctx = SqlBaseParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 355
                self.match(SqlBaseParser.ALTER)
                self.state = 356
                self.match(SqlBaseParser.TABLE)
                self.state = 357
                self.tableIdentifier()
                self.state = 358
                self.match(SqlBaseParser.ADD)
                self.state = 359
                self.match(SqlBaseParser.COLUMNS)
                self.state = 360
                self.match(SqlBaseParser.T__0)
                self.state = 361
                localctx.columns = self.colTypeList()
                self.state = 362
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 364
                self.match(SqlBaseParser.ALTER)
                self.state = 365
                _la = self._input.LA(1)
                if not(_la==77 or _la==78):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 366
                localctx.from_ = self.tableIdentifier()
                self.state = 367
                self.match(SqlBaseParser.RENAME)
                self.state = 368
                self.match(SqlBaseParser.TO)
                self.state = 369
                localctx.to = self.tableIdentifier()
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 371
                self.match(SqlBaseParser.ALTER)
                self.state = 372
                _la = self._input.LA(1)
                if not(_la==77 or _la==78):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 373
                self.tableIdentifier()
                self.state = 374
                self.match(SqlBaseParser.SET)
                self.state = 375
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 376
                self.tablePropertyList()
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.UnsetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 378
                self.match(SqlBaseParser.ALTER)
                self.state = 379
                _la = self._input.LA(1)
                if not(_la==77 or _la==78):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 380
                self.tableIdentifier()
                self.state = 381
                self.match(SqlBaseParser.UNSET)
                self.state = 382
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123:
                    self.state = 383
                    self.match(SqlBaseParser.IF)
                    self.state = 384
                    self.match(SqlBaseParser.EXISTS)


                self.state = 387
                self.tablePropertyList()
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.ChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 389
                self.match(SqlBaseParser.ALTER)
                self.state = 390
                self.match(SqlBaseParser.TABLE)
                self.state = 391
                self.tableIdentifier()
                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 392
                    self.partitionSpec()


                self.state = 395
                self.match(SqlBaseParser.CHANGE)
                self.state = 397
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 396
                    self.match(SqlBaseParser.COLUMN)


                self.state = 399
                self.identifier()
                self.state = 400
                self.colType()
                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70 or _la==71:
                    self.state = 401
                    self.colPosition()


                pass

            elif la_ == 15:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 404
                self.match(SqlBaseParser.ALTER)
                self.state = 405
                self.match(SqlBaseParser.TABLE)
                self.state = 406
                self.tableIdentifier()
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 407
                    self.partitionSpec()


                self.state = 410
                self.match(SqlBaseParser.SET)
                self.state = 411
                self.match(SqlBaseParser.SERDE)
                self.state = 412
                self.match(SqlBaseParser.STRING)
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 413
                    self.match(SqlBaseParser.WITH)
                    self.state = 414
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 415
                    self.tablePropertyList()


                pass

            elif la_ == 16:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 418
                self.match(SqlBaseParser.ALTER)
                self.state = 419
                self.match(SqlBaseParser.TABLE)
                self.state = 420
                self.tableIdentifier()
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 421
                    self.partitionSpec()


                self.state = 424
                self.match(SqlBaseParser.SET)
                self.state = 425
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 426
                self.tablePropertyList()
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 428
                self.match(SqlBaseParser.ALTER)
                self.state = 429
                self.match(SqlBaseParser.TABLE)
                self.state = 430
                self.tableIdentifier()
                self.state = 431
                self.match(SqlBaseParser.ADD)
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123:
                    self.state = 432
                    self.match(SqlBaseParser.IF)
                    self.state = 433
                    self.match(SqlBaseParser.NOT)
                    self.state = 434
                    self.match(SqlBaseParser.EXISTS)


                self.state = 438 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 437
                    self.partitionSpecLocation()
                    self.state = 440 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==63):
                        break

                pass

            elif la_ == 18:
                localctx = SqlBaseParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 442
                self.match(SqlBaseParser.ALTER)
                self.state = 443
                self.match(SqlBaseParser.VIEW)
                self.state = 444
                self.tableIdentifier()
                self.state = 445
                self.match(SqlBaseParser.ADD)
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123:
                    self.state = 446
                    self.match(SqlBaseParser.IF)
                    self.state = 447
                    self.match(SqlBaseParser.NOT)
                    self.state = 448
                    self.match(SqlBaseParser.EXISTS)


                self.state = 452 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 451
                    self.partitionSpec()
                    self.state = 454 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==63):
                        break

                pass

            elif la_ == 19:
                localctx = SqlBaseParser.RenameTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 456
                self.match(SqlBaseParser.ALTER)
                self.state = 457
                self.match(SqlBaseParser.TABLE)
                self.state = 458
                self.tableIdentifier()
                self.state = 459
                localctx.from_ = self.partitionSpec()
                self.state = 460
                self.match(SqlBaseParser.RENAME)
                self.state = 461
                self.match(SqlBaseParser.TO)
                self.state = 462
                localctx.to = self.partitionSpec()
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 464
                self.match(SqlBaseParser.ALTER)
                self.state = 465
                self.match(SqlBaseParser.TABLE)
                self.state = 466
                self.tableIdentifier()
                self.state = 467
                self.match(SqlBaseParser.DROP)
                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123:
                    self.state = 468
                    self.match(SqlBaseParser.IF)
                    self.state = 469
                    self.match(SqlBaseParser.EXISTS)


                self.state = 472
                self.partitionSpec()
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==3:
                    self.state = 473
                    self.match(SqlBaseParser.T__2)
                    self.state = 474
                    self.partitionSpec()
                    self.state = 479
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==197:
                    self.state = 480
                    self.match(SqlBaseParser.PURGE)


                pass

            elif la_ == 21:
                localctx = SqlBaseParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 483
                self.match(SqlBaseParser.ALTER)
                self.state = 484
                self.match(SqlBaseParser.VIEW)
                self.state = 485
                self.tableIdentifier()
                self.state = 486
                self.match(SqlBaseParser.DROP)
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123:
                    self.state = 487
                    self.match(SqlBaseParser.IF)
                    self.state = 488
                    self.match(SqlBaseParser.EXISTS)


                self.state = 491
                self.partitionSpec()
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==3:
                    self.state = 492
                    self.match(SqlBaseParser.T__2)
                    self.state = 493
                    self.partitionSpec()
                    self.state = 498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 22:
                localctx = SqlBaseParser.SetTableLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 499
                self.match(SqlBaseParser.ALTER)
                self.state = 500
                self.match(SqlBaseParser.TABLE)
                self.state = 501
                self.tableIdentifier()
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 502
                    self.partitionSpec()


                self.state = 505
                self.match(SqlBaseParser.SET)
                self.state = 506
                self.locationSpec()
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.RecoverPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 508
                self.match(SqlBaseParser.ALTER)
                self.state = 509
                self.match(SqlBaseParser.TABLE)
                self.state = 510
                self.tableIdentifier()
                self.state = 511
                self.match(SqlBaseParser.RECOVER)
                self.state = 512
                self.match(SqlBaseParser.PARTITIONS)
                pass

            elif la_ == 24:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 514
                self.match(SqlBaseParser.DROP)
                self.state = 515
                self.match(SqlBaseParser.TABLE)
                self.state = 518
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 516
                    self.match(SqlBaseParser.IF)
                    self.state = 517
                    self.match(SqlBaseParser.EXISTS)


                self.state = 520
                self.tableIdentifier()
                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==197:
                    self.state = 521
                    self.match(SqlBaseParser.PURGE)


                pass

            elif la_ == 25:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 524
                self.match(SqlBaseParser.DROP)
                self.state = 525
                self.match(SqlBaseParser.VIEW)
                self.state = 528
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 526
                    self.match(SqlBaseParser.IF)
                    self.state = 527
                    self.match(SqlBaseParser.EXISTS)


                self.state = 530
                self.tableIdentifier()
                pass

            elif la_ == 26:
                localctx = SqlBaseParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 531
                self.match(SqlBaseParser.CREATE)
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 532
                    self.match(SqlBaseParser.OR)
                    self.state = 533
                    self.match(SqlBaseParser.REPLACE)


                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==174 or _la==175:
                    self.state = 537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==174:
                        self.state = 536
                        self.match(SqlBaseParser.GLOBAL)


                    self.state = 539
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 542
                self.match(SqlBaseParser.VIEW)
                self.state = 546
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 543
                    self.match(SqlBaseParser.IF)
                    self.state = 544
                    self.match(SqlBaseParser.NOT)
                    self.state = 545
                    self.match(SqlBaseParser.EXISTS)


                self.state = 548
                self.tableIdentifier()
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 549
                    self.identifierCommentList()


                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 552
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 553
                    self.match(SqlBaseParser.STRING)


                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==208:
                    self.state = 556
                    self.match(SqlBaseParser.PARTITIONED)
                    self.state = 557
                    self.match(SqlBaseParser.ON)
                    self.state = 558
                    self.identifierList()


                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 561
                    self.match(SqlBaseParser.TBLPROPERTIES)
                    self.state = 562
                    self.tablePropertyList()


                self.state = 565
                self.match(SqlBaseParser.AS)
                self.state = 566
                self.query()
                pass

            elif la_ == 27:
                localctx = SqlBaseParser.CreateTempViewUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 568
                self.match(SqlBaseParser.CREATE)
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 569
                    self.match(SqlBaseParser.OR)
                    self.state = 570
                    self.match(SqlBaseParser.REPLACE)


                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==174:
                    self.state = 573
                    self.match(SqlBaseParser.GLOBAL)


                self.state = 576
                self.match(SqlBaseParser.TEMPORARY)
                self.state = 577
                self.match(SqlBaseParser.VIEW)
                self.state = 578
                self.tableIdentifier()
                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 579
                    self.match(SqlBaseParser.T__0)
                    self.state = 580
                    self.colTypeList()
                    self.state = 581
                    self.match(SqlBaseParser.T__1)


                self.state = 585
                self.tableProvider()
                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==176:
                    self.state = 586
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 587
                    self.tablePropertyList()


                pass

            elif la_ == 28:
                localctx = SqlBaseParser.AlterViewQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 590
                self.match(SqlBaseParser.ALTER)
                self.state = 591
                self.match(SqlBaseParser.VIEW)
                self.state = 592
                self.tableIdentifier()
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 593
                    self.match(SqlBaseParser.AS)


                self.state = 596
                self.query()
                pass

            elif la_ == 29:
                localctx = SqlBaseParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 598
                self.match(SqlBaseParser.CREATE)
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==175:
                    self.state = 599
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 602
                self.match(SqlBaseParser.FUNCTION)
                self.state = 603
                self.qualifiedName()
                self.state = 604
                self.match(SqlBaseParser.AS)
                self.state = 605
                localctx.className = self.match(SqlBaseParser.STRING)
                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 606
                    self.match(SqlBaseParser.USING)
                    self.state = 607
                    self.resource()
                    self.state = 612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==3:
                        self.state = 608
                        self.match(SqlBaseParser.T__2)
                        self.state = 609
                        self.resource()
                        self.state = 614
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 30:
                localctx = SqlBaseParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 617
                self.match(SqlBaseParser.DROP)
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==175:
                    self.state = 618
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 621
                self.match(SqlBaseParser.FUNCTION)
                self.state = 624
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 622
                    self.match(SqlBaseParser.IF)
                    self.state = 623
                    self.match(SqlBaseParser.EXISTS)


                self.state = 626
                self.qualifiedName()
                pass

            elif la_ == 31:
                localctx = SqlBaseParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 627
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 7) != 0) or _la==167 or _la==173:
                    self.state = 628
                    _la = self._input.LA(1)
                    if not(((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 7) != 0) or _la==167 or _la==173):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 631
                self.statement()
                pass

            elif la_ == 32:
                localctx = SqlBaseParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 632
                self.match(SqlBaseParser.SHOW)
                self.state = 633
                self.match(SqlBaseParser.TABLES)
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11 or _la==29:
                    self.state = 634
                    _la = self._input.LA(1)
                    if not(_la==11 or _la==29):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 635
                    localctx.db = self.identifier()


                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34 or _la==233:
                    self.state = 639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==34:
                        self.state = 638
                        self.match(SqlBaseParser.LIKE)


                    self.state = 641
                    localctx.pattern = self.match(SqlBaseParser.STRING)


                pass

            elif la_ == 33:
                localctx = SqlBaseParser.ShowTableContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 644
                self.match(SqlBaseParser.SHOW)
                self.state = 645
                self.match(SqlBaseParser.TABLE)
                self.state = 646
                self.match(SqlBaseParser.EXTENDED)
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11 or _la==29:
                    self.state = 647
                    _la = self._input.LA(1)
                    if not(_la==11 or _la==29):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 648
                    localctx.db = self.identifier()


                self.state = 651
                self.match(SqlBaseParser.LIKE)
                self.state = 652
                localctx.pattern = self.match(SqlBaseParser.STRING)
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 653
                    self.partitionSpec()


                pass

            elif la_ == 34:
                localctx = SqlBaseParser.ShowDatabasesContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 656
                self.match(SqlBaseParser.SHOW)
                self.state = 657
                self.match(SqlBaseParser.DATABASES)
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 658
                    self.match(SqlBaseParser.LIKE)
                    self.state = 659
                    localctx.pattern = self.match(SqlBaseParser.STRING)


                pass

            elif la_ == 35:
                localctx = SqlBaseParser.ShowTblPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 662
                self.match(SqlBaseParser.SHOW)
                self.state = 663
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 664
                localctx.table = self.tableIdentifier()
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 665
                    self.match(SqlBaseParser.T__0)
                    self.state = 666
                    localctx.key = self.tablePropertyKey()
                    self.state = 667
                    self.match(SqlBaseParser.T__1)


                pass

            elif la_ == 36:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 671
                self.match(SqlBaseParser.SHOW)
                self.state = 672
                self.match(SqlBaseParser.COLUMNS)
                self.state = 673
                _la = self._input.LA(1)
                if not(_la==11 or _la==29):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 674
                self.tableIdentifier()
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11 or _la==29:
                    self.state = 675
                    _la = self._input.LA(1)
                    if not(_la==11 or _la==29):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 676
                    localctx.db = self.identifier()


                pass

            elif la_ == 37:
                localctx = SqlBaseParser.ShowPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 679
                self.match(SqlBaseParser.SHOW)
                self.state = 680
                self.match(SqlBaseParser.PARTITIONS)
                self.state = 681
                self.tableIdentifier()
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 682
                    self.partitionSpec()


                pass

            elif la_ == 38:
                localctx = SqlBaseParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 685
                self.match(SqlBaseParser.SHOW)
                self.state = 687
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 686
                    self.identifier()


                self.state = 689
                self.match(SqlBaseParser.FUNCTIONS)
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1024) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 720575940379279359) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & -31) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & 6605659701247) != 0):
                    self.state = 691
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                    if la_ == 1:
                        self.state = 690
                        self.match(SqlBaseParser.LIKE)


                    self.state = 695
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 137, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 242, 243]:
                        self.state = 693
                        self.qualifiedName()
                        pass
                    elif token in [233]:
                        self.state = 694
                        localctx.pattern = self.match(SqlBaseParser.STRING)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 39:
                localctx = SqlBaseParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 699
                self.match(SqlBaseParser.SHOW)
                self.state = 700
                self.match(SqlBaseParser.CREATE)
                self.state = 701
                self.match(SqlBaseParser.TABLE)
                self.state = 702
                self.tableIdentifier()
                pass

            elif la_ == 40:
                localctx = SqlBaseParser.DescribeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 703
                _la = self._input.LA(1)
                if not(_la==42 or _la==83):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 704
                self.match(SqlBaseParser.FUNCTION)
                self.state = 706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 705
                    self.match(SqlBaseParser.EXTENDED)


                self.state = 708
                self.describeFuncName()
                pass

            elif la_ == 41:
                localctx = SqlBaseParser.DescribeDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 709
                _la = self._input.LA(1)
                if not(_la==42 or _la==83):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 710
                self.match(SqlBaseParser.DATABASE)
                self.state = 712
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 711
                    self.match(SqlBaseParser.EXTENDED)


                self.state = 714
                self.identifier()
                pass

            elif la_ == 42:
                localctx = SqlBaseParser.DescribeTableContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 715
                _la = self._input.LA(1)
                if not(_la==42 or _la==83):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 717
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 716
                    self.match(SqlBaseParser.TABLE)


                self.state = 720
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 719
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==167 or _la==173):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 722
                self.tableIdentifier()
                self.state = 724
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 723
                    self.partitionSpec()


                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1024) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 720575940379279359) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & -31) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & 6601364733951) != 0):
                    self.state = 726
                    self.describeColName()


                pass

            elif la_ == 43:
                localctx = SqlBaseParser.RefreshTableContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 729
                self.match(SqlBaseParser.REFRESH)
                self.state = 730
                self.match(SqlBaseParser.TABLE)
                self.state = 731
                self.tableIdentifier()
                pass

            elif la_ == 44:
                localctx = SqlBaseParser.RefreshResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 732
                self.match(SqlBaseParser.REFRESH)
                self.state = 736
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 733
                        self.matchWildcard() 
                    self.state = 738
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                pass

            elif la_ == 45:
                localctx = SqlBaseParser.CacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 739
                self.match(SqlBaseParser.CACHE)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==172:
                    self.state = 740
                    self.match(SqlBaseParser.LAZY)


                self.state = 743
                self.match(SqlBaseParser.TABLE)
                self.state = 744
                self.tableIdentifier()
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 11266) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 17179869259) != 0) or _la==151:
                    self.state = 746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13:
                        self.state = 745
                        self.match(SqlBaseParser.AS)


                    self.state = 748
                    self.query()


                pass

            elif la_ == 46:
                localctx = SqlBaseParser.UncacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 751
                self.match(SqlBaseParser.UNCACHE)
                self.state = 752
                self.match(SqlBaseParser.TABLE)
                self.state = 755
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 753
                    self.match(SqlBaseParser.IF)
                    self.state = 754
                    self.match(SqlBaseParser.EXISTS)


                self.state = 757
                self.tableIdentifier()
                pass

            elif la_ == 47:
                localctx = SqlBaseParser.ClearCacheContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 758
                self.match(SqlBaseParser.CLEAR)
                self.state = 759
                self.match(SqlBaseParser.CACHE)
                pass

            elif la_ == 48:
                localctx = SqlBaseParser.LoadDataContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 760
                self.match(SqlBaseParser.LOAD)
                self.state = 761
                self.match(SqlBaseParser.DATA)
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==231:
                    self.state = 762
                    self.match(SqlBaseParser.LOCAL)


                self.state = 765
                self.match(SqlBaseParser.INPATH)
                self.state = 766
                localctx.path = self.match(SqlBaseParser.STRING)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==149:
                    self.state = 767
                    self.match(SqlBaseParser.OVERWRITE)


                self.state = 770
                self.match(SqlBaseParser.INTO)
                self.state = 771
                self.match(SqlBaseParser.TABLE)
                self.state = 772
                self.tableIdentifier()
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 773
                    self.partitionSpec()


                pass

            elif la_ == 49:
                localctx = SqlBaseParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 776
                self.match(SqlBaseParser.TRUNCATE)
                self.state = 777
                self.match(SqlBaseParser.TABLE)
                self.state = 778
                self.tableIdentifier()
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 779
                    self.partitionSpec()


                pass

            elif la_ == 50:
                localctx = SqlBaseParser.RepairTableContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 782
                self.match(SqlBaseParser.MSCK)
                self.state = 783
                self.match(SqlBaseParser.REPAIR)
                self.state = 784
                self.match(SqlBaseParser.TABLE)
                self.state = 785
                self.tableIdentifier()
                pass

            elif la_ == 51:
                localctx = SqlBaseParser.ManageResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 786
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==12 or _la==206):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 787
                self.identifier()
                self.state = 791
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 788
                        self.matchWildcard() 
                    self.state = 793
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                pass

            elif la_ == 52:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 794
                self.match(SqlBaseParser.SET)
                self.state = 795
                self.match(SqlBaseParser.ROLE)
                self.state = 799
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 796
                        self.matchWildcard() 
                    self.state = 801
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                pass

            elif la_ == 53:
                localctx = SqlBaseParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 802
                self.match(SqlBaseParser.SET)
                self.state = 806
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 803
                        self.matchWildcard() 
                    self.state = 808
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                pass

            elif la_ == 54:
                localctx = SqlBaseParser.ResetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 809
                self.match(SqlBaseParser.RESET)
                pass

            elif la_ == 55:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 810
                self.unsupportedHiveNativeCommands()
                self.state = 814
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 811
                        self.matchWildcard() 
                    self.state = 816
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsupportedHiveNativeCommandsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kw1 = None # Token
            self.kw2 = None # Token
            self.kw3 = None # Token
            self.kw4 = None # Token
            self.kw5 = None # Token
            self.kw6 = None # Token

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unsupportedHiveNativeCommands

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsupportedHiveNativeCommands" ):
                listener.enterUnsupportedHiveNativeCommands(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsupportedHiveNativeCommands" ):
                listener.exitUnsupportedHiveNativeCommands(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsupportedHiveNativeCommands" ):
                return visitor.visitUnsupportedHiveNativeCommands(self)
            else:
                return visitor.visitChildren(self)




    def unsupportedHiveNativeCommands(self):

        localctx = SqlBaseParser.UnsupportedHiveNativeCommandsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_unsupportedHiveNativeCommands)
        self._la = 0 # Token type
        try:
            self.state = 989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 820
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 821
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 822
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 823
                localctx.kw1 = self.match(SqlBaseParser.GRANT)
                self.state = 825
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 824
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 827
                localctx.kw1 = self.match(SqlBaseParser.REVOKE)
                self.state = 829
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 828
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 831
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 832
                localctx.kw2 = self.match(SqlBaseParser.GRANT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 833
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 834
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                self.state = 836
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 835
                    localctx.kw3 = self.match(SqlBaseParser.GRANT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 838
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 839
                localctx.kw2 = self.match(SqlBaseParser.PRINCIPALS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 840
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 841
                localctx.kw2 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 842
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 843
                localctx.kw2 = self.match(SqlBaseParser.CURRENT)
                self.state = 844
                localctx.kw3 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 845
                localctx.kw1 = self.match(SqlBaseParser.EXPORT)
                self.state = 846
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 847
                localctx.kw1 = self.match(SqlBaseParser.IMPORT)
                self.state = 848
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 849
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 850
                localctx.kw2 = self.match(SqlBaseParser.COMPACTIONS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 851
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 852
                localctx.kw2 = self.match(SqlBaseParser.CREATE)
                self.state = 853
                localctx.kw3 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 854
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 855
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTIONS)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 856
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 857
                localctx.kw2 = self.match(SqlBaseParser.INDEXES)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 858
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 859
                localctx.kw2 = self.match(SqlBaseParser.LOCKS)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 860
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 861
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 862
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 863
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 864
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 865
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 866
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 867
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 868
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 869
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 870
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 871
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 872
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 873
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 874
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 875
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 876
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 877
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 878
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 879
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 880
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 881
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 882
                self.tableIdentifier()
                self.state = 883
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 884
                localctx.kw4 = self.match(SqlBaseParser.CLUSTERED)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 886
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 887
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 888
                self.tableIdentifier()
                self.state = 889
                localctx.kw3 = self.match(SqlBaseParser.CLUSTERED)
                self.state = 890
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 892
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 893
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 894
                self.tableIdentifier()
                self.state = 895
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 896
                localctx.kw4 = self.match(SqlBaseParser.SORTED)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 898
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 899
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 900
                self.tableIdentifier()
                self.state = 901
                localctx.kw3 = self.match(SqlBaseParser.SKEWED)
                self.state = 902
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 904
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 905
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 906
                self.tableIdentifier()
                self.state = 907
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 908
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 910
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 911
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 912
                self.tableIdentifier()
                self.state = 913
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 914
                localctx.kw4 = self.match(SqlBaseParser.STORED)
                self.state = 915
                localctx.kw5 = self.match(SqlBaseParser.AS)
                self.state = 916
                localctx.kw6 = self.match(SqlBaseParser.DIRECTORIES)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 918
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 919
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 920
                self.tableIdentifier()
                self.state = 921
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 922
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                self.state = 923
                localctx.kw5 = self.match(SqlBaseParser.LOCATION)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 925
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 926
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 927
                self.tableIdentifier()
                self.state = 928
                localctx.kw3 = self.match(SqlBaseParser.EXCHANGE)
                self.state = 929
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 931
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 932
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 933
                self.tableIdentifier()
                self.state = 934
                localctx.kw3 = self.match(SqlBaseParser.ARCHIVE)
                self.state = 935
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 937
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 938
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 939
                self.tableIdentifier()
                self.state = 940
                localctx.kw3 = self.match(SqlBaseParser.UNARCHIVE)
                self.state = 941
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 943
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 944
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 945
                self.tableIdentifier()
                self.state = 946
                localctx.kw3 = self.match(SqlBaseParser.TOUCH)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 948
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 949
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 950
                self.tableIdentifier()
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 951
                    self.partitionSpec()


                self.state = 954
                localctx.kw3 = self.match(SqlBaseParser.COMPACT)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 956
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 957
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 958
                self.tableIdentifier()
                self.state = 960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 959
                    self.partitionSpec()


                self.state = 962
                localctx.kw3 = self.match(SqlBaseParser.CONCATENATE)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 964
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 965
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 966
                self.tableIdentifier()
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 967
                    self.partitionSpec()


                self.state = 970
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 971
                localctx.kw4 = self.match(SqlBaseParser.FILEFORMAT)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 973
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 974
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 975
                self.tableIdentifier()
                self.state = 977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 976
                    self.partitionSpec()


                self.state = 979
                localctx.kw3 = self.match(SqlBaseParser.REPLACE)
                self.state = 980
                localctx.kw4 = self.match(SqlBaseParser.COLUMNS)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 982
                localctx.kw1 = self.match(SqlBaseParser.START)
                self.state = 983
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTION)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 984
                localctx.kw1 = self.match(SqlBaseParser.COMMIT)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 985
                localctx.kw1 = self.match(SqlBaseParser.ROLLBACK)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 986
                localctx.kw1 = self.match(SqlBaseParser.DFS)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 987
                localctx.kw1 = self.match(SqlBaseParser.DELETE)
                self.state = 988
                localctx.kw2 = self.match(SqlBaseParser.FROM)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_createTableHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableHeader" ):
                listener.enterCreateTableHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableHeader" ):
                listener.exitCreateTableHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableHeader" ):
                return visitor.visitCreateTableHeader(self)
            else:
                return visitor.visitChildren(self)




    def createTableHeader(self):

        localctx = SqlBaseParser.CreateTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_createTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.match(SqlBaseParser.CREATE)
            self.state = 993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==175:
                self.state = 992
                self.match(SqlBaseParser.TEMPORARY)


            self.state = 996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==209:
                self.state = 995
                self.match(SqlBaseParser.EXTERNAL)


            self.state = 998
            self.match(SqlBaseParser.TABLE)
            self.state = 1002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 999
                self.match(SqlBaseParser.IF)
                self.state = 1000
                self.match(SqlBaseParser.NOT)
                self.state = 1001
                self.match(SqlBaseParser.EXISTS)


            self.state = 1004
            self.tableIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BucketSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def orderedIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.OrderedIdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_bucketSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBucketSpec" ):
                listener.enterBucketSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBucketSpec" ):
                listener.exitBucketSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBucketSpec" ):
                return visitor.visitBucketSpec(self)
            else:
                return visitor.visitChildren(self)




    def bucketSpec(self):

        localctx = SqlBaseParser.BucketSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_bucketSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self.match(SqlBaseParser.CLUSTERED)
            self.state = 1007
            self.match(SqlBaseParser.BY)
            self.state = 1008
            self.identifierList()
            self.state = 1012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==196:
                self.state = 1009
                self.match(SqlBaseParser.SORTED)
                self.state = 1010
                self.match(SqlBaseParser.BY)
                self.state = 1011
                self.orderedIdentifierList()


            self.state = 1014
            self.match(SqlBaseParser.INTO)
            self.state = 1015
            self.match(SqlBaseParser.INTEGER_VALUE)
            self.state = 1016
            self.match(SqlBaseParser.BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def constantList(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantListContext,0)


        def nestedConstantList(self):
            return self.getTypedRuleContext(SqlBaseParser.NestedConstantListContext,0)


        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_skewSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewSpec" ):
                listener.enterSkewSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewSpec" ):
                listener.exitSkewSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkewSpec" ):
                return visitor.visitSkewSpec(self)
            else:
                return visitor.visitChildren(self)




    def skewSpec(self):

        localctx = SqlBaseParser.SkewSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_skewSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(SqlBaseParser.SKEWED)
            self.state = 1019
            self.match(SqlBaseParser.BY)
            self.state = 1020
            self.identifierList()
            self.state = 1021
            self.match(SqlBaseParser.ON)
            self.state = 1024
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 1022
                self.constantList()
                pass

            elif la_ == 2:
                self.state = 1023
                self.nestedConstantList()
                pass


            self.state = 1029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1026
                self.match(SqlBaseParser.STORED)
                self.state = 1027
                self.match(SqlBaseParser.AS)
                self.state = 1028
                self.match(SqlBaseParser.DIRECTORIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_locationSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocationSpec" ):
                listener.enterLocationSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocationSpec" ):
                listener.exitLocationSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocationSpec" ):
                return visitor.visitLocationSpec(self)
            else:
                return visitor.visitChildren(self)




    def locationSpec(self):

        localctx = SqlBaseParser.LocationSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_locationSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.match(SqlBaseParser.LOCATION)
            self.state = 1032
            self.match(SqlBaseParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def ctes(self):
            return self.getTypedRuleContext(SqlBaseParser.CtesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = SqlBaseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 1034
                self.ctes()


            self.state = 1037
            self.queryNoWith()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_insertInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertInto" ):
                listener.enterInsertInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertInto" ):
                listener.exitInsertInto(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertInto" ):
                return visitor.visitInsertInto(self)
            else:
                return visitor.visitChildren(self)




    def insertInto(self):

        localctx = SqlBaseParser.InsertIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_insertInto)
        self._la = 0 # Token type
        try:
            self.state = 1060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                self.match(SqlBaseParser.INSERT)
                self.state = 1040
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1041
                self.match(SqlBaseParser.TABLE)
                self.state = 1042
                self.tableIdentifier()
                self.state = 1049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 1043
                    self.partitionSpec()
                    self.state = 1047
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==123:
                        self.state = 1044
                        self.match(SqlBaseParser.IF)
                        self.state = 1045
                        self.match(SqlBaseParser.NOT)
                        self.state = 1046
                        self.match(SqlBaseParser.EXISTS)




                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1051
                self.match(SqlBaseParser.INSERT)
                self.state = 1052
                self.match(SqlBaseParser.INTO)
                self.state = 1054
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 1053
                    self.match(SqlBaseParser.TABLE)


                self.state = 1056
                self.tableIdentifier()
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 1057
                    self.partitionSpec()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpecLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpecLocation" ):
                listener.enterPartitionSpecLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpecLocation" ):
                listener.exitPartitionSpecLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSpecLocation" ):
                return visitor.visitPartitionSpecLocation(self)
            else:
                return visitor.visitChildren(self)




    def partitionSpecLocation(self):

        localctx = SqlBaseParser.PartitionSpecLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_partitionSpecLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.partitionSpec()
            self.state = 1064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==184:
                self.state = 1063
                self.locationSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def partitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionValContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpec" ):
                listener.enterPartitionSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpec" ):
                listener.exitPartitionSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSpec" ):
                return visitor.visitPartitionSpec(self)
            else:
                return visitor.visitChildren(self)




    def partitionSpec(self):

        localctx = SqlBaseParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_partitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.match(SqlBaseParser.PARTITION)
            self.state = 1067
            self.match(SqlBaseParser.T__0)
            self.state = 1068
            self.partitionVal()
            self.state = 1073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 1069
                self.match(SqlBaseParser.T__2)
                self.state = 1070
                self.partitionVal()
                self.state = 1075
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1076
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionVal" ):
                listener.enterPartitionVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionVal" ):
                listener.exitPartitionVal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionVal" ):
                return visitor.visitPartitionVal(self)
            else:
                return visitor.visitChildren(self)




    def partitionVal(self):

        localctx = SqlBaseParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_partitionVal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.identifier()
            self.state = 1081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 1079
                self.match(SqlBaseParser.EQ)
                self.state = 1080
                self.constant()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeFuncNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)


        def arithmeticOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ArithmeticOperatorContext,0)


        def predicateOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateOperatorContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeFuncName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFuncName" ):
                listener.enterDescribeFuncName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFuncName" ):
                listener.exitDescribeFuncName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeFuncName" ):
                return visitor.visitDescribeFuncName(self)
            else:
                return visitor.visitChildren(self)




    def describeFuncName(self):

        localctx = SqlBaseParser.DescribeFuncNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_describeFuncName)
        try:
            self.state = 1088
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1083
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1084
                self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1085
                self.comparisonOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1086
                self.arithmeticOperator()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1087
                self.predicateOperator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeColNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeColName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeColName" ):
                listener.enterDescribeColName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeColName" ):
                listener.exitDescribeColName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeColName" ):
                return visitor.visitDescribeColName(self)
            else:
                return visitor.visitChildren(self)




    def describeColName(self):

        localctx = SqlBaseParser.DescribeColNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_describeColName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            self.identifier()
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1091
                self.match(SqlBaseParser.T__3)
                self.state = 1094
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 137, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 242, 243]:
                    self.state = 1092
                    self.identifier()
                    pass
                elif token in [233]:
                    self.state = 1093
                    self.match(SqlBaseParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedQueryContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_ctes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtes" ):
                listener.enterCtes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtes" ):
                listener.exitCtes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtes" ):
                return visitor.visitCtes(self)
            else:
                return visitor.visitChildren(self)




    def ctes(self):

        localctx = SqlBaseParser.CtesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_ctes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.match(SqlBaseParser.WITH)
            self.state = 1102
            self.namedQuery()
            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 1103
                self.match(SqlBaseParser.T__2)
                self.state = 1104
                self.namedQuery()
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedQuery" ):
                return visitor.visitNamedQuery(self)
            else:
                return visitor.visitChildren(self)




    def namedQuery(self):

        localctx = SqlBaseParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            localctx.name = self.identifier()
            self.state = 1112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1111
                self.match(SqlBaseParser.AS)


            self.state = 1114
            self.match(SqlBaseParser.T__0)
            self.state = 1115
            self.query()
            self.state = 1116
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableProviderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableProvider

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProvider" ):
                listener.enterTableProvider(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProvider" ):
                listener.exitTableProvider(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableProvider" ):
                return visitor.visitTableProvider(self)
            else:
                return visitor.visitChildren(self)




    def tableProvider(self):

        localctx = SqlBaseParser.TableProviderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_tableProvider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self.match(SqlBaseParser.USING)
            self.state = 1119
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TablePropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TablePropertyContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tablePropertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyList" ):
                listener.enterTablePropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyList" ):
                listener.exitTablePropertyList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyList" ):
                return visitor.visitTablePropertyList(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyList(self):

        localctx = SqlBaseParser.TablePropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_tablePropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.match(SqlBaseParser.T__0)
            self.state = 1122
            self.tableProperty()
            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 1123
                self.match(SqlBaseParser.T__2)
                self.state = 1124
                self.tableProperty()
                self.state = 1129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1130
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # TablePropertyKeyContext
            self.value = None # TablePropertyValueContext

        def tablePropertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyKeyContext,0)


        def tablePropertyValue(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyValueContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProperty" ):
                listener.enterTableProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProperty" ):
                listener.exitTableProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableProperty" ):
                return visitor.visitTableProperty(self)
            else:
                return visitor.visitChildren(self)




    def tableProperty(self):

        localctx = SqlBaseParser.TablePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_tableProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            localctx.key = self.tablePropertyKey()
            self.state = 1137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38 or _la==39 or _la==124 or ((((_la - 233)) & ~0x3f) == 0 and ((1 << (_la - 233)) & 97) != 0):
                self.state = 1134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==124:
                    self.state = 1133
                    self.match(SqlBaseParser.EQ)


                self.state = 1136
                localctx.value = self.tablePropertyValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tablePropertyKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyKey" ):
                listener.enterTablePropertyKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyKey" ):
                listener.exitTablePropertyKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyKey" ):
                return visitor.visitTablePropertyKey(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyKey(self):

        localctx = SqlBaseParser.TablePropertyKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_tablePropertyKey)
        self._la = 0 # Token type
        try:
            self.state = 1148
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 137, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 242, 243]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1139
                self.identifier()
                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1140
                    self.match(SqlBaseParser.T__3)
                    self.state = 1141
                    self.identifier()
                    self.state = 1146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [233]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1147
                self.match(SqlBaseParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tablePropertyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyValue" ):
                listener.enterTablePropertyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyValue" ):
                listener.exitTablePropertyValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyValue" ):
                return visitor.visitTablePropertyValue(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyValue(self):

        localctx = SqlBaseParser.TablePropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_tablePropertyValue)
        try:
            self.state = 1154
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [238]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1150
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass
            elif token in [239]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1151
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass
            elif token in [38, 39]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1152
                self.booleanValue()
                pass
            elif token in [233]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1153
                self.match(SqlBaseParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_constantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantList" ):
                listener.enterConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantList" ):
                listener.exitConstantList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantList" ):
                return visitor.visitConstantList(self)
            else:
                return visitor.visitChildren(self)




    def constantList(self):

        localctx = SqlBaseParser.ConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_constantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self.match(SqlBaseParser.T__0)
            self.state = 1157
            self.constant()
            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 1158
                self.match(SqlBaseParser.T__2)
                self.state = 1159
                self.constant()
                self.state = 1164
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1165
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantListContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_nestedConstantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedConstantList" ):
                listener.enterNestedConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedConstantList" ):
                listener.exitNestedConstantList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedConstantList" ):
                return visitor.visitNestedConstantList(self)
            else:
                return visitor.visitChildren(self)




    def nestedConstantList(self):

        localctx = SqlBaseParser.NestedConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_nestedConstantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.match(SqlBaseParser.T__0)
            self.state = 1168
            self.constantList()
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 1169
                self.match(SqlBaseParser.T__2)
                self.state = 1170
                self.constantList()
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1176
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.FileFormatContext,0)


        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def storageHandler(self):
            return self.getTypedRuleContext(SqlBaseParser.StorageHandlerContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_createFileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFileFormat" ):
                listener.enterCreateFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFileFormat" ):
                listener.exitCreateFileFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFileFormat" ):
                return visitor.visitCreateFileFormat(self)
            else:
                return visitor.visitChildren(self)




    def createFileFormat(self):

        localctx = SqlBaseParser.CreateFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_createFileFormat)
        try:
            self.state = 1184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1178
                self.match(SqlBaseParser.STORED)
                self.state = 1179
                self.match(SqlBaseParser.AS)
                self.state = 1180
                self.fileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1181
                self.match(SqlBaseParser.STORED)
                self.state = 1182
                self.match(SqlBaseParser.BY)
                self.state = 1183
                self.storageHandler()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fileFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.inFmt = None # Token
            self.outFmt = None # Token
            self.copyFrom(ctx)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)
        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFileFormat" ):
                listener.enterTableFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFileFormat" ):
                listener.exitTableFileFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFileFormat" ):
                return visitor.visitTableFileFormat(self)
            else:
                return visitor.visitChildren(self)


    class GenericFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericFileFormat" ):
                listener.enterGenericFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericFileFormat" ):
                listener.exitGenericFileFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericFileFormat" ):
                return visitor.visitGenericFileFormat(self)
            else:
                return visitor.visitChildren(self)



    def fileFormat(self):

        localctx = SqlBaseParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_fileFormat)
        try:
            self.state = 1191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1186
                self.match(SqlBaseParser.INPUTFORMAT)
                self.state = 1187
                localctx.inFmt = self.match(SqlBaseParser.STRING)
                self.state = 1188
                self.match(SqlBaseParser.OUTPUTFORMAT)
                self.state = 1189
                localctx.outFmt = self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.GenericFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1190
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageHandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_storageHandler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageHandler" ):
                listener.enterStorageHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageHandler" ):
                listener.exitStorageHandler(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageHandler" ):
                return visitor.visitStorageHandler(self)
            else:
                return visitor.visitChildren(self)




    def storageHandler(self):

        localctx = SqlBaseParser.StorageHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_storageHandler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1193
            self.match(SqlBaseParser.STRING)
            self.state = 1197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1194
                self.match(SqlBaseParser.WITH)
                self.state = 1195
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 1196
                self.tablePropertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResource" ):
                return visitor.visitResource(self)
            else:
                return visitor.visitChildren(self)




    def resource(self):

        localctx = SqlBaseParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.identifier()
            self.state = 1200
            self.match(SqlBaseParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryNoWith

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SingleInsertQueryContext(QueryNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryTerm(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,0)

        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext,0)

        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleInsertQuery" ):
                listener.enterSingleInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleInsertQuery" ):
                listener.exitSingleInsertQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleInsertQuery" ):
                return visitor.visitSingleInsertQuery(self)
            else:
                return visitor.visitChildren(self)


    class MultiInsertQueryContext(QueryNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)

        def multiInsertQueryBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultiInsertQueryBodyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultiInsertQueryBodyContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQuery" ):
                listener.enterMultiInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQuery" ):
                listener.exitMultiInsertQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiInsertQuery" ):
                return visitor.visitMultiInsertQuery(self)
            else:
                return visitor.visitChildren(self)



    def queryNoWith(self):

        localctx = SqlBaseParser.QueryNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_queryNoWith)
        self._la = 0 # Token type
        try:
            self.state = 1214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SingleInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 1202
                    self.insertInto()


                self.state = 1205
                self.queryTerm(0)
                self.state = 1206
                self.queryOrganization()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.MultiInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1208
                self.fromClause()
                self.state = 1210 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1209
                    self.multiInsertQueryBody()
                    self.state = 1212 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==10 or _la==11 or _la==80 or _la==108 or _la==151):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOrganizationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._sortItem = None # SortItemContext
            self.order = list() # of SortItemContexts
            self._expression = None # ExpressionContext
            self.clusterBy = list() # of ExpressionContexts
            self.distributeBy = list() # of ExpressionContexts
            self.sort = list() # of SortItemContexts
            self.limit = None # ExpressionContext

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def windows(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowsContext,0)


        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryOrganization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryOrganization" ):
                listener.enterQueryOrganization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryOrganization" ):
                listener.exitQueryOrganization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryOrganization" ):
                return visitor.visitQueryOrganization(self)
            else:
                return visitor.visitChildren(self)




    def queryOrganization(self):

        localctx = SqlBaseParser.QueryOrganizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_queryOrganization)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 1216
                self.match(SqlBaseParser.ORDER)
                self.state = 1217
                self.match(SqlBaseParser.BY)
                self.state = 1218
                localctx._sortItem = self.sortItem()
                localctx.order.append(localctx._sortItem)
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==3:
                    self.state = 1219
                    self.match(SqlBaseParser.T__2)
                    self.state = 1220
                    localctx._sortItem = self.sortItem()
                    localctx.order.append(localctx._sortItem)
                    self.state = 1225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==147:
                self.state = 1228
                self.match(SqlBaseParser.CLUSTER)
                self.state = 1229
                self.match(SqlBaseParser.BY)
                self.state = 1230
                localctx._expression = self.expression()
                localctx.clusterBy.append(localctx._expression)
                self.state = 1235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==3:
                    self.state = 1231
                    self.match(SqlBaseParser.T__2)
                    self.state = 1232
                    localctx._expression = self.expression()
                    localctx.clusterBy.append(localctx._expression)
                    self.state = 1237
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 1240
                self.match(SqlBaseParser.DISTRIBUTE)
                self.state = 1241
                self.match(SqlBaseParser.BY)
                self.state = 1242
                localctx._expression = self.expression()
                localctx.distributeBy.append(localctx._expression)
                self.state = 1247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==3:
                    self.state = 1243
                    self.match(SqlBaseParser.T__2)
                    self.state = 1244
                    localctx._expression = self.expression()
                    localctx.distributeBy.append(localctx._expression)
                    self.state = 1249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 1252
                self.match(SqlBaseParser.SORT)
                self.state = 1253
                self.match(SqlBaseParser.BY)
                self.state = 1254
                localctx._sortItem = self.sortItem()
                localctx.sort.append(localctx._sortItem)
                self.state = 1259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==3:
                    self.state = 1255
                    self.match(SqlBaseParser.T__2)
                    self.state = 1256
                    localctx._sortItem = self.sortItem()
                    localctx.sort.append(localctx._sortItem)
                    self.state = 1261
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 1264
                self.windows()


            self.state = 1269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1267
                self.match(SqlBaseParser.LIMIT)
                self.state = 1268
                localctx.limit = self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiInsertQueryBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext,0)


        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_multiInsertQueryBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQueryBody" ):
                listener.enterMultiInsertQueryBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQueryBody" ):
                listener.exitMultiInsertQueryBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiInsertQueryBody" ):
                return visitor.visitMultiInsertQueryBody(self)
            else:
                return visitor.visitChildren(self)




    def multiInsertQueryBody(self):

        localctx = SqlBaseParser.MultiInsertQueryBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_multiInsertQueryBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 1271
                self.insertInto()


            self.state = 1274
            self.querySpecification()
            self.state = 1275
            self.queryOrganization()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryPrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryTermDefault" ):
                return visitor.visitQueryTermDefault(self)
            else:
                return visitor.visitChildren(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)
        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)
        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOperation" ):
                return visitor.visitSetOperation(self)
            else:
                return visitor.visitChildren(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1278
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1288
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                    self.state = 1280
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1281
                    localctx.operator = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & 15) != 0)):
                        localctx.operator = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==14 or _la==15:
                        self.state = 1282
                        self.setQuantifier()


                    self.state = 1285
                    localctx.right = self.queryTerm(2) 
                self.state = 1290
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)


    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPrimaryDefault" ):
                return visitor.visitQueryPrimaryDefault(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableDefault1Context(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault1" ):
                listener.enterInlineTableDefault1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault1" ):
                listener.exitInlineTableDefault1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTableDefault1" ):
                return visitor.visitInlineTableDefault1(self)
            else:
                return visitor.visitChildren(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable" ):
                return visitor.visitTable(self)
            else:
                return visitor.visitChildren(self)



    def queryPrimary(self):

        localctx = SqlBaseParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_queryPrimary)
        try:
            self.state = 1299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 108, 151]:
                localctx = SqlBaseParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1291
                self.querySpecification()
                pass
            elif token in [77]:
                localctx = SqlBaseParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1292
                self.match(SqlBaseParser.TABLE)
                self.state = 1293
                self.tableIdentifier()
                pass
            elif token in [75]:
                localctx = SqlBaseParser.InlineTableDefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1294
                self.inlineTable()
                pass
            elif token in [1]:
                localctx = SqlBaseParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1295
                self.match(SqlBaseParser.T__0)
                self.state = 1296
                self.queryNoWith()
                self.state = 1297
                self.match(SqlBaseParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrder = None # Token

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortItem" ):
                return visitor.visitSortItem(self)
            else:
                return visitor.visitChildren(self)




    def sortItem(self):

        localctx = SqlBaseParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self.expression()
            self.state = 1303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==42:
                self.state = 1302
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==41 or _la==42):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 1305
                self.match(SqlBaseParser.NULLS)
                self.state = 1306
                localctx.nullOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==70 or _la==72):
                    localctx.nullOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.inRowFormat = None # RowFormatContext
            self.recordWriter = None # Token
            self.script = None # Token
            self.outRowFormat = None # RowFormatContext
            self.recordReader = None # Token
            self.where = None # BooleanExpressionContext
            self._hint = None # HintContext
            self.hints = list() # of HintContexts
            self.having = None # BooleanExpressionContext

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)


        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionSeqContext,0)


        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,i)


        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)


        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)


        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)


        def aggregation(self):
            return self.getTypedRuleContext(SqlBaseParser.AggregationContext,0)


        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def windows(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowsContext,0)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.HintContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.HintContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuerySpecification" ):
                return visitor.visitQuerySpecification(self)
            else:
                return visitor.visitChildren(self)




    def querySpecification(self):

        localctx = SqlBaseParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_querySpecification)
        self._la = 0 # Token type
        try:
            self.state = 1402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1319
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10]:
                    self.state = 1309
                    self.match(SqlBaseParser.SELECT)
                    self.state = 1310
                    localctx.kind = self.match(SqlBaseParser.TRANSFORM)
                    self.state = 1311
                    self.match(SqlBaseParser.T__0)
                    self.state = 1312
                    self.namedExpressionSeq()
                    self.state = 1313
                    self.match(SqlBaseParser.T__1)
                    pass
                elif token in [108]:
                    self.state = 1315
                    localctx.kind = self.match(SqlBaseParser.MAP)
                    self.state = 1316
                    self.namedExpressionSeq()
                    pass
                elif token in [151]:
                    self.state = 1317
                    localctx.kind = self.match(SqlBaseParser.REDUCE)
                    self.state = 1318
                    self.namedExpressionSeq()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1321
                    localctx.inRowFormat = self.rowFormat()


                self.state = 1326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==156:
                    self.state = 1324
                    self.match(SqlBaseParser.RECORDWRITER)
                    self.state = 1325
                    localctx.recordWriter = self.match(SqlBaseParser.STRING)


                self.state = 1328
                self.match(SqlBaseParser.USING)
                self.state = 1329
                localctx.script = self.match(SqlBaseParser.STRING)
                self.state = 1342
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1330
                    self.match(SqlBaseParser.AS)
                    self.state = 1340
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                    if la_ == 1:
                        self.state = 1331
                        self.identifierSeq()
                        pass

                    elif la_ == 2:
                        self.state = 1332
                        self.colTypeList()
                        pass

                    elif la_ == 3:
                        self.state = 1333
                        self.match(SqlBaseParser.T__0)
                        self.state = 1336
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                        if la_ == 1:
                            self.state = 1334
                            self.identifierSeq()
                            pass

                        elif la_ == 2:
                            self.state = 1335
                            self.colTypeList()
                            pass


                        self.state = 1338
                        self.match(SqlBaseParser.T__1)
                        pass




                self.state = 1345
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1344
                    localctx.outRowFormat = self.rowFormat()


                self.state = 1349
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1347
                    self.match(SqlBaseParser.RECORDREADER)
                    self.state = 1348
                    localctx.recordReader = self.match(SqlBaseParser.STRING)


                self.state = 1352
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1351
                    self.fromClause()


                self.state = 1356
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1354
                    self.match(SqlBaseParser.WHERE)
                    self.state = 1355
                    localctx.where = self.booleanExpression(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1380
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10]:
                    self.state = 1358
                    localctx.kind = self.match(SqlBaseParser.SELECT)
                    self.state = 1362
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==5:
                        self.state = 1359
                        localctx._hint = self.hint()
                        localctx.hints.append(localctx._hint)
                        self.state = 1364
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1366
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                    if la_ == 1:
                        self.state = 1365
                        self.setQuantifier()


                    self.state = 1368
                    self.namedExpressionSeq()
                    self.state = 1370
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                    if la_ == 1:
                        self.state = 1369
                        self.fromClause()


                    pass
                elif token in [11]:
                    self.state = 1372
                    self.fromClause()
                    self.state = 1378
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                    if la_ == 1:
                        self.state = 1373
                        localctx.kind = self.match(SqlBaseParser.SELECT)
                        self.state = 1375
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                        if la_ == 1:
                            self.state = 1374
                            self.setQuantifier()


                        self.state = 1377
                        self.namedExpressionSeq()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1385
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1382
                        self.lateralView() 
                    self.state = 1387
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

                self.state = 1390
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1388
                    self.match(SqlBaseParser.WHERE)
                    self.state = 1389
                    localctx.where = self.booleanExpression(0)


                self.state = 1393
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 1392
                    self.aggregation()


                self.state = 1397
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1395
                    self.match(SqlBaseParser.HAVING)
                    self.state = 1396
                    localctx.having = self.booleanExpression(0)


                self.state = 1400
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                if la_ == 1:
                    self.state = 1399
                    self.windows()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hintStatement = None # HintStatementContext
            self.hintStatements = list() # of HintStatementContexts

        def hintStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.HintStatementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.HintStatementContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHint" ):
                listener.enterHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHint" ):
                listener.exitHint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHint" ):
                return visitor.visitHint(self)
            else:
                return visitor.visitChildren(self)




    def hint(self):

        localctx = SqlBaseParser.HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self.match(SqlBaseParser.T__4)
            self.state = 1405
            localctx._hintStatement = self.hintStatement()
            localctx.hintStatements.append(localctx._hintStatement)
            self.state = 1412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1016) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 720575940379279359) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & -31) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & 6601364733951) != 0):
                self.state = 1407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 1406
                    self.match(SqlBaseParser.T__2)


                self.state = 1409
                localctx._hintStatement = self.hintStatement()
                localctx.hintStatements.append(localctx._hintStatement)
                self.state = 1414
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1415
            self.match(SqlBaseParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hintName = None # IdentifierContext
            self._primaryExpression = None # PrimaryExpressionContext
            self.parameters = list() # of PrimaryExpressionContexts

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_hintStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHintStatement" ):
                listener.enterHintStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHintStatement" ):
                listener.exitHintStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHintStatement" ):
                return visitor.visitHintStatement(self)
            else:
                return visitor.visitChildren(self)




    def hintStatement(self):

        localctx = SqlBaseParser.HintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_hintStatement)
        self._la = 0 # Token type
        try:
            self.state = 1430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1417
                localctx.hintName = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1418
                localctx.hintName = self.identifier()
                self.state = 1419
                self.match(SqlBaseParser.T__0)
                self.state = 1420
                localctx._primaryExpression = self.primaryExpression(0)
                localctx.parameters.append(localctx._primaryExpression)
                self.state = 1425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==3:
                    self.state = 1421
                    self.match(SqlBaseParser.T__2)
                    self.state = 1422
                    localctx._primaryExpression = self.primaryExpression(0)
                    localctx.parameters.append(localctx._primaryExpression)
                    self.state = 1427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1428
                self.match(SqlBaseParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = SqlBaseParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1432
            self.match(SqlBaseParser.FROM)
            self.state = 1433
            self.relation()
            self.state = 1438
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,185,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1434
                    self.match(SqlBaseParser.T__2)
                    self.state = 1435
                    self.relation() 
                self.state = 1440
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

            self.state = 1444
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,186,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1441
                    self.lateralView() 
                self.state = 1446
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.groupingExpressions = list() # of ExpressionContexts
            self.kind = None # Token

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_aggregation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregation" ):
                listener.enterAggregation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregation" ):
                listener.exitAggregation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregation" ):
                return visitor.visitAggregation(self)
            else:
                return visitor.visitChildren(self)




    def aggregation(self):

        localctx = SqlBaseParser.AggregationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_aggregation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.match(SqlBaseParser.GROUP)
            self.state = 1448
            self.match(SqlBaseParser.BY)
            self.state = 1449
            localctx._expression = self.expression()
            localctx.groupingExpressions.append(localctx._expression)
            self.state = 1454
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1450
                    self.match(SqlBaseParser.T__2)
                    self.state = 1451
                    localctx._expression = self.expression()
                    localctx.groupingExpressions.append(localctx._expression) 
                self.state = 1456
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

            self.state = 1474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1457
                self.match(SqlBaseParser.WITH)
                self.state = 1458
                localctx.kind = self.match(SqlBaseParser.ROLLUP)

            elif la_ == 2:
                self.state = 1459
                self.match(SqlBaseParser.WITH)
                self.state = 1460
                localctx.kind = self.match(SqlBaseParser.CUBE)

            elif la_ == 3:
                self.state = 1461
                localctx.kind = self.match(SqlBaseParser.GROUPING)
                self.state = 1462
                self.match(SqlBaseParser.SETS)
                self.state = 1463
                self.match(SqlBaseParser.T__0)
                self.state = 1464
                self.groupingSet()
                self.state = 1469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==3:
                    self.state = 1465
                    self.match(SqlBaseParser.T__2)
                    self.state = 1466
                    self.groupingSet()
                    self.state = 1471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1472
                self.match(SqlBaseParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingSet" ):
                return visitor.visitGroupingSet(self)
            else:
                return visitor.visitChildren(self)




    def groupingSet(self):

        localctx = SqlBaseParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 1489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1476
                self.match(SqlBaseParser.T__0)
                self.state = 1485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1022) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 720575940379279359) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -921) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 279275953455103) != 0):
                    self.state = 1477
                    self.expression()
                    self.state = 1482
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==3:
                        self.state = 1478
                        self.match(SqlBaseParser.T__2)
                        self.state = 1479
                        self.expression()
                        self.state = 1484
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1487
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1488
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tblName = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.colName = list() # of IdentifierContexts

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_lateralView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateralView" ):
                listener.enterLateralView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateralView" ):
                listener.exitLateralView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateralView" ):
                return visitor.visitLateralView(self)
            else:
                return visitor.visitChildren(self)




    def lateralView(self):

        localctx = SqlBaseParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_lateralView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            self.match(SqlBaseParser.LATERAL)
            self.state = 1492
            self.match(SqlBaseParser.VIEW)
            self.state = 1494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 1493
                self.match(SqlBaseParser.OUTER)


            self.state = 1496
            self.qualifiedName()
            self.state = 1497
            self.match(SqlBaseParser.T__0)
            self.state = 1506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1022) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 720575940379279359) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -921) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 279275953455103) != 0):
                self.state = 1498
                self.expression()
                self.state = 1503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==3:
                    self.state = 1499
                    self.match(SqlBaseParser.T__2)
                    self.state = 1500
                    self.expression()
                    self.state = 1505
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1508
            self.match(SqlBaseParser.T__1)
            self.state = 1509
            localctx.tblName = self.identifier()
            self.state = 1521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 1511
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1510
                    self.match(SqlBaseParser.AS)


                self.state = 1513
                localctx._identifier = self.identifier()
                localctx.colName.append(localctx._identifier)
                self.state = 1518
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,197,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1514
                        self.match(SqlBaseParser.T__2)
                        self.state = 1515
                        localctx._identifier = self.identifier()
                        localctx.colName.append(localctx._identifier) 
                    self.state = 1520
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,197,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetQuantifier" ):
                return visitor.visitSetQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def setQuantifier(self):

        localctx = SqlBaseParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1523
            _la = self._input.LA(1)
            if not(_la==14 or _la==15):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def joinRelation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JoinRelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JoinRelationContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelation" ):
                return visitor.visitRelation(self)
            else:
                return visitor.visitChildren(self)




    def relation(self):

        localctx = SqlBaseParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_relation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1525
            self.relationPrimary()
            self.state = 1529
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,199,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1526
                    self.joinRelation() 
                self.state = 1531
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,199,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.right = None # RelationPrimaryContext

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def joinType(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinTypeContext,0)


        def joinCriteria(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinCriteriaContext,0)


        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinRelation" ):
                return visitor.visitJoinRelation(self)
            else:
                return visitor.visitChildren(self)




    def joinRelation(self):

        localctx = SqlBaseParser.JoinRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_joinRelation)
        try:
            self.state = 1543
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50, 51, 53, 54, 56, 57, 120, 230]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1532
                self.joinType()
                self.state = 1533
                self.match(SqlBaseParser.JOIN)
                self.state = 1534
                localctx.right = self.relationPrimary()
                self.state = 1536
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1535
                    self.joinCriteria()


                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1538
                self.match(SqlBaseParser.NATURAL)
                self.state = 1539
                self.joinType()
                self.state = 1540
                self.match(SqlBaseParser.JOIN)
                self.state = 1541
                localctx.right = self.relationPrimary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def KNN(self):
            return self.getToken(SqlBaseParser.KNN, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinType" ):
                return visitor.visitJoinType(self)
            else:
                return visitor.visitChildren(self)




    def joinType(self):

        localctx = SqlBaseParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 1568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 1545
                    self.match(SqlBaseParser.INNER)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1548
                self.match(SqlBaseParser.CROSS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1549
                self.match(SqlBaseParser.LEFT)
                self.state = 1551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 1550
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1553
                self.match(SqlBaseParser.LEFT)
                self.state = 1554
                self.match(SqlBaseParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1555
                self.match(SqlBaseParser.RIGHT)
                self.state = 1557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 1556
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1559
                self.match(SqlBaseParser.FULL)
                self.state = 1561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 1560
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 1563
                    self.match(SqlBaseParser.LEFT)


                self.state = 1566
                self.match(SqlBaseParser.ANTI)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1567
                self.match(SqlBaseParser.KNN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def POINT(self):
            return self.getToken(SqlBaseParser.POINT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinCriteria" ):
                return visitor.visitJoinCriteria(self)
            else:
                return visitor.visitChildren(self)




    def joinCriteria(self):

        localctx = SqlBaseParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_joinCriteria)
        self._la = 0 # Token type
        try:
            self.state = 1588
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1570
                self.match(SqlBaseParser.ON)
                self.state = 1571
                self.booleanExpression(0)
                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1572
                self.match(SqlBaseParser.USING)
                self.state = 1586
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 1573
                    self.match(SqlBaseParser.T__0)
                    self.state = 1574
                    self.identifier()
                    self.state = 1579
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==3:
                        self.state = 1575
                        self.match(SqlBaseParser.T__2)
                        self.state = 1576
                        self.identifier()
                        self.state = 1581
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1582
                    self.match(SqlBaseParser.T__1)
                    pass
                elif token in [121]:
                    self.state = 1584
                    self.match(SqlBaseParser.POINT)
                    self.state = 1585
                    self.booleanExpression(0)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.percentage = None # Token
            self.sampleType = None # Token
            self.numerator = None # Token
            self.denominator = None # Token

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def BYTELENGTH_LITERAL(self):
            return self.getToken(SqlBaseParser.BYTELENGTH_LITERAL, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_sample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample" ):
                listener.enterSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample" ):
                listener.exitSample(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample" ):
                return visitor.visitSample(self)
            else:
                return visitor.visitChildren(self)




    def sample(self):

        localctx = SqlBaseParser.SampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_sample)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1590
            self.match(SqlBaseParser.TABLESAMPLE)
            self.state = 1591
            self.match(SqlBaseParser.T__0)
            self.state = 1613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.state = 1592
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==238 or _la==239):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1593
                localctx.sampleType = self.match(SqlBaseParser.PERCENTLIT)
                pass

            elif la_ == 2:
                self.state = 1594
                self.expression()
                self.state = 1595
                localctx.sampleType = self.match(SqlBaseParser.ROWS)
                pass

            elif la_ == 3:
                self.state = 1597
                localctx.sampleType = self.match(SqlBaseParser.BYTELENGTH_LITERAL)
                pass

            elif la_ == 4:
                self.state = 1598
                localctx.sampleType = self.match(SqlBaseParser.BUCKET)
                self.state = 1599
                localctx.numerator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 1600
                self.match(SqlBaseParser.OUT)
                self.state = 1601
                self.match(SqlBaseParser.OF)
                self.state = 1602
                localctx.denominator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 1611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 1603
                    self.match(SqlBaseParser.ON)
                    self.state = 1609
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                    if la_ == 1:
                        self.state = 1604
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 1605
                        self.qualifiedName()
                        self.state = 1606
                        self.match(SqlBaseParser.T__0)
                        self.state = 1607
                        self.match(SqlBaseParser.T__1)
                        pass




                pass


            self.state = 1615
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = SqlBaseParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self.match(SqlBaseParser.T__0)
            self.state = 1618
            self.identifierSeq()
            self.state = 1619
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierSeq" ):
                listener.enterIdentifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierSeq" ):
                listener.exitIdentifierSeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierSeq" ):
                return visitor.visitIdentifierSeq(self)
            else:
                return visitor.visitChildren(self)




    def identifierSeq(self):

        localctx = SqlBaseParser.IdentifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_identifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            self.identifier()
            self.state = 1626
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,214,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1622
                    self.match(SqlBaseParser.T__2)
                    self.state = 1623
                    self.identifier() 
                self.state = 1628
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,214,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.OrderedIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.OrderedIdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifierList" ):
                listener.enterOrderedIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifierList" ):
                listener.exitOrderedIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedIdentifierList" ):
                return visitor.visitOrderedIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def orderedIdentifierList(self):

        localctx = SqlBaseParser.OrderedIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_orderedIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1629
            self.match(SqlBaseParser.T__0)
            self.state = 1630
            self.orderedIdentifier()
            self.state = 1635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 1631
                self.match(SqlBaseParser.T__2)
                self.state = 1632
                self.orderedIdentifier()
                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1638
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifier" ):
                listener.enterOrderedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifier" ):
                listener.exitOrderedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedIdentifier" ):
                return visitor.visitOrderedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def orderedIdentifier(self):

        localctx = SqlBaseParser.OrderedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_orderedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.identifier()
            self.state = 1642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==42:
                self.state = 1641
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==41 or _la==42):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierCommentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierCommentContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierCommentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierCommentList" ):
                listener.enterIdentifierCommentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierCommentList" ):
                listener.exitIdentifierCommentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierCommentList" ):
                return visitor.visitIdentifierCommentList(self)
            else:
                return visitor.visitChildren(self)




    def identifierCommentList(self):

        localctx = SqlBaseParser.IdentifierCommentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_identifierCommentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1644
            self.match(SqlBaseParser.T__0)
            self.state = 1645
            self.identifierComment()
            self.state = 1650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 1646
                self.match(SqlBaseParser.T__2)
                self.state = 1647
                self.identifierComment()
                self.state = 1652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1653
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierComment" ):
                listener.enterIdentifierComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierComment" ):
                listener.exitIdentifierComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierComment" ):
                return visitor.visitIdentifierComment(self)
            else:
                return visitor.visitChildren(self)




    def identifierComment(self):

        localctx = SqlBaseParser.IdentifierCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_identifierComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1655
            self.identifier()
            self.state = 1658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 1656
                self.match(SqlBaseParser.COMMENT)
                self.state = 1657
                self.match(SqlBaseParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableValuedFunctionContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableValuedFunction" ):
                listener.enterTableValuedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableValuedFunction" ):
                listener.exitTableValuedFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableValuedFunction" ):
                return visitor.visitTableValuedFunction(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableDefault2Context(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault2" ):
                listener.enterInlineTableDefault2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault2" ):
                listener.exitInlineTableDefault2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTableDefault2" ):
                return visitor.visitInlineTableDefault2(self)
            else:
                return visitor.visitChildren(self)


    class AliasedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedRelation" ):
                return visitor.visitAliasedRelation(self)
            else:
                return visitor.visitChildren(self)


    class AliasedQueryContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedQuery" ):
                listener.enterAliasedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedQuery" ):
                listener.exitAliasedQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedQuery" ):
                return visitor.visitAliasedQuery(self)
            else:
                return visitor.visitChildren(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)



    def relationPrimary(self):

        localctx = SqlBaseParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_relationPrimary)
        self._la = 0 # Token type
        try:
            self.state = 1709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1660
                self.tableIdentifier()
                self.state = 1662
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                if la_ == 1:
                    self.state = 1661
                    self.sample()


                self.state = 1668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1665
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                    if la_ == 1:
                        self.state = 1664
                        self.match(SqlBaseParser.AS)


                    self.state = 1667
                    self.strictIdentifier()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.AliasedQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1670
                self.match(SqlBaseParser.T__0)
                self.state = 1671
                self.queryNoWith()
                self.state = 1672
                self.match(SqlBaseParser.T__1)
                self.state = 1674
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                if la_ == 1:
                    self.state = 1673
                    self.sample()


                self.state = 1680
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 1677
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                    if la_ == 1:
                        self.state = 1676
                        self.match(SqlBaseParser.AS)


                    self.state = 1679
                    self.strictIdentifier()


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.AliasedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1682
                self.match(SqlBaseParser.T__0)
                self.state = 1683
                self.relation()
                self.state = 1684
                self.match(SqlBaseParser.T__1)
                self.state = 1686
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 1685
                    self.sample()


                self.state = 1692
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                if la_ == 1:
                    self.state = 1689
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                    if la_ == 1:
                        self.state = 1688
                        self.match(SqlBaseParser.AS)


                    self.state = 1691
                    self.strictIdentifier()


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InlineTableDefault2Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1694
                self.inlineTable()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.TableValuedFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1695
                self.identifier()
                self.state = 1696
                self.match(SqlBaseParser.T__0)
                self.state = 1705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1022) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 720575940379279359) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -921) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 279275953455103) != 0):
                    self.state = 1697
                    self.expression()
                    self.state = 1702
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==3:
                        self.state = 1698
                        self.match(SqlBaseParser.T__2)
                        self.state = 1699
                        self.expression()
                        self.state = 1704
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1707
                self.match(SqlBaseParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_inlineTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTable" ):
                return visitor.visitInlineTable(self)
            else:
                return visitor.visitChildren(self)




    def inlineTable(self):

        localctx = SqlBaseParser.InlineTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_inlineTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1711
            self.match(SqlBaseParser.VALUES)
            self.state = 1712
            self.expression()
            self.state = 1717
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1713
                    self.match(SqlBaseParser.T__2)
                    self.state = 1714
                    self.expression() 
                self.state = 1719
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

            self.state = 1727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.state = 1721
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 1720
                    self.match(SqlBaseParser.AS)


                self.state = 1723
                self.identifier()
                self.state = 1725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 1724
                    self.identifierList()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RowFormatSerdeContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.name = None # Token
            self.props = None # TablePropertyListContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatSerde" ):
                listener.enterRowFormatSerde(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatSerde" ):
                listener.exitRowFormatSerde(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatSerde" ):
                return visitor.visitRowFormatSerde(self)
            else:
                return visitor.visitChildren(self)


    class RowFormatDelimitedContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.fieldsTerminatedBy = None # Token
            self.escapedBy = None # Token
            self.collectionItemsTerminatedBy = None # Token
            self.keysTerminatedBy = None # Token
            self.linesSeparatedBy = None # Token
            self.nullDefinedAs = None # Token
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)
        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)
        def TERMINATED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TERMINATED)
            else:
                return self.getToken(SqlBaseParser.TERMINATED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)
        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)
        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)
        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)
        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)
        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)
        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatDelimited" ):
                listener.enterRowFormatDelimited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatDelimited" ):
                listener.exitRowFormatDelimited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatDelimited" ):
                return visitor.visitRowFormatDelimited(self)
            else:
                return visitor.visitChildren(self)



    def rowFormat(self):

        localctx = SqlBaseParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_rowFormat)
        try:
            self.state = 1778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.RowFormatSerdeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1729
                self.match(SqlBaseParser.ROW)
                self.state = 1730
                self.match(SqlBaseParser.FORMAT)
                self.state = 1731
                self.match(SqlBaseParser.SERDE)
                self.state = 1732
                localctx.name = self.match(SqlBaseParser.STRING)
                self.state = 1736
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 1733
                    self.match(SqlBaseParser.WITH)
                    self.state = 1734
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 1735
                    localctx.props = self.tablePropertyList()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RowFormatDelimitedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1738
                self.match(SqlBaseParser.ROW)
                self.state = 1739
                self.match(SqlBaseParser.FORMAT)
                self.state = 1740
                self.match(SqlBaseParser.DELIMITED)
                self.state = 1750
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                if la_ == 1:
                    self.state = 1741
                    self.match(SqlBaseParser.FIELDS)
                    self.state = 1742
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1743
                    self.match(SqlBaseParser.BY)
                    self.state = 1744
                    localctx.fieldsTerminatedBy = self.match(SqlBaseParser.STRING)
                    self.state = 1748
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
                    if la_ == 1:
                        self.state = 1745
                        self.match(SqlBaseParser.ESCAPED)
                        self.state = 1746
                        self.match(SqlBaseParser.BY)
                        self.state = 1747
                        localctx.escapedBy = self.match(SqlBaseParser.STRING)




                self.state = 1757
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 1752
                    self.match(SqlBaseParser.COLLECTION)
                    self.state = 1753
                    self.match(SqlBaseParser.ITEMS)
                    self.state = 1754
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1755
                    self.match(SqlBaseParser.BY)
                    self.state = 1756
                    localctx.collectionItemsTerminatedBy = self.match(SqlBaseParser.STRING)


                self.state = 1764
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                if la_ == 1:
                    self.state = 1759
                    self.match(SqlBaseParser.MAP)
                    self.state = 1760
                    self.match(SqlBaseParser.KEYS)
                    self.state = 1761
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1762
                    self.match(SqlBaseParser.BY)
                    self.state = 1763
                    localctx.keysTerminatedBy = self.match(SqlBaseParser.STRING)


                self.state = 1770
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                if la_ == 1:
                    self.state = 1766
                    self.match(SqlBaseParser.LINES)
                    self.state = 1767
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1768
                    self.match(SqlBaseParser.BY)
                    self.state = 1769
                    localctx.linesSeparatedBy = self.match(SqlBaseParser.STRING)


                self.state = 1776
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
                if la_ == 1:
                    self.state = 1772
                    self.match(SqlBaseParser.NULL)
                    self.state = 1773
                    self.match(SqlBaseParser.DEFINED)
                    self.state = 1774
                    self.match(SqlBaseParser.AS)
                    self.state = 1775
                    localctx.nullDefinedAs = self.match(SqlBaseParser.STRING)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # IdentifierContext
            self.table = None # IdentifierContext

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIdentifier" ):
                listener.enterTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIdentifier" ):
                listener.exitTableIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = SqlBaseParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.state = 1780
                localctx.db = self.identifier()
                self.state = 1781
                self.match(SqlBaseParser.T__3)


            self.state = 1785
            localctx.table = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # IdentifierContext
            self.function = None # IdentifierContext

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionIdentifier" ):
                listener.enterFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionIdentifier" ):
                listener.exitFunctionIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionIdentifier" ):
                return visitor.visitFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def functionIdentifier(self):

        localctx = SqlBaseParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_functionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.state = 1787
                localctx.db = self.identifier()
                self.state = 1788
                self.match(SqlBaseParser.T__3)


            self.state = 1792
            localctx.function = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpression" ):
                listener.enterNamedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpression" ):
                listener.exitNamedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpression" ):
                return visitor.visitNamedExpression(self)
            else:
                return visitor.visitChildren(self)




    def namedExpression(self):

        localctx = SqlBaseParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1794
            self.expression()
            self.state = 1802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.state = 1796
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                if la_ == 1:
                    self.state = 1795
                    self.match(SqlBaseParser.AS)


                self.state = 1800
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 137, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 242, 243]:
                    self.state = 1798
                    self.identifier()
                    pass
                elif token in [1]:
                    self.state = 1799
                    self.identifierList()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpressionSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpressionSeq" ):
                listener.enterNamedExpressionSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpressionSeq" ):
                listener.exitNamedExpressionSeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpressionSeq" ):
                return visitor.visitNamedExpressionSeq(self)
            else:
                return visitor.visitChildren(self)




    def namedExpressionSeq(self):

        localctx = SqlBaseParser.NamedExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_namedExpressionSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1804
            self.namedExpression()
            self.state = 1809
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,248,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1805
                    self.match(SqlBaseParser.T__2)
                    self.state = 1806
                    self.namedExpression() 
                self.state = 1811
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,248,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = SqlBaseParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class BooleanDefaultSpatialContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def spatialpredicated(self):
            return self.getTypedRuleContext(SqlBaseParser.SpatialpredicatedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanDefaultSpatial" ):
                listener.enterBooleanDefaultSpatial(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanDefaultSpatial" ):
                listener.exitBooleanDefaultSpatial(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanDefaultSpatial" ):
                return visitor.visitBooleanDefaultSpatial(self)
            else:
                return visitor.visitChildren(self)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalNot" ):
                return visitor.visitLogicalNot(self)
            else:
                return visitor.visitChildren(self)


    class BooleanDefaultContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicated(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicatedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanDefault" ):
                listener.enterBooleanDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanDefault" ):
                listener.exitBooleanDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanDefault" ):
                return visitor.visitBooleanDefault(self)
            else:
                return visitor.visitChildren(self)


    class ExistsContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExists" ):
                return visitor.visitExists(self)
            else:
                return visitor.visitChildren(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.operator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalBinary" ):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalBinary" ):
                listener.exitLogicalBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalBinary" ):
                return visitor.visitLogicalBinary(self)
            else:
                return visitor.visitChildren(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1815
                self.match(SqlBaseParser.NOT)
                self.state = 1816
                self.booleanExpression(6)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1817
                self.match(SqlBaseParser.EXISTS)
                self.state = 1818
                self.match(SqlBaseParser.T__0)
                self.state = 1819
                self.query()
                self.state = 1820
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.BooleanDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1822
                self.predicated()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.BooleanDefaultSpatialContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1823
                self.spatialpredicated()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1834
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,251,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1832
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1826
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1827
                        localctx.operator = self.match(SqlBaseParser.AND)
                        self.state = 1828
                        localctx.right = self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1829
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1830
                        localctx.operator = self.match(SqlBaseParser.OR)
                        self.state = 1831
                        localctx.right = self.booleanExpression(2)
                        pass

             
                self.state = 1836
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,251,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def predicate(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicated" ):
                return visitor.visitPredicated(self)
            else:
                return visitor.visitChildren(self)




    def predicated(self):

        localctx = SqlBaseParser.PredicatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_predicated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1837
            self.valueExpression(0)
            self.state = 1839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.state = 1838
                self.predicate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpatialpredicatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token

        def myexpressionlist1(self):
            return self.getTypedRuleContext(SqlBaseParser.Myexpressionlist1Context,0)


        def POINT(self):
            return self.getToken(SqlBaseParser.POINT, 0)

        def myexpressionlist2(self):
            return self.getTypedRuleContext(SqlBaseParser.Myexpressionlist2Context,0)


        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def KNNPRED(self):
            return self.getToken(SqlBaseParser.KNNPRED, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_spatialpredicated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpatialpredicated" ):
                listener.enterSpatialpredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpatialpredicated" ):
                listener.exitSpatialpredicated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpatialpredicated" ):
                return visitor.visitSpatialpredicated(self)
            else:
                return visitor.visitChildren(self)




    def spatialpredicated(self):

        localctx = SqlBaseParser.SpatialpredicatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_spatialpredicated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1841
            self.myexpressionlist1()
            self.state = 1842
            localctx.kind = self.match(SqlBaseParser.KNNPRED)
            self.state = 1843
            self.match(SqlBaseParser.T__0)
            self.state = 1844
            self.match(SqlBaseParser.POINT)
            self.state = 1845
            self.myexpressionlist2()
            self.state = 1846
            self.match(SqlBaseParser.T__2)
            self.state = 1847
            self.valueExpression(0)
            self.state = 1848
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.pattern = None # ValueExpressionContext

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate" ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = SqlBaseParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 1891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 1850
                    self.match(SqlBaseParser.NOT)


                self.state = 1853
                localctx.kind = self.match(SqlBaseParser.BETWEEN)
                self.state = 1854
                localctx.lower = self.valueExpression(0)
                self.state = 1855
                self.match(SqlBaseParser.AND)
                self.state = 1856
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 1858
                    self.match(SqlBaseParser.NOT)


                self.state = 1861
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 1862
                self.match(SqlBaseParser.T__0)
                self.state = 1863
                self.expression()
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==3:
                    self.state = 1864
                    self.match(SqlBaseParser.T__2)
                    self.state = 1865
                    self.expression()
                    self.state = 1870
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1871
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 1873
                    self.match(SqlBaseParser.NOT)


                self.state = 1876
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 1877
                self.match(SqlBaseParser.T__0)
                self.state = 1878
                self.query()
                self.state = 1879
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 1881
                    self.match(SqlBaseParser.NOT)


                self.state = 1884
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==34 or _la==35):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1885
                localctx.pattern = self.valueExpression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1886
                self.match(SqlBaseParser.IS)
                self.state = 1888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 1887
                    self.match(SqlBaseParser.NOT)


                self.state = 1890
                localctx.kind = self.match(SqlBaseParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Myexpressionlist1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_myexpressionlist1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMyexpressionlist1" ):
                listener.enterMyexpressionlist1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMyexpressionlist1" ):
                listener.exitMyexpressionlist1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMyexpressionlist1" ):
                return visitor.visitMyexpressionlist1(self)
            else:
                return visitor.visitChildren(self)




    def myexpressionlist1(self):

        localctx = SqlBaseParser.Myexpressionlist1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_myexpressionlist1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1893
            self.match(SqlBaseParser.T__0)
            self.state = 1894
            self.expression()
            self.state = 1899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 1895
                self.match(SqlBaseParser.T__2)
                self.state = 1896
                self.expression()
                self.state = 1901
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1902
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Myexpressionlist2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_myexpressionlist2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMyexpressionlist2" ):
                listener.enterMyexpressionlist2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMyexpressionlist2" ):
                listener.exitMyexpressionlist2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMyexpressionlist2" ):
                return visitor.visitMyexpressionlist2(self)
            else:
                return visitor.visitChildren(self)




    def myexpressionlist2(self):

        localctx = SqlBaseParser.Myexpressionlist2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_myexpressionlist2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1904
            self.match(SqlBaseParser.T__0)
            self.state = 1905
            self.expression()
            self.state = 1910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 1906
                self.match(SqlBaseParser.T__2)
                self.state = 1907
                self.expression()
                self.state = 1912
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1913
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueExpressionDefault" ):
                return visitor.visitValueExpressionDefault(self)
            else:
                return visitor.visitChildren(self)


    class ComparisonContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)
        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)
        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)
        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticBinary" ):
                return visitor.visitArithmeticBinary(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticUnary" ):
                return visitor.visitArithmeticUnary(self)
            else:
                return visitor.visitChildren(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 140
        self.enterRecursionRule(localctx, 140, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1916
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1917
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 67) != 0)):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1918
                self.valueExpression(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1942
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,264,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1940
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1921
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1922
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 15) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1923
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1924
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1925
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==132 or _la==133):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1926
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1927
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1928
                        localctx.operator = self.match(SqlBaseParser.AMPERSAND)
                        self.state = 1929
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1930
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1931
                        localctx.operator = self.match(SqlBaseParser.HAT)
                        self.state = 1932
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 5:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1933
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1934
                        localctx.operator = self.match(SqlBaseParser.PIPE)
                        self.state = 1935
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 6:
                        localctx = SqlBaseParser.ComparisonContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1936
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1937
                        self.comparisonOperator()
                        self.state = 1938
                        localctx.right = self.valueExpression(2)
                        pass

             
                self.state = 1944
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class StructContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self._namedExpression = None # NamedExpressionContext
            self.argument = list() # of NamedExpressionContexts
            self.copyFrom(ctx)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)
        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct" ):
                listener.enterStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct" ):
                listener.exitStruct(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct" ):
                return visitor.visitStruct(self)
            else:
                return visitor.visitChildren(self)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereference" ):
                return visitor.visitDereference(self)
            else:
                return visitor.visitChildren(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleCase" ):
                return visitor.visitSimpleCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnReference" ):
                return visitor.visitColumnReference(self)
            else:
                return visitor.visitChildren(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowConstructor" ):
                return visitor.visitRowConstructor(self)
            else:
                return visitor.visitChildren(self)


    class LastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast" ):
                listener.enterLast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast" ):
                listener.exitLast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLast" ):
                return visitor.visitLast(self)
            else:
                return visitor.visitChildren(self)


    class StarContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar" ):
                listener.enterStar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar" ):
                listener.exitStar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar" ):
                return visitor.visitStar(self)
            else:
                return visitor.visitChildren(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpression" ):
                return visitor.visitSubqueryExpression(self)
            else:
                return visitor.visitChildren(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast" ):
                return visitor.visitCast(self)
            else:
                return visitor.visitChildren(self)


    class ConstantDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDefault" ):
                listener.enterConstantDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDefault" ):
                listener.exitConstantDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDefault" ):
                return visitor.visitConstantDefault(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.argument = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)
        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchedCase" ):
                return visitor.visitSearchedCase(self)
            else:
                return visitor.visitChildren(self)


    class FirstContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirst" ):
                listener.enterFirst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirst" ):
                listener.exitFirst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFirst" ):
                return visitor.visitFirst(self)
            else:
                return visitor.visitChildren(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 142
        self.enterRecursionRule(localctx, 142, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1946
                self.match(SqlBaseParser.CASE)
                self.state = 1948 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1947
                    self.whenClause()
                    self.state = 1950 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==46):
                        break

                self.state = 1954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 1952
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1953
                    localctx.elseExpression = self.expression()


                self.state = 1956
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1958
                self.match(SqlBaseParser.CASE)
                self.state = 1959
                localctx.value = self.expression()
                self.state = 1961 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1960
                    self.whenClause()
                    self.state = 1963 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==46):
                        break

                self.state = 1967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 1965
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1966
                    localctx.elseExpression = self.expression()


                self.state = 1969
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1971
                self.match(SqlBaseParser.CAST)
                self.state = 1972
                self.match(SqlBaseParser.T__0)
                self.state = 1973
                self.expression()
                self.state = 1974
                self.match(SqlBaseParser.AS)
                self.state = 1975
                self.dataType()
                self.state = 1976
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.StructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1978
                self.match(SqlBaseParser.STRUCT)
                self.state = 1979
                self.match(SqlBaseParser.T__0)
                self.state = 1988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1022) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 720575940379279359) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -921) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 279275953455103) != 0):
                    self.state = 1980
                    localctx._namedExpression = self.namedExpression()
                    localctx.argument.append(localctx._namedExpression)
                    self.state = 1985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==3:
                        self.state = 1981
                        self.match(SqlBaseParser.T__2)
                        self.state = 1982
                        localctx._namedExpression = self.namedExpression()
                        localctx.argument.append(localctx._namedExpression)
                        self.state = 1987
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1990
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.FirstContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1991
                self.match(SqlBaseParser.FIRST)
                self.state = 1992
                self.match(SqlBaseParser.T__0)
                self.state = 1993
                self.expression()
                self.state = 1996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 1994
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 1995
                    self.match(SqlBaseParser.NULLS)


                self.state = 1998
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.LastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2000
                self.match(SqlBaseParser.LAST)
                self.state = 2001
                self.match(SqlBaseParser.T__0)
                self.state = 2002
                self.expression()
                self.state = 2005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 2003
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 2004
                    self.match(SqlBaseParser.NULLS)


                self.state = 2007
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.ConstantDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2009
                self.constant()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2010
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2011
                self.qualifiedName()
                self.state = 2012
                self.match(SqlBaseParser.T__3)
                self.state = 2013
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2015
                self.match(SqlBaseParser.T__0)
                self.state = 2016
                self.namedExpression()
                self.state = 2019 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2017
                    self.match(SqlBaseParser.T__2)
                    self.state = 2018
                    self.namedExpression()
                    self.state = 2021 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==3):
                        break

                self.state = 2023
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2025
                self.match(SqlBaseParser.T__0)
                self.state = 2026
                self.query()
                self.state = 2027
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2029
                self.qualifiedName()
                self.state = 2030
                self.match(SqlBaseParser.T__0)
                self.state = 2042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1022) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 720575940379279359) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -921) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 279275953455103) != 0):
                    self.state = 2032
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                    if la_ == 1:
                        self.state = 2031
                        self.setQuantifier()


                    self.state = 2034
                    localctx._expression = self.expression()
                    localctx.argument.append(localctx._expression)
                    self.state = 2039
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==3:
                        self.state = 2035
                        self.match(SqlBaseParser.T__2)
                        self.state = 2036
                        localctx._expression = self.expression()
                        localctx.argument.append(localctx._expression)
                        self.state = 2041
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2044
                self.match(SqlBaseParser.T__1)
                self.state = 2047
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
                if la_ == 1:
                    self.state = 2045
                    self.match(SqlBaseParser.OVER)
                    self.state = 2046
                    self.windowSpec()


                pass

            elif la_ == 13:
                localctx = SqlBaseParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2049
                self.identifier()
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2050
                self.match(SqlBaseParser.T__0)
                self.state = 2051
                self.expression()
                self.state = 2052
                self.match(SqlBaseParser.T__1)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2066
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,280,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2064
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SubscriptContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 2056
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2057
                        self.match(SqlBaseParser.T__6)
                        self.state = 2058
                        localctx.index = self.valueExpression(0)
                        self.state = 2059
                        self.match(SqlBaseParser.T__7)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.DereferenceContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 2061
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2062
                        self.match(SqlBaseParser.T__3)
                        self.state = 2063
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 2068
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_constant

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NullLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullLiteral" ):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class TypeConstructorContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstructor" ):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstructor" ):
                listener.exitTypeConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstructor" ):
                return visitor.visitTypeConstructor(self)
            else:
                return visitor.visitChildren(self)


    class IntervalLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalLiteral" ):
                return visitor.visitIntervalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class NumericLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(SqlBaseParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BooleanLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)



    def constant(self):

        localctx = SqlBaseParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_constant)
        try:
            self.state = 2081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2069
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntervalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2070
                self.interval()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2071
                self.identifier()
                self.state = 2072
                self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.NumericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2074
                self.number()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2075
                self.booleanValue()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2077 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2076
                        self.match(SqlBaseParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 2079 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,281,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def NEQJ(self):
            return self.getToken(SqlBaseParser.NEQJ, 0)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def LTE(self):
            return self.getToken(SqlBaseParser.LTE, 0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def GTE(self):
            return self.getToken(SqlBaseParser.GTE, 0)

        def NSEQ(self):
            return self.getToken(SqlBaseParser.NSEQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = SqlBaseParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2083
            _la = self._input.LA(1)
            if not(((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & 255) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)

        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_arithmeticOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOperator" ):
                listener.enterArithmeticOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOperator" ):
                listener.exitArithmeticOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticOperator" ):
                return visitor.visitArithmeticOperator(self)
            else:
                return visitor.visitChildren(self)




    def arithmeticOperator(self):

        localctx = SqlBaseParser.ArithmeticOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_arithmeticOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2085
            _la = self._input.LA(1)
            if not(((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicateOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateOperator" ):
                listener.enterPredicateOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateOperator" ):
                listener.exitPredicateOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicateOperator" ):
                return visitor.visitPredicateOperator(self)
            else:
                return visitor.visitChildren(self)




    def predicateOperator(self):

        localctx = SqlBaseParser.PredicateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_predicateOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2087
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2013265920) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanValue" ):
                return visitor.visitBooleanValue(self)
            else:
                return visitor.visitChildren(self)




    def booleanValue(self):

        localctx = SqlBaseParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2089
            _la = self._input.LA(1)
            if not(_la==38 or _la==39):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalFieldContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = SqlBaseParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2091
            self.match(SqlBaseParser.INTERVAL)
            self.state = 2095
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,283,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2092
                    self.intervalField() 
                self.state = 2097
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IntervalValueContext
            self.unit = None # IdentifierContext
            self.to = None # IdentifierContext

        def intervalValue(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalValueContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalField" ):
                listener.enterIntervalField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalField" ):
                listener.exitIntervalField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalField" ):
                return visitor.visitIntervalField(self)
            else:
                return visitor.visitChildren(self)




    def intervalField(self):

        localctx = SqlBaseParser.IntervalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_intervalField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2098
            localctx.value = self.intervalValue()
            self.state = 2099
            localctx.unit = self.identifier()
            self.state = 2102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 2100
                self.match(SqlBaseParser.TO)
                self.state = 2101
                localctx.to = self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalValue" ):
                listener.enterIntervalValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalValue" ):
                listener.exitIntervalValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalValue" ):
                return visitor.visitIntervalValue(self)
            else:
                return visitor.visitChildren(self)




    def intervalValue(self):

        localctx = SqlBaseParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_intervalValue)
        self._la = 0 # Token type
        try:
            self.state = 2109
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [132, 133, 238, 239]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==132 or _la==133:
                    self.state = 2104
                    _la = self._input.LA(1)
                    if not(_la==132 or _la==133):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2107
                _la = self._input.LA(1)
                if not(_la==238 or _la==239):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [233]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2108
                self.match(SqlBaseParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColPosition" ):
                listener.enterColPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColPosition" ):
                listener.exitColPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColPosition" ):
                return visitor.visitColPosition(self)
            else:
                return visitor.visitChildren(self)




    def colPosition(self):

        localctx = SqlBaseParser.ColPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_colPosition)
        try:
            self.state = 2114
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2111
                self.match(SqlBaseParser.FIRST)
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2112
                self.match(SqlBaseParser.AFTER)
                self.state = 2113
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ComplexDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.complex_ = None # Token
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)
        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,i)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)
        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)
        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)
        def complexColTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ComplexColTypeListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexDataType" ):
                listener.enterComplexDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexDataType" ):
                listener.exitComplexDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexDataType" ):
                return visitor.visitComplexDataType(self)
            else:
                return visitor.visitChildren(self)


    class PrimitiveDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveDataType" ):
                listener.enterPrimitiveDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveDataType" ):
                listener.exitPrimitiveDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveDataType" ):
                return visitor.visitPrimitiveDataType(self)
            else:
                return visitor.visitChildren(self)



    def dataType(self):

        localctx = SqlBaseParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 2150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2116
                localctx.complex_ = self.match(SqlBaseParser.ARRAY)
                self.state = 2117
                self.match(SqlBaseParser.LT)
                self.state = 2118
                self.dataType()
                self.state = 2119
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2121
                localctx.complex_ = self.match(SqlBaseParser.MAP)
                self.state = 2122
                self.match(SqlBaseParser.LT)
                self.state = 2123
                self.dataType()
                self.state = 2124
                self.match(SqlBaseParser.T__2)
                self.state = 2125
                self.dataType()
                self.state = 2126
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2128
                localctx.complex_ = self.match(SqlBaseParser.STRUCT)
                self.state = 2135
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [128]:
                    self.state = 2129
                    self.match(SqlBaseParser.LT)
                    self.state = 2131
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1024) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 720575940379279359) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & -31) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & 6601364733951) != 0):
                        self.state = 2130
                        self.complexColTypeList()


                    self.state = 2133
                    self.match(SqlBaseParser.GT)
                    pass
                elif token in [126]:
                    self.state = 2134
                    self.match(SqlBaseParser.NEQ)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = SqlBaseParser.PrimitiveDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2137
                self.identifier()
                self.state = 2148
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
                if la_ == 1:
                    self.state = 2138
                    self.match(SqlBaseParser.T__0)
                    self.state = 2139
                    self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 2144
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==3:
                        self.state = 2140
                        self.match(SqlBaseParser.T__2)
                        self.state = 2141
                        self.match(SqlBaseParser.INTEGER_VALUE)
                        self.state = 2146
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2147
                    self.match(SqlBaseParser.T__1)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColTypeContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColTypeList" ):
                listener.enterColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColTypeList" ):
                listener.exitColTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColTypeList" ):
                return visitor.visitColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def colTypeList(self):

        localctx = SqlBaseParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_colTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2152
            self.colType()
            self.state = 2157
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,293,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2153
                    self.match(SqlBaseParser.T__2)
                    self.state = 2154
                    self.colType() 
                self.state = 2159
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,293,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_colType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColType" ):
                listener.enterColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColType" ):
                listener.exitColType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColType" ):
                return visitor.visitColType(self)
            else:
                return visitor.visitChildren(self)




    def colType(self):

        localctx = SqlBaseParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_colType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2160
            self.identifier()
            self.state = 2161
            self.dataType()
            self.state = 2164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.state = 2162
                self.match(SqlBaseParser.COMMENT)
                self.state = 2163
                self.match(SqlBaseParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexColType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ComplexColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ComplexColTypeContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_complexColTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColTypeList" ):
                listener.enterComplexColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColTypeList" ):
                listener.exitComplexColTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexColTypeList" ):
                return visitor.visitComplexColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def complexColTypeList(self):

        localctx = SqlBaseParser.ComplexColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_complexColTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2166
            self.complexColType()
            self.state = 2171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 2167
                self.match(SqlBaseParser.T__2)
                self.state = 2168
                self.complexColType()
                self.state = 2173
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_complexColType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColType" ):
                listener.enterComplexColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColType" ):
                listener.exitComplexColType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexColType" ):
                return visitor.visitComplexColType(self)
            else:
                return visitor.visitChildren(self)




    def complexColType(self):

        localctx = SqlBaseParser.ComplexColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_complexColType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2174
            self.identifier()
            self.state = 2175
            self.match(SqlBaseParser.T__8)
            self.state = 2176
            self.dataType()
            self.state = 2179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 2177
                self.match(SqlBaseParser.COMMENT)
                self.state = 2178
                self.match(SqlBaseParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenClause" ):
                return visitor.visitWhenClause(self)
            else:
                return visitor.visitChildren(self)




    def whenClause(self):

        localctx = SqlBaseParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2181
            self.match(SqlBaseParser.WHEN)
            self.state = 2182
            localctx.condition = self.expression()
            self.state = 2183
            self.match(SqlBaseParser.THEN)
            self.state = 2184
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def namedWindow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedWindowContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindows" ):
                listener.enterWindows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindows" ):
                listener.exitWindows(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindows" ):
                return visitor.visitWindows(self)
            else:
                return visitor.visitChildren(self)




    def windows(self):

        localctx = SqlBaseParser.WindowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_windows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2186
            self.match(SqlBaseParser.WINDOW)
            self.state = 2187
            self.namedWindow()
            self.state = 2192
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,297,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2188
                    self.match(SqlBaseParser.T__2)
                    self.state = 2189
                    self.namedWindow() 
                self.state = 2194
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,297,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedWindowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedWindow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedWindow" ):
                listener.enterNamedWindow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedWindow" ):
                listener.exitNamedWindow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedWindow" ):
                return visitor.visitNamedWindow(self)
            else:
                return visitor.visitChildren(self)




    def namedWindow(self):

        localctx = SqlBaseParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2195
            self.identifier()
            self.state = 2196
            self.match(SqlBaseParser.AS)
            self.state = 2197
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WindowRefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowRef" ):
                listener.enterWindowRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowRef" ):
                listener.exitWindowRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowRef" ):
                return visitor.visitWindowRef(self)
            else:
                return visitor.visitChildren(self)


    class WindowDefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def windowFrame(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowFrameContext,0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)
        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)
        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDef" ):
                listener.enterWindowDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDef" ):
                listener.exitWindowDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowDef" ):
                return visitor.visitWindowDef(self)
            else:
                return visitor.visitChildren(self)



    def windowSpec(self):

        localctx = SqlBaseParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_windowSpec)
        self._la = 0 # Token type
        try:
            self.state = 2241
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 137, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 242, 243]:
                localctx = SqlBaseParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2199
                localctx.name = self.identifier()
                pass
            elif token in [1]:
                localctx = SqlBaseParser.WindowDefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2200
                self.match(SqlBaseParser.T__0)
                self.state = 2235
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [147]:
                    self.state = 2201
                    self.match(SqlBaseParser.CLUSTER)
                    self.state = 2202
                    self.match(SqlBaseParser.BY)
                    self.state = 2203
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 2208
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==3:
                        self.state = 2204
                        self.match(SqlBaseParser.T__2)
                        self.state = 2205
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 2210
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [2, 23, 63, 64, 65, 146, 148]:
                    self.state = 2221
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63 or _la==148:
                        self.state = 2211
                        _la = self._input.LA(1)
                        if not(_la==63 or _la==148):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2212
                        self.match(SqlBaseParser.BY)
                        self.state = 2213
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 2218
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==3:
                            self.state = 2214
                            self.match(SqlBaseParser.T__2)
                            self.state = 2215
                            localctx._expression = self.expression()
                            localctx.partition.append(localctx._expression)
                            self.state = 2220
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 2233
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==23 or _la==146:
                        self.state = 2223
                        _la = self._input.LA(1)
                        if not(_la==23 or _la==146):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2224
                        self.match(SqlBaseParser.BY)
                        self.state = 2225
                        self.sortItem()
                        self.state = 2230
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==3:
                            self.state = 2226
                            self.match(SqlBaseParser.T__2)
                            self.state = 2227
                            self.sortItem()
                            self.state = 2232
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64 or _la==65:
                    self.state = 2237
                    self.windowFrame()


                self.state = 2240
                self.match(SqlBaseParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrame" ):
                return visitor.visitWindowFrame(self)
            else:
                return visitor.visitChildren(self)




    def windowFrame(self):

        localctx = SqlBaseParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_windowFrame)
        try:
            self.state = 2259
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2243
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2244
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2245
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2246
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2247
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2248
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2249
                localctx.start = self.frameBound()
                self.state = 2250
                self.match(SqlBaseParser.AND)
                self.state = 2251
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2253
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2254
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2255
                localctx.start = self.frameBound()
                self.state = 2256
                self.match(SqlBaseParser.AND)
                self.state = 2257
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boundType = None # Token

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameBound" ):
                listener.enterFrameBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameBound" ):
                listener.exitFrameBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBound" ):
                return visitor.visitFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def frameBound(self):

        localctx = SqlBaseParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 2268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2261
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 2262
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==67 or _la==68):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2263
                localctx.boundType = self.match(SqlBaseParser.CURRENT)
                self.state = 2264
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2265
                self.expression()
                self.state = 2266
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==67 or _la==68):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = SqlBaseParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2270
            self.identifier()
            self.state = 2275
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,308,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2271
                    self.match(SqlBaseParser.T__3)
                    self.state = 2272
                    self.identifier() 
                self.state = 2277
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,308,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)


        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def KNN(self):
            return self.getToken(SqlBaseParser.KNN, 0)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)

        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = SqlBaseParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_identifier)
        try:
            self.state = 2294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 137, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 242, 243]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2278
                self.strictIdentifier()
                pass
            elif token in [230]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2279
                self.match(SqlBaseParser.ANTI)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2280
                self.match(SqlBaseParser.FULL)
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2281
                self.match(SqlBaseParser.INNER)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2282
                self.match(SqlBaseParser.LEFT)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2283
                self.match(SqlBaseParser.SEMI)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2284
                self.match(SqlBaseParser.RIGHT)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2285
                self.match(SqlBaseParser.NATURAL)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2286
                self.match(SqlBaseParser.JOIN)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2287
                self.match(SqlBaseParser.CROSS)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2288
                self.match(SqlBaseParser.ON)
                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2289
                self.match(SqlBaseParser.KNN)
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2290
                self.match(SqlBaseParser.UNION)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2291
                self.match(SqlBaseParser.INTERSECT)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2292
                self.match(SqlBaseParser.EXCEPT)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2293
                self.match(SqlBaseParser.SETMINUS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_strictIdentifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QuotedIdentifierAlternativeContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quotedIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.QuotedIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifierAlternative" ):
                listener.enterQuotedIdentifierAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifierAlternative" ):
                listener.exitQuotedIdentifierAlternative(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifierAlternative" ):
                return visitor.visitQuotedIdentifierAlternative(self)
            else:
                return visitor.visitChildren(self)


    class UnquotedIdentifierContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(SqlBaseParser.IDENTIFIER, 0)
        def nonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnquotedIdentifier" ):
                return visitor.visitUnquotedIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def strictIdentifier(self):

        localctx = SqlBaseParser.StrictIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_strictIdentifier)
        try:
            self.state = 2299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [242]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2296
                self.match(SqlBaseParser.IDENTIFIER)
                pass
            elif token in [243]:
                localctx = SqlBaseParser.QuotedIdentifierAlternativeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2297
                self.quotedIdentifier()
                pass
            elif token in [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 137, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2298
                self.nonReserved()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_quotedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifier" ):
                return visitor.visitQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def quotedIdentifier(self):

        localctx = SqlBaseParser.QuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_quotedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2301
            self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BigIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGINT_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigIntLiteral" ):
                listener.enterBigIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigIntLiteral" ):
                listener.exitBigIntLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBigIntLiteral" ):
                return visitor.visitBigIntLiteral(self)
            else:
                return visitor.visitChildren(self)


    class TinyIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TINYINT_LITERAL(self):
            return self.getToken(SqlBaseParser.TINYINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTinyIntLiteral" ):
                listener.enterTinyIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTinyIntLiteral" ):
                listener.exitTinyIntLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTinyIntLiteral" ):
                return visitor.visitTinyIntLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BigDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGDECIMAL_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigDecimalLiteral" ):
                listener.enterBigDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigDecimalLiteral" ):
                listener.exitBigDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBigDecimalLiteral" ):
                return visitor.visitBigDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_LITERAL(self):
            return self.getToken(SqlBaseParser.DOUBLE_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleLiteral" ):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleLiteral" ):
                listener.exitDoubleLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoubleLiteral" ):
                return visitor.visitDoubleLiteral(self)
            else:
                return visitor.visitChildren(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)


    class SmallIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SMALLINT_LITERAL(self):
            return self.getToken(SqlBaseParser.SMALLINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmallIntLiteral" ):
                listener.enterSmallIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmallIntLiteral" ):
                listener.exitSmallIntLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmallIntLiteral" ):
                return visitor.visitSmallIntLiteral(self)
            else:
                return visitor.visitChildren(self)



    def number(self):

        localctx = SqlBaseParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 2331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 2303
                    self.match(SqlBaseParser.MINUS)


                self.state = 2306
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 2307
                    self.match(SqlBaseParser.MINUS)


                self.state = 2310
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.BigIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 2311
                    self.match(SqlBaseParser.MINUS)


                self.state = 2314
                self.match(SqlBaseParser.BIGINT_LITERAL)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SmallIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 2315
                    self.match(SqlBaseParser.MINUS)


                self.state = 2318
                self.match(SqlBaseParser.SMALLINT_LITERAL)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.TinyIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 2319
                    self.match(SqlBaseParser.MINUS)


                self.state = 2322
                self.match(SqlBaseParser.TINYINT_LITERAL)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 2323
                    self.match(SqlBaseParser.MINUS)


                self.state = 2326
                self.match(SqlBaseParser.DOUBLE_LITERAL)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.BigDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 2327
                    self.match(SqlBaseParser.MINUS)


                self.state = 2330
                self.match(SqlBaseParser.BIGDECIMAL_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)

        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)

        def TERMINATED(self):
            return self.getToken(SqlBaseParser.TERMINATED, 0)

        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)

        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)

        def SEPARATED(self):
            return self.getToken(SqlBaseParser.SEPARATED, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)

        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)

        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)

        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def END(self):
            return self.getToken(SqlBaseParser.END, 0)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def STRATIFY(self):
            return self.getToken(SqlBaseParser.STRATIFY, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonReserved" ):
                return visitor.visitNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def nonReserved(self):

        localctx = SqlBaseParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2333
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -1147292005072634880) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 648518088643313663) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & -31) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & 3758096383) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[34] = self.queryTerm_sempred
        self._predicates[64] = self.booleanExpression_sempred
        self._predicates[70] = self.valueExpression_sempred
        self._predicates[71] = self.primaryExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         




